
ark.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08002908  08002908  00012908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029fc  080029fc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080029fc  080029fc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029fc  080029fc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029fc  080029fc  000129fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a00  08002a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000078  08002a7c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08002a7c  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007308  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001594  00000000  00000000  000273a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f0  00000000  00000000  00028940  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000638  00000000  00000000  00029030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014138  00000000  00000000  00029668  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006fa1  00000000  00000000  0003d7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006aa65  00000000  00000000  00044741  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af1a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000250c  00000000  00000000  000af224  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080028f0 	.word	0x080028f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080028f0 	.word	0x080028f0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <tmain>:
//    return len;
//
//}


int tmain(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0

    volatile int index = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	607b      	str	r3, [r7, #4]

    while (1) {
        printf("Count of 't': %d\n", index);
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	4619      	mov	r1, r3
 800016a:	4803      	ldr	r0, [pc, #12]	; (8000178 <tmain+0x1c>)
 800016c:	f001 fdf6 	bl	8001d5c <iprintf>
        index += 2;
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	3302      	adds	r3, #2
 8000174:	607b      	str	r3, [r7, #4]
        printf("Count of 't': %d\n", index);
 8000176:	e7f6      	b.n	8000166 <tmain+0xa>
 8000178:	08002908 	.word	0x08002908

0800017c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000182:	4b14      	ldr	r3, [pc, #80]	; (80001d4 <MX_GPIO_Init+0x58>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a13      	ldr	r2, [pc, #76]	; (80001d4 <MX_GPIO_Init+0x58>)
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b11      	ldr	r3, [pc, #68]	; (80001d4 <MX_GPIO_Init+0x58>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0310 	and.w	r3, r3, #16
 8000196:	60fb      	str	r3, [r7, #12]
 8000198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800019a:	4b0e      	ldr	r3, [pc, #56]	; (80001d4 <MX_GPIO_Init+0x58>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a0d      	ldr	r2, [pc, #52]	; (80001d4 <MX_GPIO_Init+0x58>)
 80001a0:	f043 0320 	orr.w	r3, r3, #32
 80001a4:	6193      	str	r3, [r2, #24]
 80001a6:	4b0b      	ldr	r3, [pc, #44]	; (80001d4 <MX_GPIO_Init+0x58>)
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	f003 0320 	and.w	r3, r3, #32
 80001ae:	60bb      	str	r3, [r7, #8]
 80001b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b2:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <MX_GPIO_Init+0x58>)
 80001b4:	699b      	ldr	r3, [r3, #24]
 80001b6:	4a07      	ldr	r2, [pc, #28]	; (80001d4 <MX_GPIO_Init+0x58>)
 80001b8:	f043 0308 	orr.w	r3, r3, #8
 80001bc:	6193      	str	r3, [r2, #24]
 80001be:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <MX_GPIO_Init+0x58>)
 80001c0:	699b      	ldr	r3, [r3, #24]
 80001c2:	f003 0308 	and.w	r3, r3, #8
 80001c6:	607b      	str	r3, [r7, #4]
 80001c8:	687b      	ldr	r3, [r7, #4]

}
 80001ca:	bf00      	nop
 80001cc:	3714      	adds	r7, #20
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	40021000 	.word	0x40021000

080001d8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <MX_I2C1_Init+0x50>)
 80001de:	4a13      	ldr	r2, [pc, #76]	; (800022c <MX_I2C1_Init+0x54>)
 80001e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001e2:	4b11      	ldr	r3, [pc, #68]	; (8000228 <MX_I2C1_Init+0x50>)
 80001e4:	4a12      	ldr	r2, [pc, #72]	; (8000230 <MX_I2C1_Init+0x58>)
 80001e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <MX_I2C1_Init+0x50>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <MX_I2C1_Init+0x50>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <MX_I2C1_Init+0x50>)
 80001f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80001fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <MX_I2C1_Init+0x50>)
 80001fe:	2200      	movs	r2, #0
 8000200:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000202:	4b09      	ldr	r3, [pc, #36]	; (8000228 <MX_I2C1_Init+0x50>)
 8000204:	2200      	movs	r2, #0
 8000206:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <MX_I2C1_Init+0x50>)
 800020a:	2200      	movs	r2, #0
 800020c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <MX_I2C1_Init+0x50>)
 8000210:	2200      	movs	r2, #0
 8000212:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <MX_I2C1_Init+0x50>)
 8000216:	f000 fc75 	bl	8000b04 <HAL_I2C_Init>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000220:	f000 f8f8 	bl	8000414 <Error_Handler>
  }

}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	2000014c 	.word	0x2000014c
 800022c:	40005400 	.word	0x40005400
 8000230:	000186a0 	.word	0x000186a0

08000234 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <MX_I2C2_Init+0x50>)
 800023a:	4a13      	ldr	r2, [pc, #76]	; (8000288 <MX_I2C2_Init+0x54>)
 800023c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <MX_I2C2_Init+0x50>)
 8000240:	4a12      	ldr	r2, [pc, #72]	; (800028c <MX_I2C2_Init+0x58>)
 8000242:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000244:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <MX_I2C2_Init+0x50>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <MX_I2C2_Init+0x50>)
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <MX_I2C2_Init+0x50>)
 8000252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000256:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <MX_I2C2_Init+0x50>)
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <MX_I2C2_Init+0x50>)
 8000260:	2200      	movs	r2, #0
 8000262:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <MX_I2C2_Init+0x50>)
 8000266:	2200      	movs	r2, #0
 8000268:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <MX_I2C2_Init+0x50>)
 800026c:	2200      	movs	r2, #0
 800026e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <MX_I2C2_Init+0x50>)
 8000272:	f000 fc47 	bl	8000b04 <HAL_I2C_Init>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800027c:	f000 f8ca 	bl	8000414 <Error_Handler>
  }

}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	200001a0 	.word	0x200001a0
 8000288:	40005800 	.word	0x40005800
 800028c:	000186a0 	.word	0x000186a0

08000290 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b08a      	sub	sp, #40	; 0x28
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000298:	f107 0318 	add.w	r3, r7, #24
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a2b      	ldr	r2, [pc, #172]	; (8000358 <HAL_I2C_MspInit+0xc8>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d124      	bne.n	80002fa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b0:	4b2a      	ldr	r3, [pc, #168]	; (800035c <HAL_I2C_MspInit+0xcc>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a29      	ldr	r2, [pc, #164]	; (800035c <HAL_I2C_MspInit+0xcc>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b27      	ldr	r3, [pc, #156]	; (800035c <HAL_I2C_MspInit+0xcc>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0308 	and.w	r3, r3, #8
 80002c4:	617b      	str	r3, [r7, #20]
 80002c6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002c8:	23c0      	movs	r3, #192	; 0xc0
 80002ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002cc:	2312      	movs	r3, #18
 80002ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002d0:	2303      	movs	r3, #3
 80002d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d4:	f107 0318 	add.w	r3, r7, #24
 80002d8:	4619      	mov	r1, r3
 80002da:	4821      	ldr	r0, [pc, #132]	; (8000360 <HAL_I2C_MspInit+0xd0>)
 80002dc:	f000 fab8 	bl	8000850 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80002e0:	4b1e      	ldr	r3, [pc, #120]	; (800035c <HAL_I2C_MspInit+0xcc>)
 80002e2:	69db      	ldr	r3, [r3, #28]
 80002e4:	4a1d      	ldr	r2, [pc, #116]	; (800035c <HAL_I2C_MspInit+0xcc>)
 80002e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002ea:	61d3      	str	r3, [r2, #28]
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <HAL_I2C_MspInit+0xcc>)
 80002ee:	69db      	ldr	r3, [r3, #28]
 80002f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002f4:	613b      	str	r3, [r7, #16]
 80002f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80002f8:	e029      	b.n	800034e <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a19      	ldr	r2, [pc, #100]	; (8000364 <HAL_I2C_MspInit+0xd4>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d124      	bne.n	800034e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <HAL_I2C_MspInit+0xcc>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a14      	ldr	r2, [pc, #80]	; (800035c <HAL_I2C_MspInit+0xcc>)
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <HAL_I2C_MspInit+0xcc>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0308 	and.w	r3, r3, #8
 8000318:	60fb      	str	r3, [r7, #12]
 800031a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800031c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000322:	2312      	movs	r3, #18
 8000324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000326:	2303      	movs	r3, #3
 8000328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032a:	f107 0318 	add.w	r3, r7, #24
 800032e:	4619      	mov	r1, r3
 8000330:	480b      	ldr	r0, [pc, #44]	; (8000360 <HAL_I2C_MspInit+0xd0>)
 8000332:	f000 fa8d 	bl	8000850 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <HAL_I2C_MspInit+0xcc>)
 8000338:	69db      	ldr	r3, [r3, #28]
 800033a:	4a08      	ldr	r2, [pc, #32]	; (800035c <HAL_I2C_MspInit+0xcc>)
 800033c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000340:	61d3      	str	r3, [r2, #28]
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <HAL_I2C_MspInit+0xcc>)
 8000344:	69db      	ldr	r3, [r3, #28]
 8000346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	68bb      	ldr	r3, [r7, #8]
}
 800034e:	bf00      	nop
 8000350:	3728      	adds	r7, #40	; 0x28
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40005400 	.word	0x40005400
 800035c:	40021000 	.word	0x40021000
 8000360:	40010c00 	.word	0x40010c00
 8000364:	40005800 	.word	0x40005800

08000368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 800036c:	f001 fb26 	bl	80019bc <initialise_monitor_handles>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000370:	f000 f928 	bl	80005c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000374:	f000 f809 	bl	800038a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000378:	f7ff ff00 	bl	800017c <MX_GPIO_Init>
  MX_I2C1_Init();
 800037c:	f7ff ff2c 	bl	80001d8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000380:	f7ff ff58 	bl	8000234 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  tmain();
 8000384:	f7ff feea 	bl	800015c <tmain>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000388:	e7fe      	b.n	8000388 <main+0x20>

0800038a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038a:	b580      	push	{r7, lr}
 800038c:	b090      	sub	sp, #64	; 0x40
 800038e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000390:	f107 0318 	add.w	r3, r7, #24
 8000394:	2228      	movs	r2, #40	; 0x28
 8000396:	2100      	movs	r1, #0
 8000398:	4618      	mov	r0, r3
 800039a:	f001 fc7d 	bl	8001c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ac:	2301      	movs	r3, #1
 80003ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ba:	2301      	movs	r3, #1
 80003bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003be:	2302      	movs	r3, #2
 80003c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ce:	f107 0318 	add.w	r3, r7, #24
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 fcbe 	bl	8000d54 <HAL_RCC_OscConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003de:	f000 f819 	bl	8000414 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	230f      	movs	r3, #15
 80003e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e6:	2302      	movs	r3, #2
 80003e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2102      	movs	r1, #2
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 ff29 	bl	8001254 <HAL_RCC_ClockConfig>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000408:	f000 f804 	bl	8000414 <Error_Handler>
  }
}
 800040c:	bf00      	nop
 800040e:	3740      	adds	r7, #64	; 0x40
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <HAL_MspInit+0x40>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a0d      	ldr	r2, [pc, #52]	; (8000460 <HAL_MspInit+0x40>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <HAL_MspInit+0x40>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043e:	4b08      	ldr	r3, [pc, #32]	; (8000460 <HAL_MspInit+0x40>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	4a07      	ldr	r2, [pc, #28]	; (8000460 <HAL_MspInit+0x40>)
 8000444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000448:	61d3      	str	r3, [r2, #28]
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <HAL_MspInit+0x40>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000452:	603b      	str	r3, [r7, #0]
 8000454:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	40021000 	.word	0x40021000

08000464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <HardFault_Handler+0x4>

08000476 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800047a:	e7fe      	b.n	800047a <MemManage_Handler+0x4>

0800047c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <BusFault_Handler+0x4>

08000482 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <UsageFault_Handler+0x4>

08000488 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b0:	f000 f8ce 	bl	8000650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <_sbrk+0x50>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d102      	bne.n	80004ce <_sbrk+0x16>
		heap_end = &end;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <_sbrk+0x50>)
 80004ca:	4a10      	ldr	r2, [pc, #64]	; (800050c <_sbrk+0x54>)
 80004cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <_sbrk+0x50>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <_sbrk+0x50>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4413      	add	r3, r2
 80004dc:	466a      	mov	r2, sp
 80004de:	4293      	cmp	r3, r2
 80004e0:	d907      	bls.n	80004f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80004e2:	f001 fae5 	bl	8001ab0 <__errno>
 80004e6:	4602      	mov	r2, r0
 80004e8:	230c      	movs	r3, #12
 80004ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80004ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004f0:	e006      	b.n	8000500 <_sbrk+0x48>
	}

	heap_end += incr;
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <_sbrk+0x50>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	4a03      	ldr	r2, [pc, #12]	; (8000508 <_sbrk+0x50>)
 80004fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000094 	.word	0x20000094
 800050c:	20000200 	.word	0x20000200

08000510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <SystemInit+0x5c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a14      	ldr	r2, [pc, #80]	; (800056c <SystemInit+0x5c>)
 800051a:	f043 0301 	orr.w	r3, r3, #1
 800051e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <SystemInit+0x5c>)
 8000522:	685a      	ldr	r2, [r3, #4]
 8000524:	4911      	ldr	r1, [pc, #68]	; (800056c <SystemInit+0x5c>)
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <SystemInit+0x60>)
 8000528:	4013      	ands	r3, r2
 800052a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <SystemInit+0x5c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0e      	ldr	r2, [pc, #56]	; (800056c <SystemInit+0x5c>)
 8000532:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800053a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <SystemInit+0x5c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a0a      	ldr	r2, [pc, #40]	; (800056c <SystemInit+0x5c>)
 8000542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000546:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <SystemInit+0x5c>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	4a07      	ldr	r2, [pc, #28]	; (800056c <SystemInit+0x5c>)
 800054e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000552:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <SystemInit+0x5c>)
 8000556:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800055a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <SystemInit+0x64>)
 800055e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000562:	609a      	str	r2, [r3, #8]
#endif 
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000
 8000570:	f8ff0000 	.word	0xf8ff0000
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000578:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800057a:	e003      	b.n	8000584 <LoopCopyDataInit>

0800057c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800057e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000580:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000582:	3104      	adds	r1, #4

08000584 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000588:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800058a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800058c:	d3f6      	bcc.n	800057c <CopyDataInit>
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000590:	e002      	b.n	8000598 <LoopFillZerobss>

08000592 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000594:	f842 3b04 	str.w	r3, [r2], #4

08000598 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800059a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800059c:	d3f9      	bcc.n	8000592 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800059e:	f7ff ffb7 	bl	8000510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005a2:	f001 fb55 	bl	8001c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a6:	f7ff fedf 	bl	8000368 <main>
  bx lr
 80005aa:	4770      	bx	lr
  ldr r3, =_sidata
 80005ac:	08002a04 	.word	0x08002a04
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005b4:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80005b8:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80005bc:	200001fc 	.word	0x200001fc

080005c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_2_IRQHandler>
	...

080005c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <HAL_Init+0x28>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <HAL_Init+0x28>)
 80005ce:	f043 0310 	orr.w	r3, r3, #16
 80005d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d4:	2003      	movs	r0, #3
 80005d6:	f000 f907 	bl	80007e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 f808 	bl	80005f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e0:	f7ff ff1e 	bl	8000420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40022000 	.word	0x40022000

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_InitTick+0x54>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_InitTick+0x58>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	fbb3 f3f1 	udiv	r3, r3, r1
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f911 	bl	8000836 <HAL_SYSTICK_Config>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e00e      	b.n	800063c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	d80a      	bhi.n	800063a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	2200      	movs	r2, #0
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800062c:	f000 f8e7 	bl	80007fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4a06      	ldr	r2, [pc, #24]	; (800064c <HAL_InitTick+0x5c>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000636:	2300      	movs	r3, #0
 8000638:	e000      	b.n	800063c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	20000008 	.word	0x20000008
 800064c:	20000004 	.word	0x20000004

08000650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <HAL_IncTick+0x1c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_IncTick+0x20>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a03      	ldr	r2, [pc, #12]	; (8000670 <HAL_IncTick+0x20>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	20000008 	.word	0x20000008
 8000670:	200001f4 	.word	0x200001f4

08000674 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return uwTick;
 8000678:	4b02      	ldr	r3, [pc, #8]	; (8000684 <HAL_GetTick+0x10>)
 800067a:	681b      	ldr	r3, [r3, #0]
}
 800067c:	4618      	mov	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	200001f4 	.word	0x200001f4

08000688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <__NVIC_SetPriorityGrouping+0x44>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a4:	4013      	ands	r3, r2
 80006a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ba:	4a04      	ldr	r2, [pc, #16]	; (80006cc <__NVIC_SetPriorityGrouping+0x44>)
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	60d3      	str	r3, [r2, #12]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <__NVIC_GetPriorityGrouping+0x18>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	f003 0307 	and.w	r3, r3, #7
}
 80006de:	4618      	mov	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	6039      	str	r1, [r7, #0]
 80006f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	db0a      	blt.n	8000716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	b2da      	uxtb	r2, r3
 8000704:	490c      	ldr	r1, [pc, #48]	; (8000738 <__NVIC_SetPriority+0x4c>)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	0112      	lsls	r2, r2, #4
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	440b      	add	r3, r1
 8000710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000714:	e00a      	b.n	800072c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4908      	ldr	r1, [pc, #32]	; (800073c <__NVIC_SetPriority+0x50>)
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	3b04      	subs	r3, #4
 8000724:	0112      	lsls	r2, r2, #4
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	440b      	add	r3, r1
 800072a:	761a      	strb	r2, [r3, #24]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000e100 	.word	0xe000e100
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000740:	b480      	push	{r7}
 8000742:	b089      	sub	sp, #36	; 0x24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	f1c3 0307 	rsb	r3, r3, #7
 800075a:	2b04      	cmp	r3, #4
 800075c:	bf28      	it	cs
 800075e:	2304      	movcs	r3, #4
 8000760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	3304      	adds	r3, #4
 8000766:	2b06      	cmp	r3, #6
 8000768:	d902      	bls.n	8000770 <NVIC_EncodePriority+0x30>
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	3b03      	subs	r3, #3
 800076e:	e000      	b.n	8000772 <NVIC_EncodePriority+0x32>
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	43da      	mvns	r2, r3
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	401a      	ands	r2, r3
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000788:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	fa01 f303 	lsl.w	r3, r1, r3
 8000792:	43d9      	mvns	r1, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	4313      	orrs	r3, r2
         );
}
 800079a:	4618      	mov	r0, r3
 800079c:	3724      	adds	r7, #36	; 0x24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b4:	d301      	bcc.n	80007ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00f      	b.n	80007da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <SysTick_Config+0x40>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c2:	210f      	movs	r1, #15
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007c8:	f7ff ff90 	bl	80006ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <SysTick_Config+0x40>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <SysTick_Config+0x40>)
 80007d4:	2207      	movs	r2, #7
 80007d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	e000e010 	.word	0xe000e010

080007e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff49 	bl	8000688 <__NVIC_SetPriorityGrouping>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000810:	f7ff ff5e 	bl	80006d0 <__NVIC_GetPriorityGrouping>
 8000814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	6978      	ldr	r0, [r7, #20]
 800081c:	f7ff ff90 	bl	8000740 <NVIC_EncodePriority>
 8000820:	4602      	mov	r2, r0
 8000822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff5f 	bl	80006ec <__NVIC_SetPriority>
}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffb0 	bl	80007a4 <SysTick_Config>
 8000844:	4603      	mov	r3, r0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000850:	b480      	push	{r7}
 8000852:	b08b      	sub	sp, #44	; 0x2c
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000862:	e127      	b.n	8000ab4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000864:	2201      	movs	r2, #1
 8000866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	69fa      	ldr	r2, [r7, #28]
 8000874:	4013      	ands	r3, r2
 8000876:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	429a      	cmp	r2, r3
 800087e:	f040 8116 	bne.w	8000aae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2b12      	cmp	r3, #18
 8000888:	d034      	beq.n	80008f4 <HAL_GPIO_Init+0xa4>
 800088a:	2b12      	cmp	r3, #18
 800088c:	d80d      	bhi.n	80008aa <HAL_GPIO_Init+0x5a>
 800088e:	2b02      	cmp	r3, #2
 8000890:	d02b      	beq.n	80008ea <HAL_GPIO_Init+0x9a>
 8000892:	2b02      	cmp	r3, #2
 8000894:	d804      	bhi.n	80008a0 <HAL_GPIO_Init+0x50>
 8000896:	2b00      	cmp	r3, #0
 8000898:	d031      	beq.n	80008fe <HAL_GPIO_Init+0xae>
 800089a:	2b01      	cmp	r3, #1
 800089c:	d01c      	beq.n	80008d8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800089e:	e048      	b.n	8000932 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d043      	beq.n	800092c <HAL_GPIO_Init+0xdc>
 80008a4:	2b11      	cmp	r3, #17
 80008a6:	d01b      	beq.n	80008e0 <HAL_GPIO_Init+0x90>
          break;
 80008a8:	e043      	b.n	8000932 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008aa:	4a89      	ldr	r2, [pc, #548]	; (8000ad0 <HAL_GPIO_Init+0x280>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d026      	beq.n	80008fe <HAL_GPIO_Init+0xae>
 80008b0:	4a87      	ldr	r2, [pc, #540]	; (8000ad0 <HAL_GPIO_Init+0x280>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d806      	bhi.n	80008c4 <HAL_GPIO_Init+0x74>
 80008b6:	4a87      	ldr	r2, [pc, #540]	; (8000ad4 <HAL_GPIO_Init+0x284>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d020      	beq.n	80008fe <HAL_GPIO_Init+0xae>
 80008bc:	4a86      	ldr	r2, [pc, #536]	; (8000ad8 <HAL_GPIO_Init+0x288>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d01d      	beq.n	80008fe <HAL_GPIO_Init+0xae>
          break;
 80008c2:	e036      	b.n	8000932 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008c4:	4a85      	ldr	r2, [pc, #532]	; (8000adc <HAL_GPIO_Init+0x28c>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d019      	beq.n	80008fe <HAL_GPIO_Init+0xae>
 80008ca:	4a85      	ldr	r2, [pc, #532]	; (8000ae0 <HAL_GPIO_Init+0x290>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d016      	beq.n	80008fe <HAL_GPIO_Init+0xae>
 80008d0:	4a84      	ldr	r2, [pc, #528]	; (8000ae4 <HAL_GPIO_Init+0x294>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d013      	beq.n	80008fe <HAL_GPIO_Init+0xae>
          break;
 80008d6:	e02c      	b.n	8000932 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	623b      	str	r3, [r7, #32]
          break;
 80008de:	e028      	b.n	8000932 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	3304      	adds	r3, #4
 80008e6:	623b      	str	r3, [r7, #32]
          break;
 80008e8:	e023      	b.n	8000932 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	3308      	adds	r3, #8
 80008f0:	623b      	str	r3, [r7, #32]
          break;
 80008f2:	e01e      	b.n	8000932 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	330c      	adds	r3, #12
 80008fa:	623b      	str	r3, [r7, #32]
          break;
 80008fc:	e019      	b.n	8000932 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d102      	bne.n	800090c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000906:	2304      	movs	r3, #4
 8000908:	623b      	str	r3, [r7, #32]
          break;
 800090a:	e012      	b.n	8000932 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d105      	bne.n	8000920 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000914:	2308      	movs	r3, #8
 8000916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	611a      	str	r2, [r3, #16]
          break;
 800091e:	e008      	b.n	8000932 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000920:	2308      	movs	r3, #8
 8000922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69fa      	ldr	r2, [r7, #28]
 8000928:	615a      	str	r2, [r3, #20]
          break;
 800092a:	e002      	b.n	8000932 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
          break;
 8000930:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2bff      	cmp	r3, #255	; 0xff
 8000936:	d801      	bhi.n	800093c <HAL_GPIO_Init+0xec>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	e001      	b.n	8000940 <HAL_GPIO_Init+0xf0>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3304      	adds	r3, #4
 8000940:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	2bff      	cmp	r3, #255	; 0xff
 8000946:	d802      	bhi.n	800094e <HAL_GPIO_Init+0xfe>
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	e002      	b.n	8000954 <HAL_GPIO_Init+0x104>
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	3b08      	subs	r3, #8
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	210f      	movs	r1, #15
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	401a      	ands	r2, r3
 8000966:	6a39      	ldr	r1, [r7, #32]
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	431a      	orrs	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097c:	2b00      	cmp	r3, #0
 800097e:	f000 8096 	beq.w	8000aae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000982:	4b59      	ldr	r3, [pc, #356]	; (8000ae8 <HAL_GPIO_Init+0x298>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a58      	ldr	r2, [pc, #352]	; (8000ae8 <HAL_GPIO_Init+0x298>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6193      	str	r3, [r2, #24]
 800098e:	4b56      	ldr	r3, [pc, #344]	; (8000ae8 <HAL_GPIO_Init+0x298>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800099a:	4a54      	ldr	r2, [pc, #336]	; (8000aec <HAL_GPIO_Init+0x29c>)
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	089b      	lsrs	r3, r3, #2
 80009a0:	3302      	adds	r3, #2
 80009a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	220f      	movs	r2, #15
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	4013      	ands	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a4b      	ldr	r2, [pc, #300]	; (8000af0 <HAL_GPIO_Init+0x2a0>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d013      	beq.n	80009ee <HAL_GPIO_Init+0x19e>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a4a      	ldr	r2, [pc, #296]	; (8000af4 <HAL_GPIO_Init+0x2a4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d00d      	beq.n	80009ea <HAL_GPIO_Init+0x19a>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a49      	ldr	r2, [pc, #292]	; (8000af8 <HAL_GPIO_Init+0x2a8>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d007      	beq.n	80009e6 <HAL_GPIO_Init+0x196>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a48      	ldr	r2, [pc, #288]	; (8000afc <HAL_GPIO_Init+0x2ac>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d101      	bne.n	80009e2 <HAL_GPIO_Init+0x192>
 80009de:	2303      	movs	r3, #3
 80009e0:	e006      	b.n	80009f0 <HAL_GPIO_Init+0x1a0>
 80009e2:	2304      	movs	r3, #4
 80009e4:	e004      	b.n	80009f0 <HAL_GPIO_Init+0x1a0>
 80009e6:	2302      	movs	r3, #2
 80009e8:	e002      	b.n	80009f0 <HAL_GPIO_Init+0x1a0>
 80009ea:	2301      	movs	r3, #1
 80009ec:	e000      	b.n	80009f0 <HAL_GPIO_Init+0x1a0>
 80009ee:	2300      	movs	r3, #0
 80009f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f2:	f002 0203 	and.w	r2, r2, #3
 80009f6:	0092      	lsls	r2, r2, #2
 80009f8:	4093      	lsls	r3, r2
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a00:	493a      	ldr	r1, [pc, #232]	; (8000aec <HAL_GPIO_Init+0x29c>)
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	089b      	lsrs	r3, r3, #2
 8000a06:	3302      	adds	r3, #2
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d006      	beq.n	8000a28 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a1a:	4b39      	ldr	r3, [pc, #228]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4938      	ldr	r1, [pc, #224]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	600b      	str	r3, [r1, #0]
 8000a26:	e006      	b.n	8000a36 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a28:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	4933      	ldr	r1, [pc, #204]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a32:	4013      	ands	r3, r2
 8000a34:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d006      	beq.n	8000a50 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a42:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	492e      	ldr	r1, [pc, #184]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	604b      	str	r3, [r1, #4]
 8000a4e:	e006      	b.n	8000a5e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a50:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a52:	685a      	ldr	r2, [r3, #4]
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	43db      	mvns	r3, r3
 8000a58:	4929      	ldr	r1, [pc, #164]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d006      	beq.n	8000a78 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a6a:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	4924      	ldr	r1, [pc, #144]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	608b      	str	r3, [r1, #8]
 8000a76:	e006      	b.n	8000a86 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a78:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a7a:	689a      	ldr	r2, [r3, #8]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	491f      	ldr	r1, [pc, #124]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a82:	4013      	ands	r3, r2
 8000a84:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d006      	beq.n	8000aa0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a92:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a94:	68da      	ldr	r2, [r3, #12]
 8000a96:	491a      	ldr	r1, [pc, #104]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	60cb      	str	r3, [r1, #12]
 8000a9e:	e006      	b.n	8000aae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000aa2:	68da      	ldr	r2, [r3, #12]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	4915      	ldr	r1, [pc, #84]	; (8000b00 <HAL_GPIO_Init+0x2b0>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aba:	fa22 f303 	lsr.w	r3, r2, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f47f aed0 	bne.w	8000864 <HAL_GPIO_Init+0x14>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	372c      	adds	r7, #44	; 0x2c
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	10210000 	.word	0x10210000
 8000ad4:	10110000 	.word	0x10110000
 8000ad8:	10120000 	.word	0x10120000
 8000adc:	10310000 	.word	0x10310000
 8000ae0:	10320000 	.word	0x10320000
 8000ae4:	10220000 	.word	0x10220000
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010000 	.word	0x40010000
 8000af0:	40010800 	.word	0x40010800
 8000af4:	40010c00 	.word	0x40010c00
 8000af8:	40011000 	.word	0x40011000
 8000afc:	40011400 	.word	0x40011400
 8000b00:	40010400 	.word	0x40010400

08000b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e10f      	b.n	8000d36 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d106      	bne.n	8000b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff fbb0 	bl	8000290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2224      	movs	r2, #36	; 0x24
 8000b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f022 0201 	bic.w	r2, r2, #1
 8000b46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b48:	f000 fcda 	bl	8001500 <HAL_RCC_GetPCLK1Freq>
 8000b4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	4a7b      	ldr	r2, [pc, #492]	; (8000d40 <HAL_I2C_Init+0x23c>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d807      	bhi.n	8000b68 <HAL_I2C_Init+0x64>
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4a7a      	ldr	r2, [pc, #488]	; (8000d44 <HAL_I2C_Init+0x240>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	bf94      	ite	ls
 8000b60:	2301      	movls	r3, #1
 8000b62:	2300      	movhi	r3, #0
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	e006      	b.n	8000b76 <HAL_I2C_Init+0x72>
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4a77      	ldr	r2, [pc, #476]	; (8000d48 <HAL_I2C_Init+0x244>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	bf94      	ite	ls
 8000b70:	2301      	movls	r3, #1
 8000b72:	2300      	movhi	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e0db      	b.n	8000d36 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4a72      	ldr	r2, [pc, #456]	; (8000d4c <HAL_I2C_Init+0x248>)
 8000b82:	fba2 2303 	umull	r2, r3, r2, r3
 8000b86:	0c9b      	lsrs	r3, r3, #18
 8000b88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6a1b      	ldr	r3, [r3, #32]
 8000ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	4a64      	ldr	r2, [pc, #400]	; (8000d40 <HAL_I2C_Init+0x23c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d802      	bhi.n	8000bb8 <HAL_I2C_Init+0xb4>
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	e009      	b.n	8000bcc <HAL_I2C_Init+0xc8>
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bbe:	fb02 f303 	mul.w	r3, r2, r3
 8000bc2:	4a63      	ldr	r2, [pc, #396]	; (8000d50 <HAL_I2C_Init+0x24c>)
 8000bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc8:	099b      	lsrs	r3, r3, #6
 8000bca:	3301      	adds	r3, #1
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	6812      	ldr	r2, [r2, #0]
 8000bd0:	430b      	orrs	r3, r1
 8000bd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000bde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	4956      	ldr	r1, [pc, #344]	; (8000d40 <HAL_I2C_Init+0x23c>)
 8000be8:	428b      	cmp	r3, r1
 8000bea:	d80d      	bhi.n	8000c08 <HAL_I2C_Init+0x104>
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	1e59      	subs	r1, r3, #1
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c00:	2b04      	cmp	r3, #4
 8000c02:	bf38      	it	cc
 8000c04:	2304      	movcc	r3, #4
 8000c06:	e04f      	b.n	8000ca8 <HAL_I2C_Init+0x1a4>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d111      	bne.n	8000c34 <HAL_I2C_Init+0x130>
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	1e58      	subs	r0, r3, #1
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6859      	ldr	r1, [r3, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	440b      	add	r3, r1
 8000c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c22:	3301      	adds	r3, #1
 8000c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	bf0c      	ite	eq
 8000c2c:	2301      	moveq	r3, #1
 8000c2e:	2300      	movne	r3, #0
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	e012      	b.n	8000c5a <HAL_I2C_Init+0x156>
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	1e58      	subs	r0, r3, #1
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6859      	ldr	r1, [r3, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	440b      	add	r3, r1
 8000c42:	0099      	lsls	r1, r3, #2
 8000c44:	440b      	add	r3, r1
 8000c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	bf0c      	ite	eq
 8000c54:	2301      	moveq	r3, #1
 8000c56:	2300      	movne	r3, #0
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_I2C_Init+0x15e>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e022      	b.n	8000ca8 <HAL_I2C_Init+0x1a4>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10e      	bne.n	8000c88 <HAL_I2C_Init+0x184>
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	1e58      	subs	r0, r3, #1
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6859      	ldr	r1, [r3, #4]
 8000c72:	460b      	mov	r3, r1
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	440b      	add	r3, r1
 8000c78:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c86:	e00f      	b.n	8000ca8 <HAL_I2C_Init+0x1a4>
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	1e58      	subs	r0, r3, #1
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6859      	ldr	r1, [r3, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	440b      	add	r3, r1
 8000c96:	0099      	lsls	r1, r3, #2
 8000c98:	440b      	add	r3, r1
 8000c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	6809      	ldr	r1, [r1, #0]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69da      	ldr	r2, [r3, #28]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a1b      	ldr	r3, [r3, #32]
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	6911      	ldr	r1, [r2, #16]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68d2      	ldr	r2, [r2, #12]
 8000ce2:	4311      	orrs	r1, r2
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	6812      	ldr	r2, [r2, #0]
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	695a      	ldr	r2, [r3, #20]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	430a      	orrs	r2, r1
 8000d06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0201 	orr.w	r2, r2, #1
 8000d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2220      	movs	r2, #32
 8000d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	000186a0 	.word	0x000186a0
 8000d44:	001e847f 	.word	0x001e847f
 8000d48:	003d08ff 	.word	0x003d08ff
 8000d4c:	431bde83 	.word	0x431bde83
 8000d50:	10624dd3 	.word	0x10624dd3

08000d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e26c      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 8087 	beq.w	8000e82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d74:	4b92      	ldr	r3, [pc, #584]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 030c 	and.w	r3, r3, #12
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d00c      	beq.n	8000d9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d80:	4b8f      	ldr	r3, [pc, #572]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	d112      	bne.n	8000db2 <HAL_RCC_OscConfig+0x5e>
 8000d8c:	4b8c      	ldr	r3, [pc, #560]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d98:	d10b      	bne.n	8000db2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9a:	4b89      	ldr	r3, [pc, #548]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d06c      	beq.n	8000e80 <HAL_RCC_OscConfig+0x12c>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d168      	bne.n	8000e80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e246      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dba:	d106      	bne.n	8000dca <HAL_RCC_OscConfig+0x76>
 8000dbc:	4b80      	ldr	r3, [pc, #512]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a7f      	ldr	r2, [pc, #508]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	e02e      	b.n	8000e28 <HAL_RCC_OscConfig+0xd4>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10c      	bne.n	8000dec <HAL_RCC_OscConfig+0x98>
 8000dd2:	4b7b      	ldr	r3, [pc, #492]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a7a      	ldr	r2, [pc, #488]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4b78      	ldr	r3, [pc, #480]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a77      	ldr	r2, [pc, #476]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e01d      	b.n	8000e28 <HAL_RCC_OscConfig+0xd4>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df4:	d10c      	bne.n	8000e10 <HAL_RCC_OscConfig+0xbc>
 8000df6:	4b72      	ldr	r3, [pc, #456]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a71      	ldr	r2, [pc, #452]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	4b6f      	ldr	r3, [pc, #444]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a6e      	ldr	r2, [pc, #440]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	e00b      	b.n	8000e28 <HAL_RCC_OscConfig+0xd4>
 8000e10:	4b6b      	ldr	r3, [pc, #428]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a6a      	ldr	r2, [pc, #424]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	4b68      	ldr	r3, [pc, #416]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a67      	ldr	r2, [pc, #412]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d013      	beq.n	8000e58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e30:	f7ff fc20 	bl	8000674 <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff fc1c 	bl	8000674 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b64      	cmp	r3, #100	; 0x64
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e1fa      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4a:	4b5d      	ldr	r3, [pc, #372]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f0      	beq.n	8000e38 <HAL_RCC_OscConfig+0xe4>
 8000e56:	e014      	b.n	8000e82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e58:	f7ff fc0c 	bl	8000674 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e60:	f7ff fc08 	bl	8000674 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	; 0x64
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e1e6      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e72:	4b53      	ldr	r3, [pc, #332]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f0      	bne.n	8000e60 <HAL_RCC_OscConfig+0x10c>
 8000e7e:	e000      	b.n	8000e82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d063      	beq.n	8000f56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e8e:	4b4c      	ldr	r3, [pc, #304]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 030c 	and.w	r3, r3, #12
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00b      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e9a:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 030c 	and.w	r3, r3, #12
 8000ea2:	2b08      	cmp	r3, #8
 8000ea4:	d11c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x18c>
 8000ea6:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d116      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb2:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d005      	beq.n	8000eca <HAL_RCC_OscConfig+0x176>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d001      	beq.n	8000eca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e1ba      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eca:	4b3d      	ldr	r3, [pc, #244]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	4939      	ldr	r1, [pc, #228]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ede:	e03a      	b.n	8000f56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d020      	beq.n	8000f2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee8:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eee:	f7ff fbc1 	bl	8000674 <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef6:	f7ff fbbd 	bl	8000674 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e19b      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f08:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f0      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4927      	ldr	r1, [pc, #156]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	4313      	orrs	r3, r2
 8000f26:	600b      	str	r3, [r1, #0]
 8000f28:	e015      	b.n	8000f56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f2a:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f30:	f7ff fba0 	bl	8000674 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f38:	f7ff fb9c 	bl	8000674 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e17a      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f0      	bne.n	8000f38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d03a      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d019      	beq.n	8000f9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_RCC_OscConfig+0x274>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f70:	f7ff fb80 	bl	8000674 <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f78:	f7ff fb7c 	bl	8000674 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e15a      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f0      	beq.n	8000f78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f000 fac6 	bl	8001528 <RCC_Delay>
 8000f9c:	e01c      	b.n	8000fd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_RCC_OscConfig+0x274>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa4:	f7ff fb66 	bl	8000674 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000faa:	e00f      	b.n	8000fcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fac:	f7ff fb62 	bl	8000674 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d908      	bls.n	8000fcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e140      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	42420000 	.word	0x42420000
 8000fc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fcc:	4b9e      	ldr	r3, [pc, #632]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1e9      	bne.n	8000fac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80a6 	beq.w	8001132 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fea:	4b97      	ldr	r3, [pc, #604]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10d      	bne.n	8001012 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b94      	ldr	r3, [pc, #592]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a93      	ldr	r2, [pc, #588]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	61d3      	str	r3, [r2, #28]
 8001002:	4b91      	ldr	r3, [pc, #580]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800100e:	2301      	movs	r3, #1
 8001010:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001012:	4b8e      	ldr	r3, [pc, #568]	; (800124c <HAL_RCC_OscConfig+0x4f8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	2b00      	cmp	r3, #0
 800101c:	d118      	bne.n	8001050 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101e:	4b8b      	ldr	r3, [pc, #556]	; (800124c <HAL_RCC_OscConfig+0x4f8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a8a      	ldr	r2, [pc, #552]	; (800124c <HAL_RCC_OscConfig+0x4f8>)
 8001024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800102a:	f7ff fb23 	bl	8000674 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001032:	f7ff fb1f 	bl	8000674 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b64      	cmp	r3, #100	; 0x64
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e0fd      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001044:	4b81      	ldr	r3, [pc, #516]	; (800124c <HAL_RCC_OscConfig+0x4f8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f0      	beq.n	8001032 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d106      	bne.n	8001066 <HAL_RCC_OscConfig+0x312>
 8001058:	4b7b      	ldr	r3, [pc, #492]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	4a7a      	ldr	r2, [pc, #488]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6213      	str	r3, [r2, #32]
 8001064:	e02d      	b.n	80010c2 <HAL_RCC_OscConfig+0x36e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0x334>
 800106e:	4b76      	ldr	r3, [pc, #472]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	4a75      	ldr	r2, [pc, #468]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	6213      	str	r3, [r2, #32]
 800107a:	4b73      	ldr	r3, [pc, #460]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	4a72      	ldr	r2, [pc, #456]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001080:	f023 0304 	bic.w	r3, r3, #4
 8001084:	6213      	str	r3, [r2, #32]
 8001086:	e01c      	b.n	80010c2 <HAL_RCC_OscConfig+0x36e>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b05      	cmp	r3, #5
 800108e:	d10c      	bne.n	80010aa <HAL_RCC_OscConfig+0x356>
 8001090:	4b6d      	ldr	r3, [pc, #436]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	4a6c      	ldr	r2, [pc, #432]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	6213      	str	r3, [r2, #32]
 800109c:	4b6a      	ldr	r3, [pc, #424]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	4a69      	ldr	r2, [pc, #420]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6213      	str	r3, [r2, #32]
 80010a8:	e00b      	b.n	80010c2 <HAL_RCC_OscConfig+0x36e>
 80010aa:	4b67      	ldr	r3, [pc, #412]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	4a66      	ldr	r2, [pc, #408]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80010b0:	f023 0301 	bic.w	r3, r3, #1
 80010b4:	6213      	str	r3, [r2, #32]
 80010b6:	4b64      	ldr	r3, [pc, #400]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	4a63      	ldr	r2, [pc, #396]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80010bc:	f023 0304 	bic.w	r3, r3, #4
 80010c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d015      	beq.n	80010f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ca:	f7ff fad3 	bl	8000674 <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d0:	e00a      	b.n	80010e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d2:	f7ff facf 	bl	8000674 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e0ab      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e8:	4b57      	ldr	r3, [pc, #348]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0ee      	beq.n	80010d2 <HAL_RCC_OscConfig+0x37e>
 80010f4:	e014      	b.n	8001120 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f6:	f7ff fabd 	bl	8000674 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010fc:	e00a      	b.n	8001114 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fe:	f7ff fab9 	bl	8000674 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	f241 3288 	movw	r2, #5000	; 0x1388
 800110c:	4293      	cmp	r3, r2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e095      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001114:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1ee      	bne.n	80010fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d105      	bne.n	8001132 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001126:	4b48      	ldr	r3, [pc, #288]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	4a47      	ldr	r2, [pc, #284]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800112c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001130:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 8081 	beq.w	800123e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800113c:	4b42      	ldr	r3, [pc, #264]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 030c 	and.w	r3, r3, #12
 8001144:	2b08      	cmp	r3, #8
 8001146:	d061      	beq.n	800120c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d146      	bne.n	80011de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001150:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <HAL_RCC_OscConfig+0x4fc>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001156:	f7ff fa8d 	bl	8000674 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115e:	f7ff fa89 	bl	8000674 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e067      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001170:	4b35      	ldr	r3, [pc, #212]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f0      	bne.n	800115e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001184:	d108      	bne.n	8001198 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001186:	4b30      	ldr	r3, [pc, #192]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	492d      	ldr	r1, [pc, #180]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001194:	4313      	orrs	r3, r2
 8001196:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a19      	ldr	r1, [r3, #32]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	430b      	orrs	r3, r1
 80011aa:	4927      	ldr	r1, [pc, #156]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_RCC_OscConfig+0x4fc>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b6:	f7ff fa5d 	bl	8000674 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011be:	f7ff fa59 	bl	8000674 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e037      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d0:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0f0      	beq.n	80011be <HAL_RCC_OscConfig+0x46a>
 80011dc:	e02f      	b.n	800123e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <HAL_RCC_OscConfig+0x4fc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fa46 	bl	8000674 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ec:	f7ff fa42 	bl	8000674 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e020      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x498>
 800120a:	e018      	b.n	800123e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e013      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	429a      	cmp	r2, r3
 800122a:	d106      	bne.n	800123a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001236:	429a      	cmp	r2, r3
 8001238:	d001      	beq.n	800123e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000
 800124c:	40007000 	.word	0x40007000
 8001250:	42420060 	.word	0x42420060

08001254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e0d0      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001268:	4b6a      	ldr	r3, [pc, #424]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d910      	bls.n	8001298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001276:	4b67      	ldr	r3, [pc, #412]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 0207 	bic.w	r2, r3, #7
 800127e:	4965      	ldr	r1, [pc, #404]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	4b63      	ldr	r3, [pc, #396]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0b8      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b0:	4b59      	ldr	r3, [pc, #356]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4a58      	ldr	r2, [pc, #352]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c8:	4b53      	ldr	r3, [pc, #332]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a52      	ldr	r2, [pc, #328]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d4:	4b50      	ldr	r3, [pc, #320]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	494d      	ldr	r1, [pc, #308]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d040      	beq.n	8001374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d115      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e07f      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e073      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	4b3d      	ldr	r3, [pc, #244]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e06b      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001332:	4b39      	ldr	r3, [pc, #228]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f023 0203 	bic.w	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4936      	ldr	r1, [pc, #216]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001344:	f7ff f996 	bl	8000674 <HAL_GetTick>
 8001348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134a:	e00a      	b.n	8001362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134c:	f7ff f992 	bl	8000674 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	; 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e053      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 020c 	and.w	r2, r3, #12
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	429a      	cmp	r2, r3
 8001372:	d1eb      	bne.n	800134c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d210      	bcs.n	80013a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 0207 	bic.w	r2, r3, #7
 800138a:	4922      	ldr	r1, [pc, #136]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e032      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4916      	ldr	r1, [pc, #88]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	490e      	ldr	r1, [pc, #56]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013e2:	f000 f821 	bl	8001428 <HAL_RCC_GetSysClockFreq>
 80013e6:	4601      	mov	r1, r0
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_RCC_ClockConfig+0x1c8>)
 80013f4:	5cd3      	ldrb	r3, [r2, r3]
 80013f6:	fa21 f303 	lsr.w	r3, r1, r3
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <HAL_RCC_ClockConfig+0x1cc>)
 80013fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_RCC_ClockConfig+0x1d0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f8f4 	bl	80005f0 <HAL_InitTick>

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000
 8001418:	40021000 	.word	0x40021000
 800141c:	08002930 	.word	0x08002930
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001428:	b490      	push	{r4, r7}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001430:	1d3c      	adds	r4, r7, #4
 8001432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001438:	4b28      	ldr	r3, [pc, #160]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b04      	cmp	r3, #4
 8001460:	d002      	beq.n	8001468 <HAL_RCC_GetSysClockFreq+0x40>
 8001462:	2b08      	cmp	r3, #8
 8001464:	d003      	beq.n	800146e <HAL_RCC_GetSysClockFreq+0x46>
 8001466:	e02d      	b.n	80014c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800146a:	623b      	str	r3, [r7, #32]
      break;
 800146c:	e02d      	b.n	80014ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	0c9b      	lsrs	r3, r3, #18
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800147a:	4413      	add	r3, r2
 800147c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001480:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d013      	beq.n	80014b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	0c5b      	lsrs	r3, r3, #17
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800149a:	4413      	add	r3, r2
 800149c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014a6:	fb02 f203 	mul.w	r2, r2, r3
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
 80014b2:	e004      	b.n	80014be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	623b      	str	r3, [r7, #32]
      break;
 80014c2:	e002      	b.n	80014ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014c6:	623b      	str	r3, [r7, #32]
      break;
 80014c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ca:	6a3b      	ldr	r3, [r7, #32]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc90      	pop	{r4, r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	0800291c 	.word	0x0800291c
 80014dc:	0800292c 	.word	0x0800292c
 80014e0:	40021000 	.word	0x40021000
 80014e4:	007a1200 	.word	0x007a1200
 80014e8:	003d0900 	.word	0x003d0900

080014ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014f0:	4b02      	ldr	r3, [pc, #8]	; (80014fc <HAL_RCC_GetHCLKFreq+0x10>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	20000000 	.word	0x20000000

08001500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001504:	f7ff fff2 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 8001508:	4601      	mov	r1, r0
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	4a03      	ldr	r2, [pc, #12]	; (8001524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001516:	5cd3      	ldrb	r3, [r2, r3]
 8001518:	fa21 f303 	lsr.w	r3, r1, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	08002940 	.word	0x08002940

08001528 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <RCC_Delay+0x34>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <RCC_Delay+0x38>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0a5b      	lsrs	r3, r3, #9
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001544:	bf00      	nop
  }
  while (Delay --);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1e5a      	subs	r2, r3, #1
 800154a:	60fa      	str	r2, [r7, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f9      	bne.n	8001544 <RCC_Delay+0x1c>
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000000 	.word	0x20000000
 8001560:	10624dd3 	.word	0x10624dd3

08001564 <findslot>:
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <findslot+0x2c>)
 8001566:	b510      	push	{r4, lr}
 8001568:	4604      	mov	r4, r0
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	b118      	cbz	r0, 8001576 <findslot+0x12>
 800156e:	6983      	ldr	r3, [r0, #24]
 8001570:	b90b      	cbnz	r3, 8001576 <findslot+0x12>
 8001572:	f000 fae3 	bl	8001b3c <__sinit>
 8001576:	2c13      	cmp	r4, #19
 8001578:	d807      	bhi.n	800158a <findslot+0x26>
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <findslot+0x30>)
 800157c:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001580:	3301      	adds	r3, #1
 8001582:	d002      	beq.n	800158a <findslot+0x26>
 8001584:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001588:	bd10      	pop	{r4, pc}
 800158a:	2000      	movs	r0, #0
 800158c:	e7fc      	b.n	8001588 <findslot+0x24>
 800158e:	bf00      	nop
 8001590:	20000014 	.word	0x20000014
 8001594:	200000a4 	.word	0x200000a4

08001598 <checkerror>:
 8001598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800159a:	1c43      	adds	r3, r0, #1
 800159c:	4605      	mov	r5, r0
 800159e:	d109      	bne.n	80015b4 <checkerror+0x1c>
 80015a0:	f000 fa86 	bl	8001ab0 <__errno>
 80015a4:	2413      	movs	r4, #19
 80015a6:	4606      	mov	r6, r0
 80015a8:	2700      	movs	r7, #0
 80015aa:	4620      	mov	r0, r4
 80015ac:	4639      	mov	r1, r7
 80015ae:	beab      	bkpt	0x00ab
 80015b0:	4604      	mov	r4, r0
 80015b2:	6034      	str	r4, [r6, #0]
 80015b4:	4628      	mov	r0, r5
 80015b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080015b8 <error>:
 80015b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ba:	4605      	mov	r5, r0
 80015bc:	f000 fa78 	bl	8001ab0 <__errno>
 80015c0:	2413      	movs	r4, #19
 80015c2:	4606      	mov	r6, r0
 80015c4:	2700      	movs	r7, #0
 80015c6:	4620      	mov	r0, r4
 80015c8:	4639      	mov	r1, r7
 80015ca:	beab      	bkpt	0x00ab
 80015cc:	4604      	mov	r4, r0
 80015ce:	6034      	str	r4, [r6, #0]
 80015d0:	4628      	mov	r0, r5
 80015d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080015d4 <_swiread>:
 80015d4:	b530      	push	{r4, r5, lr}
 80015d6:	b085      	sub	sp, #20
 80015d8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80015dc:	9203      	str	r2, [sp, #12]
 80015de:	2406      	movs	r4, #6
 80015e0:	ad01      	add	r5, sp, #4
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	beab      	bkpt	0x00ab
 80015e8:	4604      	mov	r4, r0
 80015ea:	4620      	mov	r0, r4
 80015ec:	f7ff ffd4 	bl	8001598 <checkerror>
 80015f0:	b005      	add	sp, #20
 80015f2:	bd30      	pop	{r4, r5, pc}

080015f4 <_read>:
 80015f4:	b570      	push	{r4, r5, r6, lr}
 80015f6:	460e      	mov	r6, r1
 80015f8:	4615      	mov	r5, r2
 80015fa:	f7ff ffb3 	bl	8001564 <findslot>
 80015fe:	4604      	mov	r4, r0
 8001600:	b930      	cbnz	r0, 8001610 <_read+0x1c>
 8001602:	f000 fa55 	bl	8001ab0 <__errno>
 8001606:	2309      	movs	r3, #9
 8001608:	6003      	str	r3, [r0, #0]
 800160a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800160e:	bd70      	pop	{r4, r5, r6, pc}
 8001610:	462a      	mov	r2, r5
 8001612:	4631      	mov	r1, r6
 8001614:	6800      	ldr	r0, [r0, #0]
 8001616:	f7ff ffdd 	bl	80015d4 <_swiread>
 800161a:	1c43      	adds	r3, r0, #1
 800161c:	bf1f      	itttt	ne
 800161e:	6863      	ldrne	r3, [r4, #4]
 8001620:	1a28      	subne	r0, r5, r0
 8001622:	181b      	addne	r3, r3, r0
 8001624:	6063      	strne	r3, [r4, #4]
 8001626:	e7f2      	b.n	800160e <_read+0x1a>

08001628 <_swilseek>:
 8001628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800162a:	460c      	mov	r4, r1
 800162c:	4616      	mov	r6, r2
 800162e:	f7ff ff99 	bl	8001564 <findslot>
 8001632:	4605      	mov	r5, r0
 8001634:	b940      	cbnz	r0, 8001648 <_swilseek+0x20>
 8001636:	f000 fa3b 	bl	8001ab0 <__errno>
 800163a:	2309      	movs	r3, #9
 800163c:	6003      	str	r3, [r0, #0]
 800163e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001642:	4620      	mov	r0, r4
 8001644:	b003      	add	sp, #12
 8001646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001648:	2e02      	cmp	r6, #2
 800164a:	d903      	bls.n	8001654 <_swilseek+0x2c>
 800164c:	f000 fa30 	bl	8001ab0 <__errno>
 8001650:	2316      	movs	r3, #22
 8001652:	e7f3      	b.n	800163c <_swilseek+0x14>
 8001654:	2e01      	cmp	r6, #1
 8001656:	d112      	bne.n	800167e <_swilseek+0x56>
 8001658:	6843      	ldr	r3, [r0, #4]
 800165a:	18e4      	adds	r4, r4, r3
 800165c:	d4f6      	bmi.n	800164c <_swilseek+0x24>
 800165e:	682b      	ldr	r3, [r5, #0]
 8001660:	260a      	movs	r6, #10
 8001662:	e9cd 3400 	strd	r3, r4, [sp]
 8001666:	466f      	mov	r7, sp
 8001668:	4630      	mov	r0, r6
 800166a:	4639      	mov	r1, r7
 800166c:	beab      	bkpt	0x00ab
 800166e:	4606      	mov	r6, r0
 8001670:	4630      	mov	r0, r6
 8001672:	f7ff ff91 	bl	8001598 <checkerror>
 8001676:	2800      	cmp	r0, #0
 8001678:	dbe1      	blt.n	800163e <_swilseek+0x16>
 800167a:	606c      	str	r4, [r5, #4]
 800167c:	e7e1      	b.n	8001642 <_swilseek+0x1a>
 800167e:	2e02      	cmp	r6, #2
 8001680:	d1ed      	bne.n	800165e <_swilseek+0x36>
 8001682:	6803      	ldr	r3, [r0, #0]
 8001684:	af02      	add	r7, sp, #8
 8001686:	f847 3d08 	str.w	r3, [r7, #-8]!
 800168a:	260c      	movs	r6, #12
 800168c:	4630      	mov	r0, r6
 800168e:	4639      	mov	r1, r7
 8001690:	beab      	bkpt	0x00ab
 8001692:	4606      	mov	r6, r0
 8001694:	4630      	mov	r0, r6
 8001696:	f7ff ff7f 	bl	8001598 <checkerror>
 800169a:	1c43      	adds	r3, r0, #1
 800169c:	d0cf      	beq.n	800163e <_swilseek+0x16>
 800169e:	4404      	add	r4, r0
 80016a0:	e7dd      	b.n	800165e <_swilseek+0x36>

080016a2 <_lseek>:
 80016a2:	f7ff bfc1 	b.w	8001628 <_swilseek>

080016a6 <_swiwrite>:
 80016a6:	b530      	push	{r4, r5, lr}
 80016a8:	b085      	sub	sp, #20
 80016aa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80016ae:	9203      	str	r2, [sp, #12]
 80016b0:	2405      	movs	r4, #5
 80016b2:	ad01      	add	r5, sp, #4
 80016b4:	4620      	mov	r0, r4
 80016b6:	4629      	mov	r1, r5
 80016b8:	beab      	bkpt	0x00ab
 80016ba:	4604      	mov	r4, r0
 80016bc:	4620      	mov	r0, r4
 80016be:	f7ff ff6b 	bl	8001598 <checkerror>
 80016c2:	b005      	add	sp, #20
 80016c4:	bd30      	pop	{r4, r5, pc}

080016c6 <_write>:
 80016c6:	b570      	push	{r4, r5, r6, lr}
 80016c8:	460e      	mov	r6, r1
 80016ca:	4615      	mov	r5, r2
 80016cc:	f7ff ff4a 	bl	8001564 <findslot>
 80016d0:	4604      	mov	r4, r0
 80016d2:	b930      	cbnz	r0, 80016e2 <_write+0x1c>
 80016d4:	f000 f9ec 	bl	8001ab0 <__errno>
 80016d8:	2309      	movs	r3, #9
 80016da:	6003      	str	r3, [r0, #0]
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016e0:	bd70      	pop	{r4, r5, r6, pc}
 80016e2:	462a      	mov	r2, r5
 80016e4:	4631      	mov	r1, r6
 80016e6:	6800      	ldr	r0, [r0, #0]
 80016e8:	f7ff ffdd 	bl	80016a6 <_swiwrite>
 80016ec:	1e02      	subs	r2, r0, #0
 80016ee:	dbf5      	blt.n	80016dc <_write+0x16>
 80016f0:	6863      	ldr	r3, [r4, #4]
 80016f2:	1aa8      	subs	r0, r5, r2
 80016f4:	4403      	add	r3, r0
 80016f6:	42aa      	cmp	r2, r5
 80016f8:	6063      	str	r3, [r4, #4]
 80016fa:	d1f1      	bne.n	80016e0 <_write+0x1a>
 80016fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff bf59 	b.w	80015b8 <error>

08001706 <_swiclose>:
 8001706:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001708:	ad02      	add	r5, sp, #8
 800170a:	f845 0d04 	str.w	r0, [r5, #-4]!
 800170e:	2402      	movs	r4, #2
 8001710:	4620      	mov	r0, r4
 8001712:	4629      	mov	r1, r5
 8001714:	beab      	bkpt	0x00ab
 8001716:	4604      	mov	r4, r0
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff ff3d 	bl	8001598 <checkerror>
 800171e:	b003      	add	sp, #12
 8001720:	bd30      	pop	{r4, r5, pc}
	...

08001724 <_close>:
 8001724:	b538      	push	{r3, r4, r5, lr}
 8001726:	4605      	mov	r5, r0
 8001728:	f7ff ff1c 	bl	8001564 <findslot>
 800172c:	4604      	mov	r4, r0
 800172e:	b930      	cbnz	r0, 800173e <_close+0x1a>
 8001730:	f000 f9be 	bl	8001ab0 <__errno>
 8001734:	2309      	movs	r3, #9
 8001736:	6003      	str	r3, [r0, #0]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800173c:	bd38      	pop	{r3, r4, r5, pc}
 800173e:	3d01      	subs	r5, #1
 8001740:	2d01      	cmp	r5, #1
 8001742:	d809      	bhi.n	8001758 <_close+0x34>
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <_close+0x48>)
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	429a      	cmp	r2, r3
 800174c:	d104      	bne.n	8001758 <_close+0x34>
 800174e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001752:	6003      	str	r3, [r0, #0]
 8001754:	2000      	movs	r0, #0
 8001756:	e7f1      	b.n	800173c <_close+0x18>
 8001758:	6820      	ldr	r0, [r4, #0]
 800175a:	f7ff ffd4 	bl	8001706 <_swiclose>
 800175e:	2800      	cmp	r0, #0
 8001760:	d1ec      	bne.n	800173c <_close+0x18>
 8001762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001766:	6023      	str	r3, [r4, #0]
 8001768:	e7e8      	b.n	800173c <_close+0x18>
 800176a:	bf00      	nop
 800176c:	200000a4 	.word	0x200000a4

08001770 <_swistat>:
 8001770:	b570      	push	{r4, r5, r6, lr}
 8001772:	460c      	mov	r4, r1
 8001774:	f7ff fef6 	bl	8001564 <findslot>
 8001778:	4606      	mov	r6, r0
 800177a:	b930      	cbnz	r0, 800178a <_swistat+0x1a>
 800177c:	f000 f998 	bl	8001ab0 <__errno>
 8001780:	2309      	movs	r3, #9
 8001782:	6003      	str	r3, [r0, #0]
 8001784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001788:	bd70      	pop	{r4, r5, r6, pc}
 800178a:	6863      	ldr	r3, [r4, #4]
 800178c:	250c      	movs	r5, #12
 800178e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001792:	6063      	str	r3, [r4, #4]
 8001794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001798:	6463      	str	r3, [r4, #68]	; 0x44
 800179a:	4628      	mov	r0, r5
 800179c:	4631      	mov	r1, r6
 800179e:	beab      	bkpt	0x00ab
 80017a0:	4605      	mov	r5, r0
 80017a2:	4628      	mov	r0, r5
 80017a4:	f7ff fef8 	bl	8001598 <checkerror>
 80017a8:	1c43      	adds	r3, r0, #1
 80017aa:	bf1c      	itt	ne
 80017ac:	6120      	strne	r0, [r4, #16]
 80017ae:	2000      	movne	r0, #0
 80017b0:	e7ea      	b.n	8001788 <_swistat+0x18>

080017b2 <_fstat>:
 80017b2:	460b      	mov	r3, r1
 80017b4:	b510      	push	{r4, lr}
 80017b6:	2100      	movs	r1, #0
 80017b8:	4604      	mov	r4, r0
 80017ba:	2258      	movs	r2, #88	; 0x58
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fa6b 	bl	8001c98 <memset>
 80017c2:	4601      	mov	r1, r0
 80017c4:	4620      	mov	r0, r4
 80017c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017ca:	f7ff bfd1 	b.w	8001770 <_swistat>

080017ce <_stat>:
 80017ce:	b538      	push	{r3, r4, r5, lr}
 80017d0:	460d      	mov	r5, r1
 80017d2:	4604      	mov	r4, r0
 80017d4:	2258      	movs	r2, #88	; 0x58
 80017d6:	2100      	movs	r1, #0
 80017d8:	4628      	mov	r0, r5
 80017da:	f000 fa5d 	bl	8001c98 <memset>
 80017de:	4620      	mov	r0, r4
 80017e0:	2100      	movs	r1, #0
 80017e2:	f000 f811 	bl	8001808 <_swiopen>
 80017e6:	1c43      	adds	r3, r0, #1
 80017e8:	4604      	mov	r4, r0
 80017ea:	d00b      	beq.n	8001804 <_stat+0x36>
 80017ec:	686b      	ldr	r3, [r5, #4]
 80017ee:	4629      	mov	r1, r5
 80017f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80017f4:	606b      	str	r3, [r5, #4]
 80017f6:	f7ff ffbb 	bl	8001770 <_swistat>
 80017fa:	4605      	mov	r5, r0
 80017fc:	4620      	mov	r0, r4
 80017fe:	f7ff ff91 	bl	8001724 <_close>
 8001802:	462c      	mov	r4, r5
 8001804:	4620      	mov	r0, r4
 8001806:	bd38      	pop	{r3, r4, r5, pc}

08001808 <_swiopen>:
 8001808:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <_swiopen+0xb0>)
 800180a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800180e:	4682      	mov	sl, r0
 8001810:	460e      	mov	r6, r1
 8001812:	2500      	movs	r5, #0
 8001814:	4698      	mov	r8, r3
 8001816:	b096      	sub	sp, #88	; 0x58
 8001818:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 800181c:	00ef      	lsls	r7, r5, #3
 800181e:	1c61      	adds	r1, r4, #1
 8001820:	d036      	beq.n	8001890 <_swiopen+0x88>
 8001822:	3501      	adds	r5, #1
 8001824:	2d14      	cmp	r5, #20
 8001826:	d1f7      	bne.n	8001818 <_swiopen+0x10>
 8001828:	f000 f942 	bl	8001ab0 <__errno>
 800182c:	2318      	movs	r3, #24
 800182e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001832:	6003      	str	r3, [r0, #0]
 8001834:	e03c      	b.n	80018b0 <_swiopen+0xa8>
 8001836:	f240 6301 	movw	r3, #1537	; 0x601
 800183a:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800183e:	07b2      	lsls	r2, r6, #30
 8001840:	bf48      	it	mi
 8001842:	f044 0402 	orrmi.w	r4, r4, #2
 8001846:	421e      	tst	r6, r3
 8001848:	bf18      	it	ne
 800184a:	f044 0404 	orrne.w	r4, r4, #4
 800184e:	0733      	lsls	r3, r6, #28
 8001850:	bf48      	it	mi
 8001852:	f024 0404 	bicmi.w	r4, r4, #4
 8001856:	4650      	mov	r0, sl
 8001858:	bf48      	it	mi
 800185a:	f044 0408 	orrmi.w	r4, r4, #8
 800185e:	f8cd a000 	str.w	sl, [sp]
 8001862:	f7fe fc73 	bl	800014c <strlen>
 8001866:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800186a:	2401      	movs	r4, #1
 800186c:	4620      	mov	r0, r4
 800186e:	4649      	mov	r1, r9
 8001870:	beab      	bkpt	0x00ab
 8001872:	4604      	mov	r4, r0
 8001874:	2c00      	cmp	r4, #0
 8001876:	db06      	blt.n	8001886 <_swiopen+0x7e>
 8001878:	2300      	movs	r3, #0
 800187a:	4447      	add	r7, r8
 800187c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	462c      	mov	r4, r5
 8001884:	e014      	b.n	80018b0 <_swiopen+0xa8>
 8001886:	4620      	mov	r0, r4
 8001888:	f7ff fe96 	bl	80015b8 <error>
 800188c:	4604      	mov	r4, r0
 800188e:	e00f      	b.n	80018b0 <_swiopen+0xa8>
 8001890:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001894:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001898:	46e9      	mov	r9, sp
 800189a:	d1cc      	bne.n	8001836 <_swiopen+0x2e>
 800189c:	4649      	mov	r1, r9
 800189e:	4650      	mov	r0, sl
 80018a0:	f7ff ff95 	bl	80017ce <_stat>
 80018a4:	3001      	adds	r0, #1
 80018a6:	d0c6      	beq.n	8001836 <_swiopen+0x2e>
 80018a8:	f000 f902 	bl	8001ab0 <__errno>
 80018ac:	2311      	movs	r3, #17
 80018ae:	6003      	str	r3, [r0, #0]
 80018b0:	4620      	mov	r0, r4
 80018b2:	b016      	add	sp, #88	; 0x58
 80018b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018b8:	200000a4 	.word	0x200000a4

080018bc <_get_semihosting_exts>:
 80018bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80018c0:	4607      	mov	r7, r0
 80018c2:	4688      	mov	r8, r1
 80018c4:	4829      	ldr	r0, [pc, #164]	; (800196c <_get_semihosting_exts+0xb0>)
 80018c6:	2100      	movs	r1, #0
 80018c8:	4615      	mov	r5, r2
 80018ca:	f7ff ff9d 	bl	8001808 <_swiopen>
 80018ce:	4604      	mov	r4, r0
 80018d0:	462a      	mov	r2, r5
 80018d2:	2100      	movs	r1, #0
 80018d4:	4638      	mov	r0, r7
 80018d6:	f000 f9df 	bl	8001c98 <memset>
 80018da:	1c63      	adds	r3, r4, #1
 80018dc:	d015      	beq.n	800190a <_get_semihosting_exts+0x4e>
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff fe40 	bl	8001564 <findslot>
 80018e4:	260c      	movs	r6, #12
 80018e6:	4681      	mov	r9, r0
 80018e8:	4630      	mov	r0, r6
 80018ea:	4649      	mov	r1, r9
 80018ec:	beab      	bkpt	0x00ab
 80018ee:	4606      	mov	r6, r0
 80018f0:	4630      	mov	r0, r6
 80018f2:	f7ff fe51 	bl	8001598 <checkerror>
 80018f6:	2803      	cmp	r0, #3
 80018f8:	dd02      	ble.n	8001900 <_get_semihosting_exts+0x44>
 80018fa:	3803      	subs	r0, #3
 80018fc:	42a8      	cmp	r0, r5
 80018fe:	dc08      	bgt.n	8001912 <_get_semihosting_exts+0x56>
 8001900:	4620      	mov	r0, r4
 8001902:	f7ff ff0f 	bl	8001724 <_close>
 8001906:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800190a:	4620      	mov	r0, r4
 800190c:	b003      	add	sp, #12
 800190e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001912:	2204      	movs	r2, #4
 8001914:	4620      	mov	r0, r4
 8001916:	eb0d 0102 	add.w	r1, sp, r2
 800191a:	f7ff fe6b 	bl	80015f4 <_read>
 800191e:	2803      	cmp	r0, #3
 8001920:	ddee      	ble.n	8001900 <_get_semihosting_exts+0x44>
 8001922:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001926:	2b53      	cmp	r3, #83	; 0x53
 8001928:	d1ea      	bne.n	8001900 <_get_semihosting_exts+0x44>
 800192a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800192e:	2b48      	cmp	r3, #72	; 0x48
 8001930:	d1e6      	bne.n	8001900 <_get_semihosting_exts+0x44>
 8001932:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001936:	2b46      	cmp	r3, #70	; 0x46
 8001938:	d1e2      	bne.n	8001900 <_get_semihosting_exts+0x44>
 800193a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800193e:	2b42      	cmp	r3, #66	; 0x42
 8001940:	d1de      	bne.n	8001900 <_get_semihosting_exts+0x44>
 8001942:	2201      	movs	r2, #1
 8001944:	4641      	mov	r1, r8
 8001946:	4620      	mov	r0, r4
 8001948:	f7ff fe6e 	bl	8001628 <_swilseek>
 800194c:	2800      	cmp	r0, #0
 800194e:	dbd7      	blt.n	8001900 <_get_semihosting_exts+0x44>
 8001950:	462a      	mov	r2, r5
 8001952:	4639      	mov	r1, r7
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff fe4d 	bl	80015f4 <_read>
 800195a:	4605      	mov	r5, r0
 800195c:	4620      	mov	r0, r4
 800195e:	f7ff fee1 	bl	8001724 <_close>
 8001962:	4628      	mov	r0, r5
 8001964:	f7ff fe18 	bl	8001598 <checkerror>
 8001968:	4604      	mov	r4, r0
 800196a:	e7ce      	b.n	800190a <_get_semihosting_exts+0x4e>
 800196c:	08002948 	.word	0x08002948

08001970 <initialise_semihosting_exts>:
 8001970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001972:	2100      	movs	r1, #0
 8001974:	2201      	movs	r2, #1
 8001976:	4d09      	ldr	r5, [pc, #36]	; (800199c <initialise_semihosting_exts+0x2c>)
 8001978:	4c09      	ldr	r4, [pc, #36]	; (80019a0 <initialise_semihosting_exts+0x30>)
 800197a:	a801      	add	r0, sp, #4
 800197c:	6029      	str	r1, [r5, #0]
 800197e:	6022      	str	r2, [r4, #0]
 8001980:	f7ff ff9c 	bl	80018bc <_get_semihosting_exts>
 8001984:	2800      	cmp	r0, #0
 8001986:	dd07      	ble.n	8001998 <initialise_semihosting_exts+0x28>
 8001988:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800198c:	f003 0201 	and.w	r2, r3, #1
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	602a      	str	r2, [r5, #0]
 8001996:	6023      	str	r3, [r4, #0]
 8001998:	b003      	add	sp, #12
 800199a:	bd30      	pop	{r4, r5, pc}
 800199c:	2000000c 	.word	0x2000000c
 80019a0:	20000010 	.word	0x20000010

080019a4 <_has_ext_stdout_stderr>:
 80019a4:	b510      	push	{r4, lr}
 80019a6:	4c04      	ldr	r4, [pc, #16]	; (80019b8 <_has_ext_stdout_stderr+0x14>)
 80019a8:	6822      	ldr	r2, [r4, #0]
 80019aa:	2a00      	cmp	r2, #0
 80019ac:	da01      	bge.n	80019b2 <_has_ext_stdout_stderr+0xe>
 80019ae:	f7ff ffdf 	bl	8001970 <initialise_semihosting_exts>
 80019b2:	6820      	ldr	r0, [r4, #0]
 80019b4:	bd10      	pop	{r4, pc}
 80019b6:	bf00      	nop
 80019b8:	20000010 	.word	0x20000010

080019bc <initialise_monitor_handles>:
 80019bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019c0:	2303      	movs	r3, #3
 80019c2:	2400      	movs	r4, #0
 80019c4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8001a74 <initialise_monitor_handles+0xb8>
 80019c8:	b085      	sub	sp, #20
 80019ca:	f8cd 9004 	str.w	r9, [sp, #4]
 80019ce:	f10d 0804 	add.w	r8, sp, #4
 80019d2:	9303      	str	r3, [sp, #12]
 80019d4:	2501      	movs	r5, #1
 80019d6:	9402      	str	r4, [sp, #8]
 80019d8:	4628      	mov	r0, r5
 80019da:	4641      	mov	r1, r8
 80019dc:	beab      	bkpt	0x00ab
 80019de:	4605      	mov	r5, r0
 80019e0:	4a20      	ldr	r2, [pc, #128]	; (8001a64 <initialise_monitor_handles+0xa8>)
 80019e2:	4623      	mov	r3, r4
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019e8:	4614      	mov	r4, r2
 80019ea:	4e1f      	ldr	r6, [pc, #124]	; (8001a68 <initialise_monitor_handles+0xac>)
 80019ec:	6035      	str	r5, [r6, #0]
 80019ee:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80019f2:	3301      	adds	r3, #1
 80019f4:	2b14      	cmp	r3, #20
 80019f6:	d1fa      	bne.n	80019ee <initialise_monitor_handles+0x32>
 80019f8:	f7ff ffd4 	bl	80019a4 <_has_ext_stdout_stderr>
 80019fc:	4d1b      	ldr	r5, [pc, #108]	; (8001a6c <initialise_monitor_handles+0xb0>)
 80019fe:	b1d0      	cbz	r0, 8001a36 <initialise_monitor_handles+0x7a>
 8001a00:	f04f 0a03 	mov.w	sl, #3
 8001a04:	2304      	movs	r3, #4
 8001a06:	f8cd 9004 	str.w	r9, [sp, #4]
 8001a0a:	2701      	movs	r7, #1
 8001a0c:	f8cd a00c 	str.w	sl, [sp, #12]
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	4638      	mov	r0, r7
 8001a14:	4641      	mov	r1, r8
 8001a16:	beab      	bkpt	0x00ab
 8001a18:	4683      	mov	fp, r0
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <initialise_monitor_handles+0xb4>)
 8001a1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8001a20:	f8c3 b000 	str.w	fp, [r3]
 8001a24:	2308      	movs	r3, #8
 8001a26:	f8cd a00c 	str.w	sl, [sp, #12]
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	4638      	mov	r0, r7
 8001a2e:	4641      	mov	r1, r8
 8001a30:	beab      	bkpt	0x00ab
 8001a32:	4607      	mov	r7, r0
 8001a34:	602f      	str	r7, [r5, #0]
 8001a36:	682b      	ldr	r3, [r5, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	bf02      	ittt	eq
 8001a3c:	4b0c      	ldreq	r3, [pc, #48]	; (8001a70 <initialise_monitor_handles+0xb4>)
 8001a3e:	681b      	ldreq	r3, [r3, #0]
 8001a40:	602b      	streq	r3, [r5, #0]
 8001a42:	6833      	ldr	r3, [r6, #0]
 8001a44:	2600      	movs	r6, #0
 8001a46:	6023      	str	r3, [r4, #0]
 8001a48:	6066      	str	r6, [r4, #4]
 8001a4a:	f7ff ffab 	bl	80019a4 <_has_ext_stdout_stderr>
 8001a4e:	b130      	cbz	r0, 8001a5e <initialise_monitor_handles+0xa2>
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <initialise_monitor_handles+0xb4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001a58:	682b      	ldr	r3, [r5, #0]
 8001a5a:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001a5e:	b005      	add	sp, #20
 8001a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a64:	200000a4 	.word	0x200000a4
 8001a68:	2000009c 	.word	0x2000009c
 8001a6c:	20000098 	.word	0x20000098
 8001a70:	200000a0 	.word	0x200000a0
 8001a74:	0800295e 	.word	0x0800295e

08001a78 <_isatty>:
 8001a78:	b570      	push	{r4, r5, r6, lr}
 8001a7a:	f7ff fd73 	bl	8001564 <findslot>
 8001a7e:	2509      	movs	r5, #9
 8001a80:	4604      	mov	r4, r0
 8001a82:	b920      	cbnz	r0, 8001a8e <_isatty+0x16>
 8001a84:	f000 f814 	bl	8001ab0 <__errno>
 8001a88:	6005      	str	r5, [r0, #0]
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	bd70      	pop	{r4, r5, r6, pc}
 8001a8e:	4628      	mov	r0, r5
 8001a90:	4621      	mov	r1, r4
 8001a92:	beab      	bkpt	0x00ab
 8001a94:	4604      	mov	r4, r0
 8001a96:	2c01      	cmp	r4, #1
 8001a98:	d0f7      	beq.n	8001a8a <_isatty+0x12>
 8001a9a:	f000 f809 	bl	8001ab0 <__errno>
 8001a9e:	2400      	movs	r4, #0
 8001aa0:	4606      	mov	r6, r0
 8001aa2:	2513      	movs	r5, #19
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	beab      	bkpt	0x00ab
 8001aaa:	4605      	mov	r5, r0
 8001aac:	6035      	str	r5, [r6, #0]
 8001aae:	e7ec      	b.n	8001a8a <_isatty+0x12>

08001ab0 <__errno>:
 8001ab0:	4b01      	ldr	r3, [pc, #4]	; (8001ab8 <__errno+0x8>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000014 	.word	0x20000014

08001abc <std>:
 8001abc:	2300      	movs	r3, #0
 8001abe:	b510      	push	{r4, lr}
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	e9c0 3300 	strd	r3, r3, [r0]
 8001ac6:	6083      	str	r3, [r0, #8]
 8001ac8:	8181      	strh	r1, [r0, #12]
 8001aca:	6643      	str	r3, [r0, #100]	; 0x64
 8001acc:	81c2      	strh	r2, [r0, #14]
 8001ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ad2:	6183      	str	r3, [r0, #24]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	2208      	movs	r2, #8
 8001ad8:	305c      	adds	r0, #92	; 0x5c
 8001ada:	f000 f8dd 	bl	8001c98 <memset>
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <std+0x38>)
 8001ae0:	6224      	str	r4, [r4, #32]
 8001ae2:	6263      	str	r3, [r4, #36]	; 0x24
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <std+0x3c>)
 8001ae6:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <std+0x40>)
 8001aea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <std+0x44>)
 8001aee:	6323      	str	r3, [r4, #48]	; 0x30
 8001af0:	bd10      	pop	{r4, pc}
 8001af2:	bf00      	nop
 8001af4:	08001dad 	.word	0x08001dad
 8001af8:	08001dcf 	.word	0x08001dcf
 8001afc:	08001e07 	.word	0x08001e07
 8001b00:	08001e2b 	.word	0x08001e2b

08001b04 <_cleanup_r>:
 8001b04:	4901      	ldr	r1, [pc, #4]	; (8001b0c <_cleanup_r+0x8>)
 8001b06:	f000 b885 	b.w	8001c14 <_fwalk_reent>
 8001b0a:	bf00      	nop
 8001b0c:	08001f85 	.word	0x08001f85

08001b10 <__sfmoreglue>:
 8001b10:	b570      	push	{r4, r5, r6, lr}
 8001b12:	2568      	movs	r5, #104	; 0x68
 8001b14:	1e4a      	subs	r2, r1, #1
 8001b16:	4355      	muls	r5, r2
 8001b18:	460e      	mov	r6, r1
 8001b1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b1e:	f000 f8c3 	bl	8001ca8 <_malloc_r>
 8001b22:	4604      	mov	r4, r0
 8001b24:	b140      	cbz	r0, 8001b38 <__sfmoreglue+0x28>
 8001b26:	2100      	movs	r1, #0
 8001b28:	e9c0 1600 	strd	r1, r6, [r0]
 8001b2c:	300c      	adds	r0, #12
 8001b2e:	60a0      	str	r0, [r4, #8]
 8001b30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001b34:	f000 f8b0 	bl	8001c98 <memset>
 8001b38:	4620      	mov	r0, r4
 8001b3a:	bd70      	pop	{r4, r5, r6, pc}

08001b3c <__sinit>:
 8001b3c:	6983      	ldr	r3, [r0, #24]
 8001b3e:	b510      	push	{r4, lr}
 8001b40:	4604      	mov	r4, r0
 8001b42:	bb33      	cbnz	r3, 8001b92 <__sinit+0x56>
 8001b44:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001b48:	6503      	str	r3, [r0, #80]	; 0x50
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <__sinit+0x58>)
 8001b4c:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <__sinit+0x5c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6282      	str	r2, [r0, #40]	; 0x28
 8001b52:	4298      	cmp	r0, r3
 8001b54:	bf04      	itt	eq
 8001b56:	2301      	moveq	r3, #1
 8001b58:	6183      	streq	r3, [r0, #24]
 8001b5a:	f000 f81f 	bl	8001b9c <__sfp>
 8001b5e:	6060      	str	r0, [r4, #4]
 8001b60:	4620      	mov	r0, r4
 8001b62:	f000 f81b 	bl	8001b9c <__sfp>
 8001b66:	60a0      	str	r0, [r4, #8]
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f000 f817 	bl	8001b9c <__sfp>
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60e0      	str	r0, [r4, #12]
 8001b72:	2104      	movs	r1, #4
 8001b74:	6860      	ldr	r0, [r4, #4]
 8001b76:	f7ff ffa1 	bl	8001abc <std>
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2109      	movs	r1, #9
 8001b7e:	68a0      	ldr	r0, [r4, #8]
 8001b80:	f7ff ff9c 	bl	8001abc <std>
 8001b84:	2202      	movs	r2, #2
 8001b86:	2112      	movs	r1, #18
 8001b88:	68e0      	ldr	r0, [r4, #12]
 8001b8a:	f7ff ff97 	bl	8001abc <std>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61a3      	str	r3, [r4, #24]
 8001b92:	bd10      	pop	{r4, pc}
 8001b94:	080029c4 	.word	0x080029c4
 8001b98:	08001b05 	.word	0x08001b05

08001b9c <__sfp>:
 8001b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <__sfp+0x70>)
 8001ba0:	4607      	mov	r7, r0
 8001ba2:	681e      	ldr	r6, [r3, #0]
 8001ba4:	69b3      	ldr	r3, [r6, #24]
 8001ba6:	b913      	cbnz	r3, 8001bae <__sfp+0x12>
 8001ba8:	4630      	mov	r0, r6
 8001baa:	f7ff ffc7 	bl	8001b3c <__sinit>
 8001bae:	3648      	adds	r6, #72	; 0x48
 8001bb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	d503      	bpl.n	8001bc0 <__sfp+0x24>
 8001bb8:	6833      	ldr	r3, [r6, #0]
 8001bba:	b133      	cbz	r3, 8001bca <__sfp+0x2e>
 8001bbc:	6836      	ldr	r6, [r6, #0]
 8001bbe:	e7f7      	b.n	8001bb0 <__sfp+0x14>
 8001bc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001bc4:	b16d      	cbz	r5, 8001be2 <__sfp+0x46>
 8001bc6:	3468      	adds	r4, #104	; 0x68
 8001bc8:	e7f4      	b.n	8001bb4 <__sfp+0x18>
 8001bca:	2104      	movs	r1, #4
 8001bcc:	4638      	mov	r0, r7
 8001bce:	f7ff ff9f 	bl	8001b10 <__sfmoreglue>
 8001bd2:	6030      	str	r0, [r6, #0]
 8001bd4:	2800      	cmp	r0, #0
 8001bd6:	d1f1      	bne.n	8001bbc <__sfp+0x20>
 8001bd8:	230c      	movs	r3, #12
 8001bda:	4604      	mov	r4, r0
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	4620      	mov	r0, r4
 8001be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <__sfp+0x74>)
 8001be4:	6665      	str	r5, [r4, #100]	; 0x64
 8001be6:	e9c4 5500 	strd	r5, r5, [r4]
 8001bea:	60a5      	str	r5, [r4, #8]
 8001bec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001bf0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001bfc:	f000 f84c 	bl	8001c98 <memset>
 8001c00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001c04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001c08:	e7e9      	b.n	8001bde <__sfp+0x42>
 8001c0a:	bf00      	nop
 8001c0c:	080029c4 	.word	0x080029c4
 8001c10:	ffff0001 	.word	0xffff0001

08001c14 <_fwalk_reent>:
 8001c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c18:	4680      	mov	r8, r0
 8001c1a:	4689      	mov	r9, r1
 8001c1c:	2600      	movs	r6, #0
 8001c1e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c22:	b914      	cbnz	r4, 8001c2a <_fwalk_reent+0x16>
 8001c24:	4630      	mov	r0, r6
 8001c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c2a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001c2e:	3f01      	subs	r7, #1
 8001c30:	d501      	bpl.n	8001c36 <_fwalk_reent+0x22>
 8001c32:	6824      	ldr	r4, [r4, #0]
 8001c34:	e7f5      	b.n	8001c22 <_fwalk_reent+0xe>
 8001c36:	89ab      	ldrh	r3, [r5, #12]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d907      	bls.n	8001c4c <_fwalk_reent+0x38>
 8001c3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c40:	3301      	adds	r3, #1
 8001c42:	d003      	beq.n	8001c4c <_fwalk_reent+0x38>
 8001c44:	4629      	mov	r1, r5
 8001c46:	4640      	mov	r0, r8
 8001c48:	47c8      	blx	r9
 8001c4a:	4306      	orrs	r6, r0
 8001c4c:	3568      	adds	r5, #104	; 0x68
 8001c4e:	e7ee      	b.n	8001c2e <_fwalk_reent+0x1a>

08001c50 <__libc_init_array>:
 8001c50:	b570      	push	{r4, r5, r6, lr}
 8001c52:	2500      	movs	r5, #0
 8001c54:	4e0c      	ldr	r6, [pc, #48]	; (8001c88 <__libc_init_array+0x38>)
 8001c56:	4c0d      	ldr	r4, [pc, #52]	; (8001c8c <__libc_init_array+0x3c>)
 8001c58:	1ba4      	subs	r4, r4, r6
 8001c5a:	10a4      	asrs	r4, r4, #2
 8001c5c:	42a5      	cmp	r5, r4
 8001c5e:	d109      	bne.n	8001c74 <__libc_init_array+0x24>
 8001c60:	f000 fe46 	bl	80028f0 <_init>
 8001c64:	2500      	movs	r5, #0
 8001c66:	4e0a      	ldr	r6, [pc, #40]	; (8001c90 <__libc_init_array+0x40>)
 8001c68:	4c0a      	ldr	r4, [pc, #40]	; (8001c94 <__libc_init_array+0x44>)
 8001c6a:	1ba4      	subs	r4, r4, r6
 8001c6c:	10a4      	asrs	r4, r4, #2
 8001c6e:	42a5      	cmp	r5, r4
 8001c70:	d105      	bne.n	8001c7e <__libc_init_array+0x2e>
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
 8001c74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c78:	4798      	blx	r3
 8001c7a:	3501      	adds	r5, #1
 8001c7c:	e7ee      	b.n	8001c5c <__libc_init_array+0xc>
 8001c7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c82:	4798      	blx	r3
 8001c84:	3501      	adds	r5, #1
 8001c86:	e7f2      	b.n	8001c6e <__libc_init_array+0x1e>
 8001c88:	080029fc 	.word	0x080029fc
 8001c8c:	080029fc 	.word	0x080029fc
 8001c90:	080029fc 	.word	0x080029fc
 8001c94:	08002a00 	.word	0x08002a00

08001c98 <memset>:
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4402      	add	r2, r0
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d100      	bne.n	8001ca2 <memset+0xa>
 8001ca0:	4770      	bx	lr
 8001ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ca6:	e7f9      	b.n	8001c9c <memset+0x4>

08001ca8 <_malloc_r>:
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	1ccd      	adds	r5, r1, #3
 8001cac:	f025 0503 	bic.w	r5, r5, #3
 8001cb0:	3508      	adds	r5, #8
 8001cb2:	2d0c      	cmp	r5, #12
 8001cb4:	bf38      	it	cc
 8001cb6:	250c      	movcc	r5, #12
 8001cb8:	2d00      	cmp	r5, #0
 8001cba:	4606      	mov	r6, r0
 8001cbc:	db01      	blt.n	8001cc2 <_malloc_r+0x1a>
 8001cbe:	42a9      	cmp	r1, r5
 8001cc0:	d903      	bls.n	8001cca <_malloc_r+0x22>
 8001cc2:	230c      	movs	r3, #12
 8001cc4:	6033      	str	r3, [r6, #0]
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	bd70      	pop	{r4, r5, r6, pc}
 8001cca:	f000 f997 	bl	8001ffc <__malloc_lock>
 8001cce:	4a21      	ldr	r2, [pc, #132]	; (8001d54 <_malloc_r+0xac>)
 8001cd0:	6814      	ldr	r4, [r2, #0]
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	b991      	cbnz	r1, 8001cfc <_malloc_r+0x54>
 8001cd6:	4c20      	ldr	r4, [pc, #128]	; (8001d58 <_malloc_r+0xb0>)
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	b91b      	cbnz	r3, 8001ce4 <_malloc_r+0x3c>
 8001cdc:	4630      	mov	r0, r6
 8001cde:	f000 f855 	bl	8001d8c <_sbrk_r>
 8001ce2:	6020      	str	r0, [r4, #0]
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	4630      	mov	r0, r6
 8001ce8:	f000 f850 	bl	8001d8c <_sbrk_r>
 8001cec:	1c43      	adds	r3, r0, #1
 8001cee:	d124      	bne.n	8001d3a <_malloc_r+0x92>
 8001cf0:	230c      	movs	r3, #12
 8001cf2:	4630      	mov	r0, r6
 8001cf4:	6033      	str	r3, [r6, #0]
 8001cf6:	f000 f982 	bl	8001ffe <__malloc_unlock>
 8001cfa:	e7e4      	b.n	8001cc6 <_malloc_r+0x1e>
 8001cfc:	680b      	ldr	r3, [r1, #0]
 8001cfe:	1b5b      	subs	r3, r3, r5
 8001d00:	d418      	bmi.n	8001d34 <_malloc_r+0x8c>
 8001d02:	2b0b      	cmp	r3, #11
 8001d04:	d90f      	bls.n	8001d26 <_malloc_r+0x7e>
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	18cc      	adds	r4, r1, r3
 8001d0a:	50cd      	str	r5, [r1, r3]
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	f000 f976 	bl	8001ffe <__malloc_unlock>
 8001d12:	f104 000b 	add.w	r0, r4, #11
 8001d16:	1d23      	adds	r3, r4, #4
 8001d18:	f020 0007 	bic.w	r0, r0, #7
 8001d1c:	1ac3      	subs	r3, r0, r3
 8001d1e:	d0d3      	beq.n	8001cc8 <_malloc_r+0x20>
 8001d20:	425a      	negs	r2, r3
 8001d22:	50e2      	str	r2, [r4, r3]
 8001d24:	e7d0      	b.n	8001cc8 <_malloc_r+0x20>
 8001d26:	684b      	ldr	r3, [r1, #4]
 8001d28:	428c      	cmp	r4, r1
 8001d2a:	bf16      	itet	ne
 8001d2c:	6063      	strne	r3, [r4, #4]
 8001d2e:	6013      	streq	r3, [r2, #0]
 8001d30:	460c      	movne	r4, r1
 8001d32:	e7eb      	b.n	8001d0c <_malloc_r+0x64>
 8001d34:	460c      	mov	r4, r1
 8001d36:	6849      	ldr	r1, [r1, #4]
 8001d38:	e7cc      	b.n	8001cd4 <_malloc_r+0x2c>
 8001d3a:	1cc4      	adds	r4, r0, #3
 8001d3c:	f024 0403 	bic.w	r4, r4, #3
 8001d40:	42a0      	cmp	r0, r4
 8001d42:	d005      	beq.n	8001d50 <_malloc_r+0xa8>
 8001d44:	1a21      	subs	r1, r4, r0
 8001d46:	4630      	mov	r0, r6
 8001d48:	f000 f820 	bl	8001d8c <_sbrk_r>
 8001d4c:	3001      	adds	r0, #1
 8001d4e:	d0cf      	beq.n	8001cf0 <_malloc_r+0x48>
 8001d50:	6025      	str	r5, [r4, #0]
 8001d52:	e7db      	b.n	8001d0c <_malloc_r+0x64>
 8001d54:	20000144 	.word	0x20000144
 8001d58:	20000148 	.word	0x20000148

08001d5c <iprintf>:
 8001d5c:	b40f      	push	{r0, r1, r2, r3}
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <iprintf+0x2c>)
 8001d60:	b513      	push	{r0, r1, r4, lr}
 8001d62:	681c      	ldr	r4, [r3, #0]
 8001d64:	b124      	cbz	r4, 8001d70 <iprintf+0x14>
 8001d66:	69a3      	ldr	r3, [r4, #24]
 8001d68:	b913      	cbnz	r3, 8001d70 <iprintf+0x14>
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7ff fee6 	bl	8001b3c <__sinit>
 8001d70:	ab05      	add	r3, sp, #20
 8001d72:	9a04      	ldr	r2, [sp, #16]
 8001d74:	68a1      	ldr	r1, [r4, #8]
 8001d76:	4620      	mov	r0, r4
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	f000 f9b5 	bl	80020e8 <_vfiprintf_r>
 8001d7e:	b002      	add	sp, #8
 8001d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d84:	b004      	add	sp, #16
 8001d86:	4770      	bx	lr
 8001d88:	20000014 	.word	0x20000014

08001d8c <_sbrk_r>:
 8001d8c:	b538      	push	{r3, r4, r5, lr}
 8001d8e:	2300      	movs	r3, #0
 8001d90:	4c05      	ldr	r4, [pc, #20]	; (8001da8 <_sbrk_r+0x1c>)
 8001d92:	4605      	mov	r5, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	6023      	str	r3, [r4, #0]
 8001d98:	f7fe fb8e 	bl	80004b8 <_sbrk>
 8001d9c:	1c43      	adds	r3, r0, #1
 8001d9e:	d102      	bne.n	8001da6 <_sbrk_r+0x1a>
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	b103      	cbz	r3, 8001da6 <_sbrk_r+0x1a>
 8001da4:	602b      	str	r3, [r5, #0]
 8001da6:	bd38      	pop	{r3, r4, r5, pc}
 8001da8:	200001f8 	.word	0x200001f8

08001dac <__sread>:
 8001dac:	b510      	push	{r4, lr}
 8001dae:	460c      	mov	r4, r1
 8001db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001db4:	f000 fc36 	bl	8002624 <_read_r>
 8001db8:	2800      	cmp	r0, #0
 8001dba:	bfab      	itete	ge
 8001dbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8001dc0:	181b      	addge	r3, r3, r0
 8001dc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001dc6:	bfac      	ite	ge
 8001dc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001dca:	81a3      	strhlt	r3, [r4, #12]
 8001dcc:	bd10      	pop	{r4, pc}

08001dce <__swrite>:
 8001dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dd2:	461f      	mov	r7, r3
 8001dd4:	898b      	ldrh	r3, [r1, #12]
 8001dd6:	4605      	mov	r5, r0
 8001dd8:	05db      	lsls	r3, r3, #23
 8001dda:	460c      	mov	r4, r1
 8001ddc:	4616      	mov	r6, r2
 8001dde:	d505      	bpl.n	8001dec <__swrite+0x1e>
 8001de0:	2302      	movs	r3, #2
 8001de2:	2200      	movs	r2, #0
 8001de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001de8:	f000 f8f6 	bl	8001fd8 <_lseek_r>
 8001dec:	89a3      	ldrh	r3, [r4, #12]
 8001dee:	4632      	mov	r2, r6
 8001df0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001df4:	81a3      	strh	r3, [r4, #12]
 8001df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	4628      	mov	r0, r5
 8001dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e02:	f000 b817 	b.w	8001e34 <_write_r>

08001e06 <__sseek>:
 8001e06:	b510      	push	{r4, lr}
 8001e08:	460c      	mov	r4, r1
 8001e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e0e:	f000 f8e3 	bl	8001fd8 <_lseek_r>
 8001e12:	1c43      	adds	r3, r0, #1
 8001e14:	89a3      	ldrh	r3, [r4, #12]
 8001e16:	bf15      	itete	ne
 8001e18:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e22:	81a3      	strheq	r3, [r4, #12]
 8001e24:	bf18      	it	ne
 8001e26:	81a3      	strhne	r3, [r4, #12]
 8001e28:	bd10      	pop	{r4, pc}

08001e2a <__sclose>:
 8001e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e2e:	f000 b813 	b.w	8001e58 <_close_r>
	...

08001e34 <_write_r>:
 8001e34:	b538      	push	{r3, r4, r5, lr}
 8001e36:	4605      	mov	r5, r0
 8001e38:	4608      	mov	r0, r1
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4c05      	ldr	r4, [pc, #20]	; (8001e54 <_write_r+0x20>)
 8001e40:	6022      	str	r2, [r4, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	f7ff fc3f 	bl	80016c6 <_write>
 8001e48:	1c43      	adds	r3, r0, #1
 8001e4a:	d102      	bne.n	8001e52 <_write_r+0x1e>
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	b103      	cbz	r3, 8001e52 <_write_r+0x1e>
 8001e50:	602b      	str	r3, [r5, #0]
 8001e52:	bd38      	pop	{r3, r4, r5, pc}
 8001e54:	200001f8 	.word	0x200001f8

08001e58 <_close_r>:
 8001e58:	b538      	push	{r3, r4, r5, lr}
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	4c05      	ldr	r4, [pc, #20]	; (8001e74 <_close_r+0x1c>)
 8001e5e:	4605      	mov	r5, r0
 8001e60:	4608      	mov	r0, r1
 8001e62:	6023      	str	r3, [r4, #0]
 8001e64:	f7ff fc5e 	bl	8001724 <_close>
 8001e68:	1c43      	adds	r3, r0, #1
 8001e6a:	d102      	bne.n	8001e72 <_close_r+0x1a>
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	b103      	cbz	r3, 8001e72 <_close_r+0x1a>
 8001e70:	602b      	str	r3, [r5, #0]
 8001e72:	bd38      	pop	{r3, r4, r5, pc}
 8001e74:	200001f8 	.word	0x200001f8

08001e78 <__sflush_r>:
 8001e78:	898a      	ldrh	r2, [r1, #12]
 8001e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e7e:	4605      	mov	r5, r0
 8001e80:	0710      	lsls	r0, r2, #28
 8001e82:	460c      	mov	r4, r1
 8001e84:	d458      	bmi.n	8001f38 <__sflush_r+0xc0>
 8001e86:	684b      	ldr	r3, [r1, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	dc05      	bgt.n	8001e98 <__sflush_r+0x20>
 8001e8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	dc02      	bgt.n	8001e98 <__sflush_r+0x20>
 8001e92:	2000      	movs	r0, #0
 8001e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e9a:	2e00      	cmp	r6, #0
 8001e9c:	d0f9      	beq.n	8001e92 <__sflush_r+0x1a>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ea4:	682f      	ldr	r7, [r5, #0]
 8001ea6:	6a21      	ldr	r1, [r4, #32]
 8001ea8:	602b      	str	r3, [r5, #0]
 8001eaa:	d032      	beq.n	8001f12 <__sflush_r+0x9a>
 8001eac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001eae:	89a3      	ldrh	r3, [r4, #12]
 8001eb0:	075a      	lsls	r2, r3, #29
 8001eb2:	d505      	bpl.n	8001ec0 <__sflush_r+0x48>
 8001eb4:	6863      	ldr	r3, [r4, #4]
 8001eb6:	1ac0      	subs	r0, r0, r3
 8001eb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001eba:	b10b      	cbz	r3, 8001ec0 <__sflush_r+0x48>
 8001ebc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ebe:	1ac0      	subs	r0, r0, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ec6:	6a21      	ldr	r1, [r4, #32]
 8001ec8:	4628      	mov	r0, r5
 8001eca:	47b0      	blx	r6
 8001ecc:	1c43      	adds	r3, r0, #1
 8001ece:	89a3      	ldrh	r3, [r4, #12]
 8001ed0:	d106      	bne.n	8001ee0 <__sflush_r+0x68>
 8001ed2:	6829      	ldr	r1, [r5, #0]
 8001ed4:	291d      	cmp	r1, #29
 8001ed6:	d848      	bhi.n	8001f6a <__sflush_r+0xf2>
 8001ed8:	4a29      	ldr	r2, [pc, #164]	; (8001f80 <__sflush_r+0x108>)
 8001eda:	40ca      	lsrs	r2, r1
 8001edc:	07d6      	lsls	r6, r2, #31
 8001ede:	d544      	bpl.n	8001f6a <__sflush_r+0xf2>
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	6062      	str	r2, [r4, #4]
 8001ee4:	6922      	ldr	r2, [r4, #16]
 8001ee6:	04d9      	lsls	r1, r3, #19
 8001ee8:	6022      	str	r2, [r4, #0]
 8001eea:	d504      	bpl.n	8001ef6 <__sflush_r+0x7e>
 8001eec:	1c42      	adds	r2, r0, #1
 8001eee:	d101      	bne.n	8001ef4 <__sflush_r+0x7c>
 8001ef0:	682b      	ldr	r3, [r5, #0]
 8001ef2:	b903      	cbnz	r3, 8001ef6 <__sflush_r+0x7e>
 8001ef4:	6560      	str	r0, [r4, #84]	; 0x54
 8001ef6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ef8:	602f      	str	r7, [r5, #0]
 8001efa:	2900      	cmp	r1, #0
 8001efc:	d0c9      	beq.n	8001e92 <__sflush_r+0x1a>
 8001efe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f02:	4299      	cmp	r1, r3
 8001f04:	d002      	beq.n	8001f0c <__sflush_r+0x94>
 8001f06:	4628      	mov	r0, r5
 8001f08:	f000 f87a 	bl	8002000 <_free_r>
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	6360      	str	r0, [r4, #52]	; 0x34
 8001f10:	e7c0      	b.n	8001e94 <__sflush_r+0x1c>
 8001f12:	2301      	movs	r3, #1
 8001f14:	4628      	mov	r0, r5
 8001f16:	47b0      	blx	r6
 8001f18:	1c41      	adds	r1, r0, #1
 8001f1a:	d1c8      	bne.n	8001eae <__sflush_r+0x36>
 8001f1c:	682b      	ldr	r3, [r5, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0c5      	beq.n	8001eae <__sflush_r+0x36>
 8001f22:	2b1d      	cmp	r3, #29
 8001f24:	d001      	beq.n	8001f2a <__sflush_r+0xb2>
 8001f26:	2b16      	cmp	r3, #22
 8001f28:	d101      	bne.n	8001f2e <__sflush_r+0xb6>
 8001f2a:	602f      	str	r7, [r5, #0]
 8001f2c:	e7b1      	b.n	8001e92 <__sflush_r+0x1a>
 8001f2e:	89a3      	ldrh	r3, [r4, #12]
 8001f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f34:	81a3      	strh	r3, [r4, #12]
 8001f36:	e7ad      	b.n	8001e94 <__sflush_r+0x1c>
 8001f38:	690f      	ldr	r7, [r1, #16]
 8001f3a:	2f00      	cmp	r7, #0
 8001f3c:	d0a9      	beq.n	8001e92 <__sflush_r+0x1a>
 8001f3e:	0793      	lsls	r3, r2, #30
 8001f40:	bf18      	it	ne
 8001f42:	2300      	movne	r3, #0
 8001f44:	680e      	ldr	r6, [r1, #0]
 8001f46:	bf08      	it	eq
 8001f48:	694b      	ldreq	r3, [r1, #20]
 8001f4a:	eba6 0807 	sub.w	r8, r6, r7
 8001f4e:	600f      	str	r7, [r1, #0]
 8001f50:	608b      	str	r3, [r1, #8]
 8001f52:	f1b8 0f00 	cmp.w	r8, #0
 8001f56:	dd9c      	ble.n	8001e92 <__sflush_r+0x1a>
 8001f58:	4643      	mov	r3, r8
 8001f5a:	463a      	mov	r2, r7
 8001f5c:	6a21      	ldr	r1, [r4, #32]
 8001f5e:	4628      	mov	r0, r5
 8001f60:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f62:	47b0      	blx	r6
 8001f64:	2800      	cmp	r0, #0
 8001f66:	dc06      	bgt.n	8001f76 <__sflush_r+0xfe>
 8001f68:	89a3      	ldrh	r3, [r4, #12]
 8001f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f6e:	81a3      	strh	r3, [r4, #12]
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f74:	e78e      	b.n	8001e94 <__sflush_r+0x1c>
 8001f76:	4407      	add	r7, r0
 8001f78:	eba8 0800 	sub.w	r8, r8, r0
 8001f7c:	e7e9      	b.n	8001f52 <__sflush_r+0xda>
 8001f7e:	bf00      	nop
 8001f80:	20400001 	.word	0x20400001

08001f84 <_fflush_r>:
 8001f84:	b538      	push	{r3, r4, r5, lr}
 8001f86:	690b      	ldr	r3, [r1, #16]
 8001f88:	4605      	mov	r5, r0
 8001f8a:	460c      	mov	r4, r1
 8001f8c:	b1db      	cbz	r3, 8001fc6 <_fflush_r+0x42>
 8001f8e:	b118      	cbz	r0, 8001f98 <_fflush_r+0x14>
 8001f90:	6983      	ldr	r3, [r0, #24]
 8001f92:	b90b      	cbnz	r3, 8001f98 <_fflush_r+0x14>
 8001f94:	f7ff fdd2 	bl	8001b3c <__sinit>
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <_fflush_r+0x48>)
 8001f9a:	429c      	cmp	r4, r3
 8001f9c:	d109      	bne.n	8001fb2 <_fflush_r+0x2e>
 8001f9e:	686c      	ldr	r4, [r5, #4]
 8001fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fa4:	b17b      	cbz	r3, 8001fc6 <_fflush_r+0x42>
 8001fa6:	4621      	mov	r1, r4
 8001fa8:	4628      	mov	r0, r5
 8001faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fae:	f7ff bf63 	b.w	8001e78 <__sflush_r>
 8001fb2:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <_fflush_r+0x4c>)
 8001fb4:	429c      	cmp	r4, r3
 8001fb6:	d101      	bne.n	8001fbc <_fflush_r+0x38>
 8001fb8:	68ac      	ldr	r4, [r5, #8]
 8001fba:	e7f1      	b.n	8001fa0 <_fflush_r+0x1c>
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <_fflush_r+0x50>)
 8001fbe:	429c      	cmp	r4, r3
 8001fc0:	bf08      	it	eq
 8001fc2:	68ec      	ldreq	r4, [r5, #12]
 8001fc4:	e7ec      	b.n	8001fa0 <_fflush_r+0x1c>
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	bd38      	pop	{r3, r4, r5, pc}
 8001fca:	bf00      	nop
 8001fcc:	08002984 	.word	0x08002984
 8001fd0:	080029a4 	.word	0x080029a4
 8001fd4:	08002964 	.word	0x08002964

08001fd8 <_lseek_r>:
 8001fd8:	b538      	push	{r3, r4, r5, lr}
 8001fda:	4605      	mov	r5, r0
 8001fdc:	4608      	mov	r0, r1
 8001fde:	4611      	mov	r1, r2
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	4c05      	ldr	r4, [pc, #20]	; (8001ff8 <_lseek_r+0x20>)
 8001fe4:	6022      	str	r2, [r4, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f7ff fb5b 	bl	80016a2 <_lseek>
 8001fec:	1c43      	adds	r3, r0, #1
 8001fee:	d102      	bne.n	8001ff6 <_lseek_r+0x1e>
 8001ff0:	6823      	ldr	r3, [r4, #0]
 8001ff2:	b103      	cbz	r3, 8001ff6 <_lseek_r+0x1e>
 8001ff4:	602b      	str	r3, [r5, #0]
 8001ff6:	bd38      	pop	{r3, r4, r5, pc}
 8001ff8:	200001f8 	.word	0x200001f8

08001ffc <__malloc_lock>:
 8001ffc:	4770      	bx	lr

08001ffe <__malloc_unlock>:
 8001ffe:	4770      	bx	lr

08002000 <_free_r>:
 8002000:	b538      	push	{r3, r4, r5, lr}
 8002002:	4605      	mov	r5, r0
 8002004:	2900      	cmp	r1, #0
 8002006:	d043      	beq.n	8002090 <_free_r+0x90>
 8002008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800200c:	1f0c      	subs	r4, r1, #4
 800200e:	2b00      	cmp	r3, #0
 8002010:	bfb8      	it	lt
 8002012:	18e4      	addlt	r4, r4, r3
 8002014:	f7ff fff2 	bl	8001ffc <__malloc_lock>
 8002018:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <_free_r+0x94>)
 800201a:	6813      	ldr	r3, [r2, #0]
 800201c:	4610      	mov	r0, r2
 800201e:	b933      	cbnz	r3, 800202e <_free_r+0x2e>
 8002020:	6063      	str	r3, [r4, #4]
 8002022:	6014      	str	r4, [r2, #0]
 8002024:	4628      	mov	r0, r5
 8002026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800202a:	f7ff bfe8 	b.w	8001ffe <__malloc_unlock>
 800202e:	42a3      	cmp	r3, r4
 8002030:	d90b      	bls.n	800204a <_free_r+0x4a>
 8002032:	6821      	ldr	r1, [r4, #0]
 8002034:	1862      	adds	r2, r4, r1
 8002036:	4293      	cmp	r3, r2
 8002038:	bf01      	itttt	eq
 800203a:	681a      	ldreq	r2, [r3, #0]
 800203c:	685b      	ldreq	r3, [r3, #4]
 800203e:	1852      	addeq	r2, r2, r1
 8002040:	6022      	streq	r2, [r4, #0]
 8002042:	6063      	str	r3, [r4, #4]
 8002044:	6004      	str	r4, [r0, #0]
 8002046:	e7ed      	b.n	8002024 <_free_r+0x24>
 8002048:	4613      	mov	r3, r2
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	b10a      	cbz	r2, 8002052 <_free_r+0x52>
 800204e:	42a2      	cmp	r2, r4
 8002050:	d9fa      	bls.n	8002048 <_free_r+0x48>
 8002052:	6819      	ldr	r1, [r3, #0]
 8002054:	1858      	adds	r0, r3, r1
 8002056:	42a0      	cmp	r0, r4
 8002058:	d10b      	bne.n	8002072 <_free_r+0x72>
 800205a:	6820      	ldr	r0, [r4, #0]
 800205c:	4401      	add	r1, r0
 800205e:	1858      	adds	r0, r3, r1
 8002060:	4282      	cmp	r2, r0
 8002062:	6019      	str	r1, [r3, #0]
 8002064:	d1de      	bne.n	8002024 <_free_r+0x24>
 8002066:	6810      	ldr	r0, [r2, #0]
 8002068:	6852      	ldr	r2, [r2, #4]
 800206a:	4401      	add	r1, r0
 800206c:	6019      	str	r1, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	e7d8      	b.n	8002024 <_free_r+0x24>
 8002072:	d902      	bls.n	800207a <_free_r+0x7a>
 8002074:	230c      	movs	r3, #12
 8002076:	602b      	str	r3, [r5, #0]
 8002078:	e7d4      	b.n	8002024 <_free_r+0x24>
 800207a:	6820      	ldr	r0, [r4, #0]
 800207c:	1821      	adds	r1, r4, r0
 800207e:	428a      	cmp	r2, r1
 8002080:	bf01      	itttt	eq
 8002082:	6811      	ldreq	r1, [r2, #0]
 8002084:	6852      	ldreq	r2, [r2, #4]
 8002086:	1809      	addeq	r1, r1, r0
 8002088:	6021      	streq	r1, [r4, #0]
 800208a:	6062      	str	r2, [r4, #4]
 800208c:	605c      	str	r4, [r3, #4]
 800208e:	e7c9      	b.n	8002024 <_free_r+0x24>
 8002090:	bd38      	pop	{r3, r4, r5, pc}
 8002092:	bf00      	nop
 8002094:	20000144 	.word	0x20000144

08002098 <__sfputc_r>:
 8002098:	6893      	ldr	r3, [r2, #8]
 800209a:	b410      	push	{r4}
 800209c:	3b01      	subs	r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	6093      	str	r3, [r2, #8]
 80020a2:	da07      	bge.n	80020b4 <__sfputc_r+0x1c>
 80020a4:	6994      	ldr	r4, [r2, #24]
 80020a6:	42a3      	cmp	r3, r4
 80020a8:	db01      	blt.n	80020ae <__sfputc_r+0x16>
 80020aa:	290a      	cmp	r1, #10
 80020ac:	d102      	bne.n	80020b4 <__sfputc_r+0x1c>
 80020ae:	bc10      	pop	{r4}
 80020b0:	f000 baca 	b.w	8002648 <__swbuf_r>
 80020b4:	6813      	ldr	r3, [r2, #0]
 80020b6:	1c58      	adds	r0, r3, #1
 80020b8:	6010      	str	r0, [r2, #0]
 80020ba:	7019      	strb	r1, [r3, #0]
 80020bc:	4608      	mov	r0, r1
 80020be:	bc10      	pop	{r4}
 80020c0:	4770      	bx	lr

080020c2 <__sfputs_r>:
 80020c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c4:	4606      	mov	r6, r0
 80020c6:	460f      	mov	r7, r1
 80020c8:	4614      	mov	r4, r2
 80020ca:	18d5      	adds	r5, r2, r3
 80020cc:	42ac      	cmp	r4, r5
 80020ce:	d101      	bne.n	80020d4 <__sfputs_r+0x12>
 80020d0:	2000      	movs	r0, #0
 80020d2:	e007      	b.n	80020e4 <__sfputs_r+0x22>
 80020d4:	463a      	mov	r2, r7
 80020d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020da:	4630      	mov	r0, r6
 80020dc:	f7ff ffdc 	bl	8002098 <__sfputc_r>
 80020e0:	1c43      	adds	r3, r0, #1
 80020e2:	d1f3      	bne.n	80020cc <__sfputs_r+0xa>
 80020e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080020e8 <_vfiprintf_r>:
 80020e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ec:	460c      	mov	r4, r1
 80020ee:	b09d      	sub	sp, #116	; 0x74
 80020f0:	4617      	mov	r7, r2
 80020f2:	461d      	mov	r5, r3
 80020f4:	4606      	mov	r6, r0
 80020f6:	b118      	cbz	r0, 8002100 <_vfiprintf_r+0x18>
 80020f8:	6983      	ldr	r3, [r0, #24]
 80020fa:	b90b      	cbnz	r3, 8002100 <_vfiprintf_r+0x18>
 80020fc:	f7ff fd1e 	bl	8001b3c <__sinit>
 8002100:	4b7c      	ldr	r3, [pc, #496]	; (80022f4 <_vfiprintf_r+0x20c>)
 8002102:	429c      	cmp	r4, r3
 8002104:	d158      	bne.n	80021b8 <_vfiprintf_r+0xd0>
 8002106:	6874      	ldr	r4, [r6, #4]
 8002108:	89a3      	ldrh	r3, [r4, #12]
 800210a:	0718      	lsls	r0, r3, #28
 800210c:	d55e      	bpl.n	80021cc <_vfiprintf_r+0xe4>
 800210e:	6923      	ldr	r3, [r4, #16]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05b      	beq.n	80021cc <_vfiprintf_r+0xe4>
 8002114:	2300      	movs	r3, #0
 8002116:	9309      	str	r3, [sp, #36]	; 0x24
 8002118:	2320      	movs	r3, #32
 800211a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800211e:	2330      	movs	r3, #48	; 0x30
 8002120:	f04f 0b01 	mov.w	fp, #1
 8002124:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002128:	9503      	str	r5, [sp, #12]
 800212a:	46b8      	mov	r8, r7
 800212c:	4645      	mov	r5, r8
 800212e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002132:	b10b      	cbz	r3, 8002138 <_vfiprintf_r+0x50>
 8002134:	2b25      	cmp	r3, #37	; 0x25
 8002136:	d154      	bne.n	80021e2 <_vfiprintf_r+0xfa>
 8002138:	ebb8 0a07 	subs.w	sl, r8, r7
 800213c:	d00b      	beq.n	8002156 <_vfiprintf_r+0x6e>
 800213e:	4653      	mov	r3, sl
 8002140:	463a      	mov	r2, r7
 8002142:	4621      	mov	r1, r4
 8002144:	4630      	mov	r0, r6
 8002146:	f7ff ffbc 	bl	80020c2 <__sfputs_r>
 800214a:	3001      	adds	r0, #1
 800214c:	f000 80c2 	beq.w	80022d4 <_vfiprintf_r+0x1ec>
 8002150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002152:	4453      	add	r3, sl
 8002154:	9309      	str	r3, [sp, #36]	; 0x24
 8002156:	f898 3000 	ldrb.w	r3, [r8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80ba 	beq.w	80022d4 <_vfiprintf_r+0x1ec>
 8002160:	2300      	movs	r3, #0
 8002162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800216a:	9304      	str	r3, [sp, #16]
 800216c:	9307      	str	r3, [sp, #28]
 800216e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002172:	931a      	str	r3, [sp, #104]	; 0x68
 8002174:	46a8      	mov	r8, r5
 8002176:	2205      	movs	r2, #5
 8002178:	f818 1b01 	ldrb.w	r1, [r8], #1
 800217c:	485e      	ldr	r0, [pc, #376]	; (80022f8 <_vfiprintf_r+0x210>)
 800217e:	f000 fb87 	bl	8002890 <memchr>
 8002182:	9b04      	ldr	r3, [sp, #16]
 8002184:	bb78      	cbnz	r0, 80021e6 <_vfiprintf_r+0xfe>
 8002186:	06d9      	lsls	r1, r3, #27
 8002188:	bf44      	itt	mi
 800218a:	2220      	movmi	r2, #32
 800218c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002190:	071a      	lsls	r2, r3, #28
 8002192:	bf44      	itt	mi
 8002194:	222b      	movmi	r2, #43	; 0x2b
 8002196:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800219a:	782a      	ldrb	r2, [r5, #0]
 800219c:	2a2a      	cmp	r2, #42	; 0x2a
 800219e:	d02a      	beq.n	80021f6 <_vfiprintf_r+0x10e>
 80021a0:	46a8      	mov	r8, r5
 80021a2:	2000      	movs	r0, #0
 80021a4:	250a      	movs	r5, #10
 80021a6:	9a07      	ldr	r2, [sp, #28]
 80021a8:	4641      	mov	r1, r8
 80021aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021ae:	3b30      	subs	r3, #48	; 0x30
 80021b0:	2b09      	cmp	r3, #9
 80021b2:	d969      	bls.n	8002288 <_vfiprintf_r+0x1a0>
 80021b4:	b360      	cbz	r0, 8002210 <_vfiprintf_r+0x128>
 80021b6:	e024      	b.n	8002202 <_vfiprintf_r+0x11a>
 80021b8:	4b50      	ldr	r3, [pc, #320]	; (80022fc <_vfiprintf_r+0x214>)
 80021ba:	429c      	cmp	r4, r3
 80021bc:	d101      	bne.n	80021c2 <_vfiprintf_r+0xda>
 80021be:	68b4      	ldr	r4, [r6, #8]
 80021c0:	e7a2      	b.n	8002108 <_vfiprintf_r+0x20>
 80021c2:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <_vfiprintf_r+0x218>)
 80021c4:	429c      	cmp	r4, r3
 80021c6:	bf08      	it	eq
 80021c8:	68f4      	ldreq	r4, [r6, #12]
 80021ca:	e79d      	b.n	8002108 <_vfiprintf_r+0x20>
 80021cc:	4621      	mov	r1, r4
 80021ce:	4630      	mov	r0, r6
 80021d0:	f000 fa8c 	bl	80026ec <__swsetup_r>
 80021d4:	2800      	cmp	r0, #0
 80021d6:	d09d      	beq.n	8002114 <_vfiprintf_r+0x2c>
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021dc:	b01d      	add	sp, #116	; 0x74
 80021de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021e2:	46a8      	mov	r8, r5
 80021e4:	e7a2      	b.n	800212c <_vfiprintf_r+0x44>
 80021e6:	4a44      	ldr	r2, [pc, #272]	; (80022f8 <_vfiprintf_r+0x210>)
 80021e8:	4645      	mov	r5, r8
 80021ea:	1a80      	subs	r0, r0, r2
 80021ec:	fa0b f000 	lsl.w	r0, fp, r0
 80021f0:	4318      	orrs	r0, r3
 80021f2:	9004      	str	r0, [sp, #16]
 80021f4:	e7be      	b.n	8002174 <_vfiprintf_r+0x8c>
 80021f6:	9a03      	ldr	r2, [sp, #12]
 80021f8:	1d11      	adds	r1, r2, #4
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	9103      	str	r1, [sp, #12]
 80021fe:	2a00      	cmp	r2, #0
 8002200:	db01      	blt.n	8002206 <_vfiprintf_r+0x11e>
 8002202:	9207      	str	r2, [sp, #28]
 8002204:	e004      	b.n	8002210 <_vfiprintf_r+0x128>
 8002206:	4252      	negs	r2, r2
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	9207      	str	r2, [sp, #28]
 800220e:	9304      	str	r3, [sp, #16]
 8002210:	f898 3000 	ldrb.w	r3, [r8]
 8002214:	2b2e      	cmp	r3, #46	; 0x2e
 8002216:	d10e      	bne.n	8002236 <_vfiprintf_r+0x14e>
 8002218:	f898 3001 	ldrb.w	r3, [r8, #1]
 800221c:	2b2a      	cmp	r3, #42	; 0x2a
 800221e:	d138      	bne.n	8002292 <_vfiprintf_r+0x1aa>
 8002220:	9b03      	ldr	r3, [sp, #12]
 8002222:	f108 0802 	add.w	r8, r8, #2
 8002226:	1d1a      	adds	r2, r3, #4
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	9203      	str	r2, [sp, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	bfb8      	it	lt
 8002230:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002234:	9305      	str	r3, [sp, #20]
 8002236:	4d33      	ldr	r5, [pc, #204]	; (8002304 <_vfiprintf_r+0x21c>)
 8002238:	2203      	movs	r2, #3
 800223a:	f898 1000 	ldrb.w	r1, [r8]
 800223e:	4628      	mov	r0, r5
 8002240:	f000 fb26 	bl	8002890 <memchr>
 8002244:	b140      	cbz	r0, 8002258 <_vfiprintf_r+0x170>
 8002246:	2340      	movs	r3, #64	; 0x40
 8002248:	1b40      	subs	r0, r0, r5
 800224a:	fa03 f000 	lsl.w	r0, r3, r0
 800224e:	9b04      	ldr	r3, [sp, #16]
 8002250:	f108 0801 	add.w	r8, r8, #1
 8002254:	4303      	orrs	r3, r0
 8002256:	9304      	str	r3, [sp, #16]
 8002258:	f898 1000 	ldrb.w	r1, [r8]
 800225c:	2206      	movs	r2, #6
 800225e:	482a      	ldr	r0, [pc, #168]	; (8002308 <_vfiprintf_r+0x220>)
 8002260:	f108 0701 	add.w	r7, r8, #1
 8002264:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002268:	f000 fb12 	bl	8002890 <memchr>
 800226c:	2800      	cmp	r0, #0
 800226e:	d037      	beq.n	80022e0 <_vfiprintf_r+0x1f8>
 8002270:	4b26      	ldr	r3, [pc, #152]	; (800230c <_vfiprintf_r+0x224>)
 8002272:	bb1b      	cbnz	r3, 80022bc <_vfiprintf_r+0x1d4>
 8002274:	9b03      	ldr	r3, [sp, #12]
 8002276:	3307      	adds	r3, #7
 8002278:	f023 0307 	bic.w	r3, r3, #7
 800227c:	3308      	adds	r3, #8
 800227e:	9303      	str	r3, [sp, #12]
 8002280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002282:	444b      	add	r3, r9
 8002284:	9309      	str	r3, [sp, #36]	; 0x24
 8002286:	e750      	b.n	800212a <_vfiprintf_r+0x42>
 8002288:	fb05 3202 	mla	r2, r5, r2, r3
 800228c:	2001      	movs	r0, #1
 800228e:	4688      	mov	r8, r1
 8002290:	e78a      	b.n	80021a8 <_vfiprintf_r+0xc0>
 8002292:	2300      	movs	r3, #0
 8002294:	250a      	movs	r5, #10
 8002296:	4619      	mov	r1, r3
 8002298:	f108 0801 	add.w	r8, r8, #1
 800229c:	9305      	str	r3, [sp, #20]
 800229e:	4640      	mov	r0, r8
 80022a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022a4:	3a30      	subs	r2, #48	; 0x30
 80022a6:	2a09      	cmp	r2, #9
 80022a8:	d903      	bls.n	80022b2 <_vfiprintf_r+0x1ca>
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0c3      	beq.n	8002236 <_vfiprintf_r+0x14e>
 80022ae:	9105      	str	r1, [sp, #20]
 80022b0:	e7c1      	b.n	8002236 <_vfiprintf_r+0x14e>
 80022b2:	fb05 2101 	mla	r1, r5, r1, r2
 80022b6:	2301      	movs	r3, #1
 80022b8:	4680      	mov	r8, r0
 80022ba:	e7f0      	b.n	800229e <_vfiprintf_r+0x1b6>
 80022bc:	ab03      	add	r3, sp, #12
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	4622      	mov	r2, r4
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <_vfiprintf_r+0x228>)
 80022c4:	a904      	add	r1, sp, #16
 80022c6:	4630      	mov	r0, r6
 80022c8:	f3af 8000 	nop.w
 80022cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80022d0:	4681      	mov	r9, r0
 80022d2:	d1d5      	bne.n	8002280 <_vfiprintf_r+0x198>
 80022d4:	89a3      	ldrh	r3, [r4, #12]
 80022d6:	065b      	lsls	r3, r3, #25
 80022d8:	f53f af7e 	bmi.w	80021d8 <_vfiprintf_r+0xf0>
 80022dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022de:	e77d      	b.n	80021dc <_vfiprintf_r+0xf4>
 80022e0:	ab03      	add	r3, sp, #12
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	4622      	mov	r2, r4
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <_vfiprintf_r+0x228>)
 80022e8:	a904      	add	r1, sp, #16
 80022ea:	4630      	mov	r0, r6
 80022ec:	f000 f888 	bl	8002400 <_printf_i>
 80022f0:	e7ec      	b.n	80022cc <_vfiprintf_r+0x1e4>
 80022f2:	bf00      	nop
 80022f4:	08002984 	.word	0x08002984
 80022f8:	080029c8 	.word	0x080029c8
 80022fc:	080029a4 	.word	0x080029a4
 8002300:	08002964 	.word	0x08002964
 8002304:	080029ce 	.word	0x080029ce
 8002308:	080029d2 	.word	0x080029d2
 800230c:	00000000 	.word	0x00000000
 8002310:	080020c3 	.word	0x080020c3

08002314 <_printf_common>:
 8002314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002318:	4691      	mov	r9, r2
 800231a:	461f      	mov	r7, r3
 800231c:	688a      	ldr	r2, [r1, #8]
 800231e:	690b      	ldr	r3, [r1, #16]
 8002320:	4606      	mov	r6, r0
 8002322:	4293      	cmp	r3, r2
 8002324:	bfb8      	it	lt
 8002326:	4613      	movlt	r3, r2
 8002328:	f8c9 3000 	str.w	r3, [r9]
 800232c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002330:	460c      	mov	r4, r1
 8002332:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002336:	b112      	cbz	r2, 800233e <_printf_common+0x2a>
 8002338:	3301      	adds	r3, #1
 800233a:	f8c9 3000 	str.w	r3, [r9]
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	0699      	lsls	r1, r3, #26
 8002342:	bf42      	ittt	mi
 8002344:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002348:	3302      	addmi	r3, #2
 800234a:	f8c9 3000 	strmi.w	r3, [r9]
 800234e:	6825      	ldr	r5, [r4, #0]
 8002350:	f015 0506 	ands.w	r5, r5, #6
 8002354:	d107      	bne.n	8002366 <_printf_common+0x52>
 8002356:	f104 0a19 	add.w	sl, r4, #25
 800235a:	68e3      	ldr	r3, [r4, #12]
 800235c:	f8d9 2000 	ldr.w	r2, [r9]
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	42ab      	cmp	r3, r5
 8002364:	dc29      	bgt.n	80023ba <_printf_common+0xa6>
 8002366:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800236a:	6822      	ldr	r2, [r4, #0]
 800236c:	3300      	adds	r3, #0
 800236e:	bf18      	it	ne
 8002370:	2301      	movne	r3, #1
 8002372:	0692      	lsls	r2, r2, #26
 8002374:	d42e      	bmi.n	80023d4 <_printf_common+0xc0>
 8002376:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800237a:	4639      	mov	r1, r7
 800237c:	4630      	mov	r0, r6
 800237e:	47c0      	blx	r8
 8002380:	3001      	adds	r0, #1
 8002382:	d021      	beq.n	80023c8 <_printf_common+0xb4>
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	68e5      	ldr	r5, [r4, #12]
 8002388:	f003 0306 	and.w	r3, r3, #6
 800238c:	2b04      	cmp	r3, #4
 800238e:	bf18      	it	ne
 8002390:	2500      	movne	r5, #0
 8002392:	f8d9 2000 	ldr.w	r2, [r9]
 8002396:	f04f 0900 	mov.w	r9, #0
 800239a:	bf08      	it	eq
 800239c:	1aad      	subeq	r5, r5, r2
 800239e:	68a3      	ldr	r3, [r4, #8]
 80023a0:	6922      	ldr	r2, [r4, #16]
 80023a2:	bf08      	it	eq
 80023a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023a8:	4293      	cmp	r3, r2
 80023aa:	bfc4      	itt	gt
 80023ac:	1a9b      	subgt	r3, r3, r2
 80023ae:	18ed      	addgt	r5, r5, r3
 80023b0:	341a      	adds	r4, #26
 80023b2:	454d      	cmp	r5, r9
 80023b4:	d11a      	bne.n	80023ec <_printf_common+0xd8>
 80023b6:	2000      	movs	r0, #0
 80023b8:	e008      	b.n	80023cc <_printf_common+0xb8>
 80023ba:	2301      	movs	r3, #1
 80023bc:	4652      	mov	r2, sl
 80023be:	4639      	mov	r1, r7
 80023c0:	4630      	mov	r0, r6
 80023c2:	47c0      	blx	r8
 80023c4:	3001      	adds	r0, #1
 80023c6:	d103      	bne.n	80023d0 <_printf_common+0xbc>
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023d0:	3501      	adds	r5, #1
 80023d2:	e7c2      	b.n	800235a <_printf_common+0x46>
 80023d4:	2030      	movs	r0, #48	; 0x30
 80023d6:	18e1      	adds	r1, r4, r3
 80023d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023e2:	4422      	add	r2, r4
 80023e4:	3302      	adds	r3, #2
 80023e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80023ea:	e7c4      	b.n	8002376 <_printf_common+0x62>
 80023ec:	2301      	movs	r3, #1
 80023ee:	4622      	mov	r2, r4
 80023f0:	4639      	mov	r1, r7
 80023f2:	4630      	mov	r0, r6
 80023f4:	47c0      	blx	r8
 80023f6:	3001      	adds	r0, #1
 80023f8:	d0e6      	beq.n	80023c8 <_printf_common+0xb4>
 80023fa:	f109 0901 	add.w	r9, r9, #1
 80023fe:	e7d8      	b.n	80023b2 <_printf_common+0x9e>

08002400 <_printf_i>:
 8002400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002404:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002408:	460c      	mov	r4, r1
 800240a:	7e09      	ldrb	r1, [r1, #24]
 800240c:	b085      	sub	sp, #20
 800240e:	296e      	cmp	r1, #110	; 0x6e
 8002410:	4617      	mov	r7, r2
 8002412:	4606      	mov	r6, r0
 8002414:	4698      	mov	r8, r3
 8002416:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002418:	f000 80b3 	beq.w	8002582 <_printf_i+0x182>
 800241c:	d822      	bhi.n	8002464 <_printf_i+0x64>
 800241e:	2963      	cmp	r1, #99	; 0x63
 8002420:	d036      	beq.n	8002490 <_printf_i+0x90>
 8002422:	d80a      	bhi.n	800243a <_printf_i+0x3a>
 8002424:	2900      	cmp	r1, #0
 8002426:	f000 80b9 	beq.w	800259c <_printf_i+0x19c>
 800242a:	2958      	cmp	r1, #88	; 0x58
 800242c:	f000 8083 	beq.w	8002536 <_printf_i+0x136>
 8002430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002434:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002438:	e032      	b.n	80024a0 <_printf_i+0xa0>
 800243a:	2964      	cmp	r1, #100	; 0x64
 800243c:	d001      	beq.n	8002442 <_printf_i+0x42>
 800243e:	2969      	cmp	r1, #105	; 0x69
 8002440:	d1f6      	bne.n	8002430 <_printf_i+0x30>
 8002442:	6820      	ldr	r0, [r4, #0]
 8002444:	6813      	ldr	r3, [r2, #0]
 8002446:	0605      	lsls	r5, r0, #24
 8002448:	f103 0104 	add.w	r1, r3, #4
 800244c:	d52a      	bpl.n	80024a4 <_printf_i+0xa4>
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6011      	str	r1, [r2, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	da03      	bge.n	800245e <_printf_i+0x5e>
 8002456:	222d      	movs	r2, #45	; 0x2d
 8002458:	425b      	negs	r3, r3
 800245a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800245e:	486f      	ldr	r0, [pc, #444]	; (800261c <_printf_i+0x21c>)
 8002460:	220a      	movs	r2, #10
 8002462:	e039      	b.n	80024d8 <_printf_i+0xd8>
 8002464:	2973      	cmp	r1, #115	; 0x73
 8002466:	f000 809d 	beq.w	80025a4 <_printf_i+0x1a4>
 800246a:	d808      	bhi.n	800247e <_printf_i+0x7e>
 800246c:	296f      	cmp	r1, #111	; 0x6f
 800246e:	d020      	beq.n	80024b2 <_printf_i+0xb2>
 8002470:	2970      	cmp	r1, #112	; 0x70
 8002472:	d1dd      	bne.n	8002430 <_printf_i+0x30>
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	f043 0320 	orr.w	r3, r3, #32
 800247a:	6023      	str	r3, [r4, #0]
 800247c:	e003      	b.n	8002486 <_printf_i+0x86>
 800247e:	2975      	cmp	r1, #117	; 0x75
 8002480:	d017      	beq.n	80024b2 <_printf_i+0xb2>
 8002482:	2978      	cmp	r1, #120	; 0x78
 8002484:	d1d4      	bne.n	8002430 <_printf_i+0x30>
 8002486:	2378      	movs	r3, #120	; 0x78
 8002488:	4865      	ldr	r0, [pc, #404]	; (8002620 <_printf_i+0x220>)
 800248a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800248e:	e055      	b.n	800253c <_printf_i+0x13c>
 8002490:	6813      	ldr	r3, [r2, #0]
 8002492:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002496:	1d19      	adds	r1, r3, #4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6011      	str	r1, [r2, #0]
 800249c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024a0:	2301      	movs	r3, #1
 80024a2:	e08c      	b.n	80025be <_printf_i+0x1be>
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80024aa:	6011      	str	r1, [r2, #0]
 80024ac:	bf18      	it	ne
 80024ae:	b21b      	sxthne	r3, r3
 80024b0:	e7cf      	b.n	8002452 <_printf_i+0x52>
 80024b2:	6813      	ldr	r3, [r2, #0]
 80024b4:	6825      	ldr	r5, [r4, #0]
 80024b6:	1d18      	adds	r0, r3, #4
 80024b8:	6010      	str	r0, [r2, #0]
 80024ba:	0628      	lsls	r0, r5, #24
 80024bc:	d501      	bpl.n	80024c2 <_printf_i+0xc2>
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	e002      	b.n	80024c8 <_printf_i+0xc8>
 80024c2:	0668      	lsls	r0, r5, #25
 80024c4:	d5fb      	bpl.n	80024be <_printf_i+0xbe>
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	296f      	cmp	r1, #111	; 0x6f
 80024ca:	bf14      	ite	ne
 80024cc:	220a      	movne	r2, #10
 80024ce:	2208      	moveq	r2, #8
 80024d0:	4852      	ldr	r0, [pc, #328]	; (800261c <_printf_i+0x21c>)
 80024d2:	2100      	movs	r1, #0
 80024d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024d8:	6865      	ldr	r5, [r4, #4]
 80024da:	2d00      	cmp	r5, #0
 80024dc:	60a5      	str	r5, [r4, #8]
 80024de:	f2c0 8095 	blt.w	800260c <_printf_i+0x20c>
 80024e2:	6821      	ldr	r1, [r4, #0]
 80024e4:	f021 0104 	bic.w	r1, r1, #4
 80024e8:	6021      	str	r1, [r4, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d13d      	bne.n	800256a <_printf_i+0x16a>
 80024ee:	2d00      	cmp	r5, #0
 80024f0:	f040 808e 	bne.w	8002610 <_printf_i+0x210>
 80024f4:	4665      	mov	r5, ip
 80024f6:	2a08      	cmp	r2, #8
 80024f8:	d10b      	bne.n	8002512 <_printf_i+0x112>
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	07db      	lsls	r3, r3, #31
 80024fe:	d508      	bpl.n	8002512 <_printf_i+0x112>
 8002500:	6923      	ldr	r3, [r4, #16]
 8002502:	6862      	ldr	r2, [r4, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	bfde      	ittt	le
 8002508:	2330      	movle	r3, #48	; 0x30
 800250a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800250e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002512:	ebac 0305 	sub.w	r3, ip, r5
 8002516:	6123      	str	r3, [r4, #16]
 8002518:	f8cd 8000 	str.w	r8, [sp]
 800251c:	463b      	mov	r3, r7
 800251e:	aa03      	add	r2, sp, #12
 8002520:	4621      	mov	r1, r4
 8002522:	4630      	mov	r0, r6
 8002524:	f7ff fef6 	bl	8002314 <_printf_common>
 8002528:	3001      	adds	r0, #1
 800252a:	d14d      	bne.n	80025c8 <_printf_i+0x1c8>
 800252c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002530:	b005      	add	sp, #20
 8002532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002536:	4839      	ldr	r0, [pc, #228]	; (800261c <_printf_i+0x21c>)
 8002538:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800253c:	6813      	ldr	r3, [r2, #0]
 800253e:	6821      	ldr	r1, [r4, #0]
 8002540:	1d1d      	adds	r5, r3, #4
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6015      	str	r5, [r2, #0]
 8002546:	060a      	lsls	r2, r1, #24
 8002548:	d50b      	bpl.n	8002562 <_printf_i+0x162>
 800254a:	07ca      	lsls	r2, r1, #31
 800254c:	bf44      	itt	mi
 800254e:	f041 0120 	orrmi.w	r1, r1, #32
 8002552:	6021      	strmi	r1, [r4, #0]
 8002554:	b91b      	cbnz	r3, 800255e <_printf_i+0x15e>
 8002556:	6822      	ldr	r2, [r4, #0]
 8002558:	f022 0220 	bic.w	r2, r2, #32
 800255c:	6022      	str	r2, [r4, #0]
 800255e:	2210      	movs	r2, #16
 8002560:	e7b7      	b.n	80024d2 <_printf_i+0xd2>
 8002562:	064d      	lsls	r5, r1, #25
 8002564:	bf48      	it	mi
 8002566:	b29b      	uxthmi	r3, r3
 8002568:	e7ef      	b.n	800254a <_printf_i+0x14a>
 800256a:	4665      	mov	r5, ip
 800256c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002570:	fb02 3311 	mls	r3, r2, r1, r3
 8002574:	5cc3      	ldrb	r3, [r0, r3]
 8002576:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800257a:	460b      	mov	r3, r1
 800257c:	2900      	cmp	r1, #0
 800257e:	d1f5      	bne.n	800256c <_printf_i+0x16c>
 8002580:	e7b9      	b.n	80024f6 <_printf_i+0xf6>
 8002582:	6813      	ldr	r3, [r2, #0]
 8002584:	6825      	ldr	r5, [r4, #0]
 8002586:	1d18      	adds	r0, r3, #4
 8002588:	6961      	ldr	r1, [r4, #20]
 800258a:	6010      	str	r0, [r2, #0]
 800258c:	0628      	lsls	r0, r5, #24
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	d501      	bpl.n	8002596 <_printf_i+0x196>
 8002592:	6019      	str	r1, [r3, #0]
 8002594:	e002      	b.n	800259c <_printf_i+0x19c>
 8002596:	066a      	lsls	r2, r5, #25
 8002598:	d5fb      	bpl.n	8002592 <_printf_i+0x192>
 800259a:	8019      	strh	r1, [r3, #0]
 800259c:	2300      	movs	r3, #0
 800259e:	4665      	mov	r5, ip
 80025a0:	6123      	str	r3, [r4, #16]
 80025a2:	e7b9      	b.n	8002518 <_printf_i+0x118>
 80025a4:	6813      	ldr	r3, [r2, #0]
 80025a6:	1d19      	adds	r1, r3, #4
 80025a8:	6011      	str	r1, [r2, #0]
 80025aa:	681d      	ldr	r5, [r3, #0]
 80025ac:	6862      	ldr	r2, [r4, #4]
 80025ae:	2100      	movs	r1, #0
 80025b0:	4628      	mov	r0, r5
 80025b2:	f000 f96d 	bl	8002890 <memchr>
 80025b6:	b108      	cbz	r0, 80025bc <_printf_i+0x1bc>
 80025b8:	1b40      	subs	r0, r0, r5
 80025ba:	6060      	str	r0, [r4, #4]
 80025bc:	6863      	ldr	r3, [r4, #4]
 80025be:	6123      	str	r3, [r4, #16]
 80025c0:	2300      	movs	r3, #0
 80025c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025c6:	e7a7      	b.n	8002518 <_printf_i+0x118>
 80025c8:	6923      	ldr	r3, [r4, #16]
 80025ca:	462a      	mov	r2, r5
 80025cc:	4639      	mov	r1, r7
 80025ce:	4630      	mov	r0, r6
 80025d0:	47c0      	blx	r8
 80025d2:	3001      	adds	r0, #1
 80025d4:	d0aa      	beq.n	800252c <_printf_i+0x12c>
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	079b      	lsls	r3, r3, #30
 80025da:	d413      	bmi.n	8002604 <_printf_i+0x204>
 80025dc:	68e0      	ldr	r0, [r4, #12]
 80025de:	9b03      	ldr	r3, [sp, #12]
 80025e0:	4298      	cmp	r0, r3
 80025e2:	bfb8      	it	lt
 80025e4:	4618      	movlt	r0, r3
 80025e6:	e7a3      	b.n	8002530 <_printf_i+0x130>
 80025e8:	2301      	movs	r3, #1
 80025ea:	464a      	mov	r2, r9
 80025ec:	4639      	mov	r1, r7
 80025ee:	4630      	mov	r0, r6
 80025f0:	47c0      	blx	r8
 80025f2:	3001      	adds	r0, #1
 80025f4:	d09a      	beq.n	800252c <_printf_i+0x12c>
 80025f6:	3501      	adds	r5, #1
 80025f8:	68e3      	ldr	r3, [r4, #12]
 80025fa:	9a03      	ldr	r2, [sp, #12]
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	42ab      	cmp	r3, r5
 8002600:	dcf2      	bgt.n	80025e8 <_printf_i+0x1e8>
 8002602:	e7eb      	b.n	80025dc <_printf_i+0x1dc>
 8002604:	2500      	movs	r5, #0
 8002606:	f104 0919 	add.w	r9, r4, #25
 800260a:	e7f5      	b.n	80025f8 <_printf_i+0x1f8>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1ac      	bne.n	800256a <_printf_i+0x16a>
 8002610:	7803      	ldrb	r3, [r0, #0]
 8002612:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002616:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800261a:	e76c      	b.n	80024f6 <_printf_i+0xf6>
 800261c:	080029d9 	.word	0x080029d9
 8002620:	080029ea 	.word	0x080029ea

08002624 <_read_r>:
 8002624:	b538      	push	{r3, r4, r5, lr}
 8002626:	4605      	mov	r5, r0
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	2200      	movs	r2, #0
 800262e:	4c05      	ldr	r4, [pc, #20]	; (8002644 <_read_r+0x20>)
 8002630:	6022      	str	r2, [r4, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	f7fe ffde 	bl	80015f4 <_read>
 8002638:	1c43      	adds	r3, r0, #1
 800263a:	d102      	bne.n	8002642 <_read_r+0x1e>
 800263c:	6823      	ldr	r3, [r4, #0]
 800263e:	b103      	cbz	r3, 8002642 <_read_r+0x1e>
 8002640:	602b      	str	r3, [r5, #0]
 8002642:	bd38      	pop	{r3, r4, r5, pc}
 8002644:	200001f8 	.word	0x200001f8

08002648 <__swbuf_r>:
 8002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264a:	460e      	mov	r6, r1
 800264c:	4614      	mov	r4, r2
 800264e:	4605      	mov	r5, r0
 8002650:	b118      	cbz	r0, 800265a <__swbuf_r+0x12>
 8002652:	6983      	ldr	r3, [r0, #24]
 8002654:	b90b      	cbnz	r3, 800265a <__swbuf_r+0x12>
 8002656:	f7ff fa71 	bl	8001b3c <__sinit>
 800265a:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <__swbuf_r+0x98>)
 800265c:	429c      	cmp	r4, r3
 800265e:	d12a      	bne.n	80026b6 <__swbuf_r+0x6e>
 8002660:	686c      	ldr	r4, [r5, #4]
 8002662:	69a3      	ldr	r3, [r4, #24]
 8002664:	60a3      	str	r3, [r4, #8]
 8002666:	89a3      	ldrh	r3, [r4, #12]
 8002668:	071a      	lsls	r2, r3, #28
 800266a:	d52e      	bpl.n	80026ca <__swbuf_r+0x82>
 800266c:	6923      	ldr	r3, [r4, #16]
 800266e:	b363      	cbz	r3, 80026ca <__swbuf_r+0x82>
 8002670:	6923      	ldr	r3, [r4, #16]
 8002672:	6820      	ldr	r0, [r4, #0]
 8002674:	b2f6      	uxtb	r6, r6
 8002676:	1ac0      	subs	r0, r0, r3
 8002678:	6963      	ldr	r3, [r4, #20]
 800267a:	4637      	mov	r7, r6
 800267c:	4283      	cmp	r3, r0
 800267e:	dc04      	bgt.n	800268a <__swbuf_r+0x42>
 8002680:	4621      	mov	r1, r4
 8002682:	4628      	mov	r0, r5
 8002684:	f7ff fc7e 	bl	8001f84 <_fflush_r>
 8002688:	bb28      	cbnz	r0, 80026d6 <__swbuf_r+0x8e>
 800268a:	68a3      	ldr	r3, [r4, #8]
 800268c:	3001      	adds	r0, #1
 800268e:	3b01      	subs	r3, #1
 8002690:	60a3      	str	r3, [r4, #8]
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	6022      	str	r2, [r4, #0]
 8002698:	701e      	strb	r6, [r3, #0]
 800269a:	6963      	ldr	r3, [r4, #20]
 800269c:	4283      	cmp	r3, r0
 800269e:	d004      	beq.n	80026aa <__swbuf_r+0x62>
 80026a0:	89a3      	ldrh	r3, [r4, #12]
 80026a2:	07db      	lsls	r3, r3, #31
 80026a4:	d519      	bpl.n	80026da <__swbuf_r+0x92>
 80026a6:	2e0a      	cmp	r6, #10
 80026a8:	d117      	bne.n	80026da <__swbuf_r+0x92>
 80026aa:	4621      	mov	r1, r4
 80026ac:	4628      	mov	r0, r5
 80026ae:	f7ff fc69 	bl	8001f84 <_fflush_r>
 80026b2:	b190      	cbz	r0, 80026da <__swbuf_r+0x92>
 80026b4:	e00f      	b.n	80026d6 <__swbuf_r+0x8e>
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <__swbuf_r+0x9c>)
 80026b8:	429c      	cmp	r4, r3
 80026ba:	d101      	bne.n	80026c0 <__swbuf_r+0x78>
 80026bc:	68ac      	ldr	r4, [r5, #8]
 80026be:	e7d0      	b.n	8002662 <__swbuf_r+0x1a>
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <__swbuf_r+0xa0>)
 80026c2:	429c      	cmp	r4, r3
 80026c4:	bf08      	it	eq
 80026c6:	68ec      	ldreq	r4, [r5, #12]
 80026c8:	e7cb      	b.n	8002662 <__swbuf_r+0x1a>
 80026ca:	4621      	mov	r1, r4
 80026cc:	4628      	mov	r0, r5
 80026ce:	f000 f80d 	bl	80026ec <__swsetup_r>
 80026d2:	2800      	cmp	r0, #0
 80026d4:	d0cc      	beq.n	8002670 <__swbuf_r+0x28>
 80026d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80026da:	4638      	mov	r0, r7
 80026dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026de:	bf00      	nop
 80026e0:	08002984 	.word	0x08002984
 80026e4:	080029a4 	.word	0x080029a4
 80026e8:	08002964 	.word	0x08002964

080026ec <__swsetup_r>:
 80026ec:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <__swsetup_r+0xcc>)
 80026ee:	b570      	push	{r4, r5, r6, lr}
 80026f0:	681d      	ldr	r5, [r3, #0]
 80026f2:	4606      	mov	r6, r0
 80026f4:	460c      	mov	r4, r1
 80026f6:	b125      	cbz	r5, 8002702 <__swsetup_r+0x16>
 80026f8:	69ab      	ldr	r3, [r5, #24]
 80026fa:	b913      	cbnz	r3, 8002702 <__swsetup_r+0x16>
 80026fc:	4628      	mov	r0, r5
 80026fe:	f7ff fa1d 	bl	8001b3c <__sinit>
 8002702:	4b2e      	ldr	r3, [pc, #184]	; (80027bc <__swsetup_r+0xd0>)
 8002704:	429c      	cmp	r4, r3
 8002706:	d10f      	bne.n	8002728 <__swsetup_r+0x3c>
 8002708:	686c      	ldr	r4, [r5, #4]
 800270a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800270e:	b29a      	uxth	r2, r3
 8002710:	0715      	lsls	r5, r2, #28
 8002712:	d42c      	bmi.n	800276e <__swsetup_r+0x82>
 8002714:	06d0      	lsls	r0, r2, #27
 8002716:	d411      	bmi.n	800273c <__swsetup_r+0x50>
 8002718:	2209      	movs	r2, #9
 800271a:	6032      	str	r2, [r6, #0]
 800271c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002720:	81a3      	strh	r3, [r4, #12]
 8002722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002726:	e03e      	b.n	80027a6 <__swsetup_r+0xba>
 8002728:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <__swsetup_r+0xd4>)
 800272a:	429c      	cmp	r4, r3
 800272c:	d101      	bne.n	8002732 <__swsetup_r+0x46>
 800272e:	68ac      	ldr	r4, [r5, #8]
 8002730:	e7eb      	b.n	800270a <__swsetup_r+0x1e>
 8002732:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <__swsetup_r+0xd8>)
 8002734:	429c      	cmp	r4, r3
 8002736:	bf08      	it	eq
 8002738:	68ec      	ldreq	r4, [r5, #12]
 800273a:	e7e6      	b.n	800270a <__swsetup_r+0x1e>
 800273c:	0751      	lsls	r1, r2, #29
 800273e:	d512      	bpl.n	8002766 <__swsetup_r+0x7a>
 8002740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002742:	b141      	cbz	r1, 8002756 <__swsetup_r+0x6a>
 8002744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002748:	4299      	cmp	r1, r3
 800274a:	d002      	beq.n	8002752 <__swsetup_r+0x66>
 800274c:	4630      	mov	r0, r6
 800274e:	f7ff fc57 	bl	8002000 <_free_r>
 8002752:	2300      	movs	r3, #0
 8002754:	6363      	str	r3, [r4, #52]	; 0x34
 8002756:	89a3      	ldrh	r3, [r4, #12]
 8002758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800275c:	81a3      	strh	r3, [r4, #12]
 800275e:	2300      	movs	r3, #0
 8002760:	6063      	str	r3, [r4, #4]
 8002762:	6923      	ldr	r3, [r4, #16]
 8002764:	6023      	str	r3, [r4, #0]
 8002766:	89a3      	ldrh	r3, [r4, #12]
 8002768:	f043 0308 	orr.w	r3, r3, #8
 800276c:	81a3      	strh	r3, [r4, #12]
 800276e:	6923      	ldr	r3, [r4, #16]
 8002770:	b94b      	cbnz	r3, 8002786 <__swsetup_r+0x9a>
 8002772:	89a3      	ldrh	r3, [r4, #12]
 8002774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800277c:	d003      	beq.n	8002786 <__swsetup_r+0x9a>
 800277e:	4621      	mov	r1, r4
 8002780:	4630      	mov	r0, r6
 8002782:	f000 f845 	bl	8002810 <__smakebuf_r>
 8002786:	89a2      	ldrh	r2, [r4, #12]
 8002788:	f012 0301 	ands.w	r3, r2, #1
 800278c:	d00c      	beq.n	80027a8 <__swsetup_r+0xbc>
 800278e:	2300      	movs	r3, #0
 8002790:	60a3      	str	r3, [r4, #8]
 8002792:	6963      	ldr	r3, [r4, #20]
 8002794:	425b      	negs	r3, r3
 8002796:	61a3      	str	r3, [r4, #24]
 8002798:	6923      	ldr	r3, [r4, #16]
 800279a:	b953      	cbnz	r3, 80027b2 <__swsetup_r+0xc6>
 800279c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80027a4:	d1ba      	bne.n	800271c <__swsetup_r+0x30>
 80027a6:	bd70      	pop	{r4, r5, r6, pc}
 80027a8:	0792      	lsls	r2, r2, #30
 80027aa:	bf58      	it	pl
 80027ac:	6963      	ldrpl	r3, [r4, #20]
 80027ae:	60a3      	str	r3, [r4, #8]
 80027b0:	e7f2      	b.n	8002798 <__swsetup_r+0xac>
 80027b2:	2000      	movs	r0, #0
 80027b4:	e7f7      	b.n	80027a6 <__swsetup_r+0xba>
 80027b6:	bf00      	nop
 80027b8:	20000014 	.word	0x20000014
 80027bc:	08002984 	.word	0x08002984
 80027c0:	080029a4 	.word	0x080029a4
 80027c4:	08002964 	.word	0x08002964

080027c8 <__swhatbuf_r>:
 80027c8:	b570      	push	{r4, r5, r6, lr}
 80027ca:	460e      	mov	r6, r1
 80027cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027d0:	b096      	sub	sp, #88	; 0x58
 80027d2:	2900      	cmp	r1, #0
 80027d4:	4614      	mov	r4, r2
 80027d6:	461d      	mov	r5, r3
 80027d8:	da07      	bge.n	80027ea <__swhatbuf_r+0x22>
 80027da:	2300      	movs	r3, #0
 80027dc:	602b      	str	r3, [r5, #0]
 80027de:	89b3      	ldrh	r3, [r6, #12]
 80027e0:	061a      	lsls	r2, r3, #24
 80027e2:	d410      	bmi.n	8002806 <__swhatbuf_r+0x3e>
 80027e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e8:	e00e      	b.n	8002808 <__swhatbuf_r+0x40>
 80027ea:	466a      	mov	r2, sp
 80027ec:	f000 f85e 	bl	80028ac <_fstat_r>
 80027f0:	2800      	cmp	r0, #0
 80027f2:	dbf2      	blt.n	80027da <__swhatbuf_r+0x12>
 80027f4:	9a01      	ldr	r2, [sp, #4]
 80027f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80027fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80027fe:	425a      	negs	r2, r3
 8002800:	415a      	adcs	r2, r3
 8002802:	602a      	str	r2, [r5, #0]
 8002804:	e7ee      	b.n	80027e4 <__swhatbuf_r+0x1c>
 8002806:	2340      	movs	r3, #64	; 0x40
 8002808:	2000      	movs	r0, #0
 800280a:	6023      	str	r3, [r4, #0]
 800280c:	b016      	add	sp, #88	; 0x58
 800280e:	bd70      	pop	{r4, r5, r6, pc}

08002810 <__smakebuf_r>:
 8002810:	898b      	ldrh	r3, [r1, #12]
 8002812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002814:	079d      	lsls	r5, r3, #30
 8002816:	4606      	mov	r6, r0
 8002818:	460c      	mov	r4, r1
 800281a:	d507      	bpl.n	800282c <__smakebuf_r+0x1c>
 800281c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002820:	6023      	str	r3, [r4, #0]
 8002822:	6123      	str	r3, [r4, #16]
 8002824:	2301      	movs	r3, #1
 8002826:	6163      	str	r3, [r4, #20]
 8002828:	b002      	add	sp, #8
 800282a:	bd70      	pop	{r4, r5, r6, pc}
 800282c:	ab01      	add	r3, sp, #4
 800282e:	466a      	mov	r2, sp
 8002830:	f7ff ffca 	bl	80027c8 <__swhatbuf_r>
 8002834:	9900      	ldr	r1, [sp, #0]
 8002836:	4605      	mov	r5, r0
 8002838:	4630      	mov	r0, r6
 800283a:	f7ff fa35 	bl	8001ca8 <_malloc_r>
 800283e:	b948      	cbnz	r0, 8002854 <__smakebuf_r+0x44>
 8002840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002844:	059a      	lsls	r2, r3, #22
 8002846:	d4ef      	bmi.n	8002828 <__smakebuf_r+0x18>
 8002848:	f023 0303 	bic.w	r3, r3, #3
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	81a3      	strh	r3, [r4, #12]
 8002852:	e7e3      	b.n	800281c <__smakebuf_r+0xc>
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <__smakebuf_r+0x7c>)
 8002856:	62b3      	str	r3, [r6, #40]	; 0x28
 8002858:	89a3      	ldrh	r3, [r4, #12]
 800285a:	6020      	str	r0, [r4, #0]
 800285c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002860:	81a3      	strh	r3, [r4, #12]
 8002862:	9b00      	ldr	r3, [sp, #0]
 8002864:	6120      	str	r0, [r4, #16]
 8002866:	6163      	str	r3, [r4, #20]
 8002868:	9b01      	ldr	r3, [sp, #4]
 800286a:	b15b      	cbz	r3, 8002884 <__smakebuf_r+0x74>
 800286c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002870:	4630      	mov	r0, r6
 8002872:	f000 f82d 	bl	80028d0 <_isatty_r>
 8002876:	b128      	cbz	r0, 8002884 <__smakebuf_r+0x74>
 8002878:	89a3      	ldrh	r3, [r4, #12]
 800287a:	f023 0303 	bic.w	r3, r3, #3
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	81a3      	strh	r3, [r4, #12]
 8002884:	89a3      	ldrh	r3, [r4, #12]
 8002886:	431d      	orrs	r5, r3
 8002888:	81a5      	strh	r5, [r4, #12]
 800288a:	e7cd      	b.n	8002828 <__smakebuf_r+0x18>
 800288c:	08001b05 	.word	0x08001b05

08002890 <memchr>:
 8002890:	b510      	push	{r4, lr}
 8002892:	b2c9      	uxtb	r1, r1
 8002894:	4402      	add	r2, r0
 8002896:	4290      	cmp	r0, r2
 8002898:	4603      	mov	r3, r0
 800289a:	d101      	bne.n	80028a0 <memchr+0x10>
 800289c:	2300      	movs	r3, #0
 800289e:	e003      	b.n	80028a8 <memchr+0x18>
 80028a0:	781c      	ldrb	r4, [r3, #0]
 80028a2:	3001      	adds	r0, #1
 80028a4:	428c      	cmp	r4, r1
 80028a6:	d1f6      	bne.n	8002896 <memchr+0x6>
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd10      	pop	{r4, pc}

080028ac <_fstat_r>:
 80028ac:	b538      	push	{r3, r4, r5, lr}
 80028ae:	2300      	movs	r3, #0
 80028b0:	4c06      	ldr	r4, [pc, #24]	; (80028cc <_fstat_r+0x20>)
 80028b2:	4605      	mov	r5, r0
 80028b4:	4608      	mov	r0, r1
 80028b6:	4611      	mov	r1, r2
 80028b8:	6023      	str	r3, [r4, #0]
 80028ba:	f7fe ff7a 	bl	80017b2 <_fstat>
 80028be:	1c43      	adds	r3, r0, #1
 80028c0:	d102      	bne.n	80028c8 <_fstat_r+0x1c>
 80028c2:	6823      	ldr	r3, [r4, #0]
 80028c4:	b103      	cbz	r3, 80028c8 <_fstat_r+0x1c>
 80028c6:	602b      	str	r3, [r5, #0]
 80028c8:	bd38      	pop	{r3, r4, r5, pc}
 80028ca:	bf00      	nop
 80028cc:	200001f8 	.word	0x200001f8

080028d0 <_isatty_r>:
 80028d0:	b538      	push	{r3, r4, r5, lr}
 80028d2:	2300      	movs	r3, #0
 80028d4:	4c05      	ldr	r4, [pc, #20]	; (80028ec <_isatty_r+0x1c>)
 80028d6:	4605      	mov	r5, r0
 80028d8:	4608      	mov	r0, r1
 80028da:	6023      	str	r3, [r4, #0]
 80028dc:	f7ff f8cc 	bl	8001a78 <_isatty>
 80028e0:	1c43      	adds	r3, r0, #1
 80028e2:	d102      	bne.n	80028ea <_isatty_r+0x1a>
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	b103      	cbz	r3, 80028ea <_isatty_r+0x1a>
 80028e8:	602b      	str	r3, [r5, #0]
 80028ea:	bd38      	pop	{r3, r4, r5, pc}
 80028ec:	200001f8 	.word	0x200001f8

080028f0 <_init>:
 80028f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f2:	bf00      	nop
 80028f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f6:	bc08      	pop	{r3}
 80028f8:	469e      	mov	lr, r3
 80028fa:	4770      	bx	lr

080028fc <_fini>:
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fe:	bf00      	nop
 8002900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002902:	bc08      	pop	{r3}
 8002904:	469e      	mov	lr, r3
 8002906:	4770      	bx	lr
