
stm32f4-rtc-fromgps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080050f8  080050f8  000150f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800535c  0800535c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800535c  0800535c  0001535c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005364  08005364  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800536c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000070  080053dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008f4  080053dc  000208f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9bd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000278d  00000000  00000000  0002ea5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb0  00000000  00000000  000311f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  00031da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002465f  00000000  00000000  00032808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7da  00000000  00000000  00056e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3bbe  00000000  00000000  00061641  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001351ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036dc  00000000  00000000  0013527c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080050e0 	.word	0x080050e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080050e0 	.word	0x080050e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	60da      	str	r2, [r3, #12]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	60da      	str	r2, [r3, #12]
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	f043 0220 	orr.w	r2, r3, #32
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	60da      	str	r2, [r3, #12]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	615a      	str	r2, [r3, #20]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) & (USARTx->DR));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3304      	adds	r3, #4
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000612:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <LL_DMA_EnableStream+0x3c>)
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4413      	add	r3, r2
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <LL_DMA_EnableStream+0x3c>)
 8000624:	683a      	ldr	r2, [r7, #0]
 8000626:	440a      	add	r2, r1
 8000628:	7812      	ldrb	r2, [r2, #0]
 800062a:	4611      	mov	r1, r2
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	440a      	add	r2, r1
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6013      	str	r3, [r2, #0]
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	0800521c 	.word	0x0800521c

08000648 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000654:	4a0d      	ldr	r2, [pc, #52]	; (800068c <LL_DMA_SetDataLength+0x44>)
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	4413      	add	r3, r2
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	0c1b      	lsrs	r3, r3, #16
 8000666:	041b      	lsls	r3, r3, #16
 8000668:	4908      	ldr	r1, [pc, #32]	; (800068c <LL_DMA_SetDataLength+0x44>)
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	440a      	add	r2, r1
 800066e:	7812      	ldrb	r2, [r2, #0]
 8000670:	4611      	mov	r1, r2
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	440a      	add	r2, r1
 8000676:	4611      	mov	r1, r2
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	4313      	orrs	r3, r2
 800067c:	604b      	str	r3, [r1, #4]
}
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	0800521c 	.word	0x0800521c

08000690 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <LL_DMA_SetMemoryAddress+0x2c>)
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	4413      	add	r3, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	4413      	add	r3, r2
 80006aa:	461a      	mov	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	60d3      	str	r3, [r2, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	0800521c 	.word	0x0800521c

080006c0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <LL_DMA_SetPeriphAddress+0x2c>)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	4413      	add	r3, r2
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	4413      	add	r3, r2
 80006da:	461a      	mov	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6093      	str	r3, [r2, #8]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	0800521c 	.word	0x0800521c

080006f0 <on_ubx_packet>:
static uint8_t _gps_sparser_buffer[500];
static ubx_sparser_ctx_t sparser_ctx;


static void on_ubx_packet(void * userarg, const ubx_any_packet_t * packet)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
	(void)userarg;

	switch (packet->pid)
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	f240 120d 	movw	r2, #269	; 0x10d
 8000702:	4293      	cmp	r3, r2
 8000704:	d00d      	beq.n	8000722 <on_ubx_packet+0x32>
 8000706:	f242 0201 	movw	r2, #8193	; 0x2001
 800070a:	4293      	cmp	r3, r2
 800070c:	d113      	bne.n	8000736 <on_ubx_packet+0x46>
	{
	case UBX_PID_NAV_TIMEGPS:
		printf("got gps_time packet: week %d, ms: %lu\r\n",
				packet->packet.gpstime.week,
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	889b      	ldrh	r3, [r3, #4]
		printf("got gps_time packet: week %d, ms: %lu\r\n",
 8000712:	4619      	mov	r1, r3
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	461a      	mov	r2, r3
 800071a:	480c      	ldr	r0, [pc, #48]	; (800074c <on_ubx_packet+0x5c>)
 800071c:	f004 f878 	bl	8004810 <iprintf>
				packet->packet.gpstime.tow_ms
		);
		break;
 8000720:	e00f      	b.n	8000742 <on_ubx_packet+0x52>

	case UBX_PID_TIM_TP:
		printf("got tim_tp packet: week %d, ms: %lu\r\n",
				packet->packet.timtp.week,
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	889b      	ldrh	r3, [r3, #4]
		printf("got tim_tp packet: week %d, ms: %lu\r\n",
 8000726:	4619      	mov	r1, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	461a      	mov	r2, r3
 800072e:	4808      	ldr	r0, [pc, #32]	; (8000750 <on_ubx_packet+0x60>)
 8000730:	f004 f86e 	bl	8004810 <iprintf>
				packet->packet.timtp.tow_ms
		);
		break;
 8000734:	e005      	b.n	8000742 <on_ubx_packet+0x52>

	default:
		printf("got packet! pid = 0x%04X\r\n", (int)packet->pid);
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <on_ubx_packet+0x64>)
 800073e:	f004 f867 	bl	8004810 <iprintf>
	}
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	080050f8 	.word	0x080050f8
 8000750:	08005120 	.word	0x08005120
 8000754:	08005148 	.word	0x08005148

08000758 <poll_gps_dma>:


static void poll_gps_dma()
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
	DMA_Stream_TypeDef * stream = __LL_DMA_GET_STREAM_INSTANCE(GPS_DMA, GPS_DMA_STREAM);
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <poll_gps_dma+0x84>)
 8000760:	60bb      	str	r3, [r7, #8]
	assert(stream);
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d105      	bne.n	8000774 <poll_gps_dma+0x1c>
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <poll_gps_dma+0x88>)
 800076a:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <poll_gps_dma+0x8c>)
 800076c:	2134      	movs	r1, #52	; 0x34
 800076e:	481e      	ldr	r0, [pc, #120]	; (80007e8 <poll_gps_dma+0x90>)
 8000770:	f003 fd24 	bl	80041bc <__assert_func>

	const int dma_head = (GPS_DMA_BUFFER_SIZE - stream->NDTR);
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800077c:	3304      	adds	r3, #4
 800077e:	607b      	str	r3, [r7, #4]

	int bytes_polled = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
	while (_gps_uart_dma_tail != dma_head)
 8000784:	e01a      	b.n	80007bc <poll_gps_dma+0x64>
	{
		uint8_t byte = _gps_uart_dma_buffer[_gps_uart_dma_tail];
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <poll_gps_dma+0x94>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a19      	ldr	r2, [pc, #100]	; (80007f0 <poll_gps_dma+0x98>)
 800078c:	5cd3      	ldrb	r3, [r2, r3]
 800078e:	70fb      	strb	r3, [r7, #3]
		ubx_sparser_consume_byte(&sparser_ctx, byte);
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	4619      	mov	r1, r3
 8000794:	4817      	ldr	r0, [pc, #92]	; (80007f4 <poll_gps_dma+0x9c>)
 8000796:	f000 fa37 	bl	8000c08 <ubx_sparser_consume_byte>

		_gps_uart_dma_tail++;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <poll_gps_dma+0x94>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <poll_gps_dma+0x94>)
 80007a2:	6013      	str	r3, [r2, #0]
		if (_gps_uart_dma_tail >= GPS_DMA_BUFFER_SIZE)
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <poll_gps_dma+0x94>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f240 52db 	movw	r2, #1499	; 0x5db
 80007ac:	4293      	cmp	r3, r2
 80007ae:	dd02      	ble.n	80007b6 <poll_gps_dma+0x5e>
			_gps_uart_dma_tail = 0;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <poll_gps_dma+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]

		bytes_polled++;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3301      	adds	r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
	while (_gps_uart_dma_tail != dma_head)
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <poll_gps_dma+0x94>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d1df      	bne.n	8000786 <poll_gps_dma+0x2e>
	}

	printf("dma polled %d, ubx_state = %d\r\n", bytes_polled, sparser_ctx.state);
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <poll_gps_dma+0x9c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	68f9      	ldr	r1, [r7, #12]
 80007ce:	480a      	ldr	r0, [pc, #40]	; (80007f8 <poll_gps_dma+0xa0>)
 80007d0:	f004 f81e 	bl	8004810 <iprintf>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40026088 	.word	0x40026088
 80007e0:	08005164 	.word	0x08005164
 80007e4:	08005224 	.word	0x08005224
 80007e8:	0800516c 	.word	0x0800516c
 80007ec:	20000668 	.word	0x20000668
 80007f0:	2000008c 	.word	0x2000008c
 80007f4:	20000860 	.word	0x20000860
 80007f8:	08005184 	.word	0x08005184

080007fc <app_main>:


int app_main()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	// для pritnf
	__HAL_UART_ENABLE(&huart1);
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <app_main+0x90>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	68da      	ldr	r2, [r3, #12]
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <app_main+0x90>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800080e:	60da      	str	r2, [r3, #12]

	// для GPS
	LL_USART_Disable(GPS_UART);
 8000810:	481f      	ldr	r0, [pc, #124]	; (8000890 <app_main+0x94>)
 8000812:	f7ff febd 	bl	8000590 <LL_USART_Disable>
	LL_DMA_SetPeriphAddress(GPS_DMA, GPS_DMA_STREAM, LL_USART_DMA_GetRegAddr(GPS_UART));
 8000816:	481e      	ldr	r0, [pc, #120]	; (8000890 <app_main+0x94>)
 8000818:	f7ff feea 	bl	80005f0 <LL_USART_DMA_GetRegAddr>
 800081c:	4603      	mov	r3, r0
 800081e:	461a      	mov	r2, r3
 8000820:	2105      	movs	r1, #5
 8000822:	481c      	ldr	r0, [pc, #112]	; (8000894 <app_main+0x98>)
 8000824:	f7ff ff4c 	bl	80006c0 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(GPS_DMA, GPS_DMA_STREAM, (uint32_t)&_gps_uart_dma_buffer);
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <app_main+0x9c>)
 800082a:	461a      	mov	r2, r3
 800082c:	2105      	movs	r1, #5
 800082e:	4819      	ldr	r0, [pc, #100]	; (8000894 <app_main+0x98>)
 8000830:	f7ff ff2e 	bl	8000690 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(GPS_DMA, GPS_DMA_STREAM, sizeof(_gps_uart_dma_buffer));
 8000834:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000838:	2105      	movs	r1, #5
 800083a:	4816      	ldr	r0, [pc, #88]	; (8000894 <app_main+0x98>)
 800083c:	f7ff ff04 	bl	8000648 <LL_DMA_SetDataLength>
	_gps_uart_dma_tail = 0;
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <app_main+0xa0>)
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]


	LL_DMA_EnableStream(GPS_DMA, GPS_DMA_STREAM);
 8000846:	2105      	movs	r1, #5
 8000848:	4812      	ldr	r0, [pc, #72]	; (8000894 <app_main+0x98>)
 800084a:	f7ff fedd 	bl	8000608 <LL_DMA_EnableStream>
	LL_USART_EnableDMAReq_RX(GPS_UART);
 800084e:	4810      	ldr	r0, [pc, #64]	; (8000890 <app_main+0x94>)
 8000850:	f7ff febe 	bl	80005d0 <LL_USART_EnableDMAReq_RX>
	LL_USART_EnableIT_RXNE(GPS_UART);
 8000854:	480e      	ldr	r0, [pc, #56]	; (8000890 <app_main+0x94>)
 8000856:	f7ff feab 	bl	80005b0 <LL_USART_EnableIT_RXNE>
	LL_USART_Enable(GPS_UART);
 800085a:	480d      	ldr	r0, [pc, #52]	; (8000890 <app_main+0x94>)
 800085c:	f7ff fe88 	bl	8000570 <LL_USART_Enable>

	ubx_sparser_reset(&sparser_ctx);
 8000860:	480f      	ldr	r0, [pc, #60]	; (80008a0 <app_main+0xa4>)
 8000862:	f000 f984 	bl	8000b6e <ubx_sparser_reset>
	ubx_sparser_set_pbuffer(&sparser_ctx, _gps_sparser_buffer, sizeof(_gps_sparser_buffer));
 8000866:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800086a:	490e      	ldr	r1, [pc, #56]	; (80008a4 <app_main+0xa8>)
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <app_main+0xa4>)
 800086e:	f000 f9a7 	bl	8000bc0 <ubx_sparser_set_pbuffer>
	ubx_sparser_set_packet_callback(&sparser_ctx, on_ubx_packet, NULL);
 8000872:	2200      	movs	r2, #0
 8000874:	490c      	ldr	r1, [pc, #48]	; (80008a8 <app_main+0xac>)
 8000876:	480a      	ldr	r0, [pc, #40]	; (80008a0 <app_main+0xa4>)
 8000878:	f000 f98f 	bl	8000b9a <ubx_sparser_set_packet_callback>


	while(1)
	{
		poll_gps_dma();
 800087c:	f7ff ff6c 	bl	8000758 <poll_gps_dma>
		HAL_Delay(1000);
 8000880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000884:	f001 f88e 	bl	80019a4 <HAL_Delay>
		poll_gps_dma();
 8000888:	e7f8      	b.n	800087c <app_main+0x80>
 800088a:	bf00      	nop
 800088c:	2000088c 	.word	0x2000088c
 8000890:	40004400 	.word	0x40004400
 8000894:	40026000 	.word	0x40026000
 8000898:	2000008c 	.word	0x2000008c
 800089c:	20000668 	.word	0x20000668
 80008a0:	20000860 	.word	0x20000860
 80008a4:	2000066c 	.word	0x2000066c
 80008a8:	080006f1 	.word	0x080006f1

080008ac <_write>:
#include "main.h"



int _write(int file, char *ptr, int len)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008c0:	68b9      	ldr	r1, [r7, #8]
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <_write+0x28>)
 80008c4:	f002 fb08 	bl	8002ed8 <HAL_UART_Transmit>
	return len;
 80008c8:	687b      	ldr	r3, [r7, #4]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000088c 	.word	0x2000088c

080008d8 <ubx_packet_pid>:

#include <errno.h>


uint16_t ubx_packet_pid(const uint8_t * packet_header)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	return ((uint16_t)packet_header[1] << 8) | packet_header[0];
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3301      	adds	r3, #1
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	b29b      	uxth	r3, r3
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <ubx_packet_payload_size>:


uint16_t ubx_packet_payload_size(const uint8_t * packet_header)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
	return ((uint16_t)packet_header[3] << 8) | (packet_header[2]);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3303      	adds	r3, #3
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	021b      	lsls	r3, r3, #8
 8000912:	b21a      	sxth	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3302      	adds	r3, #2
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b21b      	sxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b21b      	sxth	r3, r3
 8000920:	b29b      	uxth	r3, r3
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <_read_u32>:
}



static uint32_t _read_u32(const uint8_t * data)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
	return	  (uint32_t)data[3] << 3*8
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3303      	adds	r3, #3
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	061a      	lsls	r2, r3, #24
			| (uint32_t)data[2] << 2*8
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3302      	adds	r3, #2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	041b      	lsls	r3, r3, #16
 8000946:	431a      	orrs	r2, r3
			| (uint32_t)data[1] << 1*8
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3301      	adds	r3, #1
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	021b      	lsls	r3, r3, #8
 8000950:	4313      	orrs	r3, r2
			| (uint32_t)data[0] << 0*8
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	7812      	ldrb	r2, [r2, #0]
 8000956:	4313      	orrs	r3, r2
	;
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <_read_u16>:


static uint32_t _read_u16(const uint8_t * data)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	return	  (uint16_t)data[1] << 1*8
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3301      	adds	r3, #1
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	021b      	lsls	r3, r3, #8
			| (uint16_t)data[0] << 0*8
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	7812      	ldrb	r2, [r2, #0]
 8000978:	4313      	orrs	r3, r2
	;
}
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <_ubx_parse_nav_sol>:


//TODO: дописать
static void _ubx_parse_nav_sol(const uint8_t * payload, ubx_any_packet_t * packet_)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]
	// обрезание пакета до 48 байт т.к. дальше идут зарезервированные поля
	//сбор mavlink пакета
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_ubx_parse_tim_tp>:


// время GPS
static void _ubx_parse_tim_tp(const uint8_t * payload, ubx_any_packet_t * packet_)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
	ubx_timtp_packet_t * packet = &packet_->packet.timtp;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	3304      	adds	r3, #4
 80009aa:	60fb      	str	r3, [r7, #12]

	packet->tow_ms = _read_u32(payload);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ffbe 	bl	800092e <_read_u32>
 80009b2:	4602      	mov	r2, r0
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	605a      	str	r2, [r3, #4]
	packet->week = _read_u16(payload + 12);		// +12 т.к. время в неделях с 12 по 14 байт
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	330c      	adds	r3, #12
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ffd1 	bl	8000964 <_read_u16>
 80009c2:	4603      	mov	r3, r0
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	801a      	strh	r2, [r3, #0]
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <_ubx_parse_nav_timegps>:


static void _ubx_parse_nav_timegps(const uint8_t * payload, ubx_any_packet_t * packet_)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	6039      	str	r1, [r7, #0]
	ubx_gpstime_packet_t * packet = &packet_->packet.gpstime;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	3304      	adds	r3, #4
 80009e0:	60fb      	str	r3, [r7, #12]

	packet->tow_ms = _read_u32(payload);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ffa3 	bl	800092e <_read_u32>
 80009e8:	4602      	mov	r2, r0
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	605a      	str	r2, [r3, #4]
	packet->week = _read_u16(payload + 8);		// +8 т.к. время в неделях с 8 по 10 байт
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3308      	adds	r3, #8
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ffb6 	bl	8000964 <_read_u16>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	801a      	strh	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <ubx_parse_any_packet>:


int ubx_parse_any_packet(const uint8_t * packet_start, ubx_any_packet_t * packet)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
	uint16_t pid = ubx_packet_pid(packet_start);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ff60 	bl	80008d8 <ubx_packet_pid>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	82fb      	strh	r3, [r7, #22]
	const uint8_t * payload_start = packet_start + UBX_HEADER_SIZE;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3304      	adds	r3, #4
 8000a20:	613b      	str	r3, [r7, #16]
	int rc = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]

	switch (pid)
 8000a26:	8afb      	ldrh	r3, [r7, #22]
 8000a28:	f240 6201 	movw	r2, #1537	; 0x601
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d008      	beq.n	8000a42 <ubx_parse_any_packet+0x3a>
 8000a30:	f242 0201 	movw	r2, #8193	; 0x2001
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d009      	beq.n	8000a4c <ubx_parse_any_packet+0x44>
 8000a38:	f240 120d 	movw	r2, #269	; 0x10d
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d00a      	beq.n	8000a56 <ubx_parse_any_packet+0x4e>
 8000a40:	e00e      	b.n	8000a60 <ubx_parse_any_packet+0x58>
	{
	case UBX_PID_NAV_SOL:
		_ubx_parse_nav_sol(payload_start, packet);
 8000a42:	6839      	ldr	r1, [r7, #0]
 8000a44:	6938      	ldr	r0, [r7, #16]
 8000a46:	f7ff ff9e 	bl	8000986 <_ubx_parse_nav_sol>
		break;
 8000a4a:	e00f      	b.n	8000a6c <ubx_parse_any_packet+0x64>

	case UBX_PID_NAV_TIMEGPS:
		_ubx_parse_nav_timegps(payload_start, packet);
 8000a4c:	6839      	ldr	r1, [r7, #0]
 8000a4e:	6938      	ldr	r0, [r7, #16]
 8000a50:	f7ff ffbf 	bl	80009d2 <_ubx_parse_nav_timegps>
		break;
 8000a54:	e00a      	b.n	8000a6c <ubx_parse_any_packet+0x64>

	case UBX_PID_TIM_TP:
		_ubx_parse_tim_tp(payload_start, packet);
 8000a56:	6839      	ldr	r1, [r7, #0]
 8000a58:	6938      	ldr	r0, [r7, #16]
 8000a5a:	f7ff ff9f 	bl	800099c <_ubx_parse_tim_tp>
		break;
 8000a5e:	e005      	b.n	8000a6c <ubx_parse_any_packet+0x64>

	default:
		rc = -ENOSYS;
 8000a60:	f06f 0357 	mvn.w	r3, #87	; 0x57
 8000a64:	60fb      	str	r3, [r7, #12]
		return -ENOSYS;
 8000a66:	f06f 0357 	mvn.w	r3, #87	; 0x57
 8000a6a:	e003      	b.n	8000a74 <ubx_parse_any_packet+0x6c>
	};

	packet->pid = pid;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	8afa      	ldrh	r2, [r7, #22]
 8000a70:	801a      	strh	r2, [r3, #0]
	return rc;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_check_packet_header>:
	UBX_SPARSER_STATE_PACKET_ACCUM,
} ubx_sparser_state_t;


static int _check_packet_header(ubx_sparser_ctx_t * ctx)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	uint16_t length = ubx_packet_payload_size(ctx->pbuffer);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff3a 	bl	8000902 <ubx_packet_payload_size>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	81fb      	strh	r3, [r7, #14]

	if (length >= ctx->pbuffer_capacity)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	899b      	ldrh	r3, [r3, #12]
 8000a96:	89fa      	ldrh	r2, [r7, #14]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d302      	bcc.n	8000aa2 <_check_packet_header+0x26>
		return -EMSGSIZE; // Пакет слишком большой
 8000a9c:	f06f 0379 	mvn.w	r3, #121	; 0x79
 8000aa0:	e000      	b.n	8000aa4 <_check_packet_header+0x28>

	return 0; // в остальном все ок
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_check_whole_packet>:


static int _check_whole_packet(ubx_sparser_ctx_t * ctx)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b087      	sub	sp, #28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	const uint8_t actual_crc_a = ctx->pbuffer[ctx->pbuffer_size - 2];
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689a      	ldr	r2, [r3, #8]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	3b02      	subs	r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	73fb      	strb	r3, [r7, #15]
	const uint8_t actual_crc_b = ctx->pbuffer[ctx->pbuffer_size - 1];
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689a      	ldr	r2, [r3, #8]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	4413      	add	r3, r2
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	73bb      	strb	r3, [r7, #14]

	int crc_check_len = ctx->pbuffer_size - 2;		//контрольная сумма считается без crc полей
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	691b      	ldr	r3, [r3, #16]
 8000ad8:	3b02      	subs	r3, #2
 8000ada:	60bb      	str	r3, [r7, #8]

	uint8_t crc_a = 0, crc_b = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	75fb      	strb	r3, [r7, #23]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < crc_check_len; i++)		//алгоритм подсчета контрольной суммы
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	e00e      	b.n	8000b08 <_check_whole_packet+0x5c>
	{
		crc_a += ctx->pbuffer[i];
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4413      	add	r3, r2
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	7dfb      	ldrb	r3, [r7, #23]
 8000af6:	4413      	add	r3, r2
 8000af8:	75fb      	strb	r3, [r7, #23]
		crc_b += crc_a;
 8000afa:	7dba      	ldrb	r2, [r7, #22]
 8000afc:	7dfb      	ldrb	r3, [r7, #23]
 8000afe:	4413      	add	r3, r2
 8000b00:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < crc_check_len; i++)		//алгоритм подсчета контрольной суммы
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	3301      	adds	r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dbec      	blt.n	8000aea <_check_whole_packet+0x3e>
	}

	if (actual_crc_a == crc_a && actual_crc_b == crc_b)
 8000b10:	7bfa      	ldrb	r2, [r7, #15]
 8000b12:	7dfb      	ldrb	r3, [r7, #23]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d105      	bne.n	8000b24 <_check_whole_packet+0x78>
 8000b18:	7bba      	ldrb	r2, [r7, #14]
 8000b1a:	7dbb      	ldrb	r3, [r7, #22]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d101      	bne.n	8000b24 <_check_whole_packet+0x78>
		return 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	e001      	b.n	8000b28 <_check_whole_packet+0x7c>
	else
		return -EBADMSG;
 8000b24:	f06f 034c 	mvn.w	r3, #76	; 0x4c
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	371c      	adds	r7, #28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <_dispatch_packet>:


static int _dispatch_packet(ubx_sparser_ctx_t * ctx)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	ubx_any_packet_t packet;

	int rc = ubx_parse_any_packet(ctx->pbuffer, &packet);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	f107 0208 	add.w	r2, r7, #8
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff5e 	bl	8000a08 <ubx_parse_any_packet>
 8000b4c:	6178      	str	r0, [r7, #20]
	if (0 == rc)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d107      	bne.n	8000b64 <_dispatch_packet+0x30>
	{
		ctx->packet_callback(ctx->packet_callback_userarg, &packet);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	69d2      	ldr	r2, [r2, #28]
 8000b5c:	f107 0108 	add.w	r1, r7, #8
 8000b60:	4610      	mov	r0, r2
 8000b62:	4798      	blx	r3
	}
	return rc;
 8000b64:	697b      	ldr	r3, [r7, #20]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <ubx_sparser_reset>:

// ========================================
// Публичные функции
// ========================================
void ubx_sparser_reset(ubx_sparser_ctx_t * ctx)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	ctx->pbuffer_size = 0;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
	ctx->expected_packet_size = 0;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
	ctx->sw_buffer = 0;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	809a      	strh	r2, [r3, #4]
	ctx->state = UBX_SPARSER_STATE_SYNC_SEARCH;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <ubx_sparser_set_packet_callback>:


void ubx_sparser_set_packet_callback(ubx_sparser_ctx_t * ctx, ubx_sparser_packet_callback_t callback,
		void * userarg
){
 8000b9a:	b480      	push	{r7}
 8000b9c:	b085      	sub	sp, #20
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
	ctx->packet_callback = callback;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	619a      	str	r2, [r3, #24]
	ctx->packet_callback_userarg = userarg;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	61da      	str	r2, [r3, #28]

}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <ubx_sparser_set_pbuffer>:


void ubx_sparser_set_pbuffer(ubx_sparser_ctx_t * ctx, uint8_t * pbuffer, uint16_t pbuffer_capacity)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	80fb      	strh	r3, [r7, #6]
	assert(ctx->state == UBX_SPARSER_STATE_SYNC_SEARCH);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d005      	beq.n	8000be2 <ubx_sparser_set_pbuffer+0x22>
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <ubx_sparser_set_pbuffer+0x3c>)
 8000bd8:	4a09      	ldr	r2, [pc, #36]	; (8000c00 <ubx_sparser_set_pbuffer+0x40>)
 8000bda:	215b      	movs	r1, #91	; 0x5b
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <ubx_sparser_set_pbuffer+0x44>)
 8000bde:	f003 faed 	bl	80041bc <__assert_func>

	ctx->pbuffer = pbuffer;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	609a      	str	r2, [r3, #8]
	ctx->pbuffer_capacity = pbuffer_capacity;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	88fa      	ldrh	r2, [r7, #6]
 8000bec:	819a      	strh	r2, [r3, #12]
	ctx->pbuffer_size = 0;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	080051a4 	.word	0x080051a4
 8000c00:	08005234 	.word	0x08005234
 8000c04:	080051d0 	.word	0x080051d0

08000c08 <ubx_sparser_consume_byte>:


void ubx_sparser_consume_byte(ubx_sparser_ctx_t * ctx, uint8_t byte)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
	switch (ctx->state)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d01c      	beq.n	8000c56 <ubx_sparser_consume_byte+0x4e>
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d051      	beq.n	8000cc4 <ubx_sparser_consume_byte+0xbc>
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d000      	beq.n	8000c26 <ubx_sparser_consume_byte+0x1e>

			ctx->sw_buffer = 0;
			ctx->state = UBX_SPARSER_STATE_SYNC_SEARCH;
		break;
	}; // case
}
 8000c24:	e081      	b.n	8000d2a <ubx_sparser_consume_byte+0x122>
			ctx->sw_buffer = (ctx->sw_buffer << 8 | byte);		//записываем синхрослово
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	889b      	ldrh	r3, [r3, #4]
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	78fb      	ldrb	r3, [r7, #3]
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	809a      	strh	r2, [r3, #4]
			if (ctx->sw_buffer == UBX_SYNCWORD_VALUE)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	889b      	ldrh	r3, [r3, #4]
 8000c40:	f24b 5262 	movw	r2, #46434	; 0xb562
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d16b      	bne.n	8000d20 <ubx_sparser_consume_byte+0x118>
				ctx->pbuffer_size = 0;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
				ctx->state = UBX_SPARSER_STATE_HEADER_ACCUM;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2201      	movs	r2, #1
 8000c52:	601a      	str	r2, [r3, #0]
		break;
 8000c54:	e064      	b.n	8000d20 <ubx_sparser_consume_byte+0x118>
			assert(ctx->pbuffer_size < ctx->pbuffer_capacity);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	8992      	ldrh	r2, [r2, #12]
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d305      	bcc.n	8000c6e <ubx_sparser_consume_byte+0x66>
 8000c62:	4b34      	ldr	r3, [pc, #208]	; (8000d34 <ubx_sparser_consume_byte+0x12c>)
 8000c64:	4a34      	ldr	r2, [pc, #208]	; (8000d38 <ubx_sparser_consume_byte+0x130>)
 8000c66:	2171      	movs	r1, #113	; 0x71
 8000c68:	4834      	ldr	r0, [pc, #208]	; (8000d3c <ubx_sparser_consume_byte+0x134>)
 8000c6a:	f003 faa7 	bl	80041bc <__assert_func>
			ctx->pbuffer[ctx->pbuffer_size] = byte;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	4413      	add	r3, r2
 8000c78:	78fa      	ldrb	r2, [r7, #3]
 8000c7a:	701a      	strb	r2, [r3, #0]
			ctx->pbuffer_size++;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	611a      	str	r2, [r3, #16]
			if (ctx->pbuffer_size < UBX_HEADER_SIZE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d94a      	bls.n	8000d24 <ubx_sparser_consume_byte+0x11c>
			if (0 == _check_packet_header(ctx))
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fef4 	bl	8000a7c <_check_packet_header>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10d      	bne.n	8000cb6 <ubx_sparser_consume_byte+0xae>
				ctx->expected_packet_size = ubx_packet_payload_size(ctx->pbuffer) + UBX_HEADER_SIZE + UBX_CRC_SIZE;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fe2f 	bl	8000902 <ubx_packet_payload_size>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	3306      	adds	r3, #6
 8000ca8:	461a      	mov	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	615a      	str	r2, [r3, #20]
				ctx->state = UBX_SPARSER_STATE_PACKET_ACCUM;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	601a      	str	r2, [r3, #0]
		break;
 8000cb4:	e039      	b.n	8000d2a <ubx_sparser_consume_byte+0x122>
				ctx->sw_buffer = 0;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	809a      	strh	r2, [r3, #4]
				ctx->state = UBX_SPARSER_STATE_SYNC_SEARCH;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
		break;
 8000cc2:	e032      	b.n	8000d2a <ubx_sparser_consume_byte+0x122>
			assert(ctx->pbuffer_size < ctx->pbuffer_capacity);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	8992      	ldrh	r2, [r2, #12]
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d305      	bcc.n	8000cdc <ubx_sparser_consume_byte+0xd4>
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <ubx_sparser_consume_byte+0x12c>)
 8000cd2:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <ubx_sparser_consume_byte+0x130>)
 8000cd4:	2189      	movs	r1, #137	; 0x89
 8000cd6:	4819      	ldr	r0, [pc, #100]	; (8000d3c <ubx_sparser_consume_byte+0x134>)
 8000cd8:	f003 fa70 	bl	80041bc <__assert_func>
			ctx->pbuffer[ctx->pbuffer_size] = byte;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	78fa      	ldrb	r2, [r7, #3]
 8000ce8:	701a      	strb	r2, [r3, #0]
			ctx->pbuffer_size++;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	691b      	ldr	r3, [r3, #16]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	611a      	str	r2, [r3, #16]
			if (ctx->pbuffer_size < ctx->expected_packet_size)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d313      	bcc.n	8000d28 <ubx_sparser_consume_byte+0x120>
			if (0 == _check_whole_packet(ctx))
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fed3 	bl	8000aac <_check_whole_packet>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <ubx_sparser_consume_byte+0x10a>
				_dispatch_packet(ctx);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff11 	bl	8000b34 <_dispatch_packet>
			ctx->sw_buffer = 0;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	809a      	strh	r2, [r3, #4]
			ctx->state = UBX_SPARSER_STATE_SYNC_SEARCH;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
		break;
 8000d1e:	e004      	b.n	8000d2a <ubx_sparser_consume_byte+0x122>
		break;
 8000d20:	bf00      	nop
 8000d22:	e002      	b.n	8000d2a <ubx_sparser_consume_byte+0x122>
				break;
 8000d24:	bf00      	nop
 8000d26:	e000      	b.n	8000d2a <ubx_sparser_consume_byte+0x122>
				break;
 8000d28:	bf00      	nop
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	080051f0 	.word	0x080051f0
 8000d38:	0800524c 	.word	0x0800524c
 8000d3c:	080051d0 	.word	0x080051d0

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	; (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	; (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	; (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	; 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <LL_USART_Enable>:
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60da      	str	r2, [r3, #12]
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <LL_USART_ConfigAsyncMode>:
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	615a      	str	r2, [r3, #20]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eac:	4907      	ldr	r1, [pc, #28]	; (8000ecc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000edc:	4907      	ldr	r1, [pc, #28]	; (8000efc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4013      	ands	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	40023800 	.word	0x40023800

08000f00 <LL_DMA_SetDataTransferDirection>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <LL_DMA_SetDataTransferDirection+0x44>)
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4413      	add	r3, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4413      	add	r3, r2
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000f20:	4908      	ldr	r1, [pc, #32]	; (8000f44 <LL_DMA_SetDataTransferDirection+0x44>)
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	440b      	add	r3, r1
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	440b      	add	r3, r1
 8000f2e:	4619      	mov	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	600b      	str	r3, [r1, #0]
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	08005268 	.word	0x08005268

08000f48 <LL_DMA_SetMode>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <LL_DMA_SetMode+0x44>)
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	4413      	add	r3, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4413      	add	r3, r2
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000f68:	4908      	ldr	r1, [pc, #32]	; (8000f8c <LL_DMA_SetMode+0x44>)
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	440b      	add	r3, r1
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	440b      	add	r3, r1
 8000f76:	4619      	mov	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	600b      	str	r3, [r1, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	08005268 	.word	0x08005268

08000f90 <LL_DMA_SetPeriphIncMode>:
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000fb0:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	440b      	add	r3, r1
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	600b      	str	r3, [r1, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	08005268 	.word	0x08005268

08000fd8 <LL_DMA_SetMemoryIncMode>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	; (800101c <LL_DMA_SetMemoryIncMode+0x44>)
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ff8:	4908      	ldr	r1, [pc, #32]	; (800101c <LL_DMA_SetMemoryIncMode+0x44>)
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	440b      	add	r3, r1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	440b      	add	r3, r1
 8001006:	4619      	mov	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4313      	orrs	r3, r2
 800100c:	600b      	str	r3, [r1, #0]
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	08005268 	.word	0x08005268

08001020 <LL_DMA_SetPeriphSize>:
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <LL_DMA_SetPeriphSize+0x44>)
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4413      	add	r3, r2
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8001040:	4908      	ldr	r1, [pc, #32]	; (8001064 <LL_DMA_SetPeriphSize+0x44>)
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	440b      	add	r3, r1
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	440b      	add	r3, r1
 800104e:	4619      	mov	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	08005268 	.word	0x08005268

08001068 <LL_DMA_SetMemorySize>:
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <LL_DMA_SetMemorySize+0x44>)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	4413      	add	r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4413      	add	r3, r2
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001088:	4908      	ldr	r1, [pc, #32]	; (80010ac <LL_DMA_SetMemorySize+0x44>)
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	440b      	add	r3, r1
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	440b      	add	r3, r1
 8001096:	4619      	mov	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4313      	orrs	r3, r2
 800109c:	600b      	str	r3, [r1, #0]
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	08005268 	.word	0x08005268

080010b0 <LL_DMA_SetStreamPriorityLevel>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	4413      	add	r3, r2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010d0:	4908      	ldr	r1, [pc, #32]	; (80010f4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	440b      	add	r3, r1
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	440b      	add	r3, r1
 80010de:	4619      	mov	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	08005268 	.word	0x08005268

080010f8 <LL_DMA_SetChannelSelection>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <LL_DMA_SetChannelSelection+0x44>)
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4413      	add	r3, r2
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001118:	4908      	ldr	r1, [pc, #32]	; (800113c <LL_DMA_SetChannelSelection+0x44>)
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	440b      	add	r3, r1
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	440b      	add	r3, r1
 8001126:	4619      	mov	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4313      	orrs	r3, r2
 800112c:	600b      	str	r3, [r1, #0]
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	08005268 	.word	0x08005268

08001140 <LL_DMA_DisableFifoMode>:
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800114a:	4a0c      	ldr	r2, [pc, #48]	; (800117c <LL_DMA_DisableFifoMode+0x3c>)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	4413      	add	r3, r2
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	4908      	ldr	r1, [pc, #32]	; (800117c <LL_DMA_DisableFifoMode+0x3c>)
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	440a      	add	r2, r1
 8001160:	7812      	ldrb	r2, [r2, #0]
 8001162:	4611      	mov	r1, r2
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	440a      	add	r2, r1
 8001168:	f023 0304 	bic.w	r3, r3, #4
 800116c:	6153      	str	r3, [r2, #20]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	08005268 	.word	0x08005268

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001184:	f000 fb9c 	bl	80018c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001188:	f000 f80e 	bl	80011a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118c:	f000 f9bc 	bl	8001508 <MX_GPIO_Init>
  MX_DMA_Init();
 8001190:	f000 f992 	bl	80014b8 <MX_DMA_Init>
  MX_RTC_Init();
 8001194:	f000 f88a 	bl	80012ac <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001198:	f000 f8e2 	bl	8001360 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800119c:	f000 f90a 	bl	80013b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 80011a0:	f7ff fb2c 	bl	80007fc <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <main+0x24>
	...

080011a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b098      	sub	sp, #96	; 0x60
 80011ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b2:	2230      	movs	r2, #48	; 0x30
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 f85a 	bl	8004270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <SystemClock_Config+0xfc>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a30      	ldr	r2, [pc, #192]	; (80012a4 <SystemClock_Config+0xfc>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <SystemClock_Config+0xfc>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <SystemClock_Config+0x100>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a2a      	ldr	r2, [pc, #168]	; (80012a8 <SystemClock_Config+0x100>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <SystemClock_Config+0x100>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001212:	2306      	movs	r3, #6
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001216:	2301      	movs	r3, #1
 8001218:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121a:	2301      	movs	r3, #1
 800121c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121e:	2310      	movs	r3, #16
 8001220:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	2302      	movs	r3, #2
 8001224:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001226:	2300      	movs	r3, #0
 8001228:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800122a:	2308      	movs	r3, #8
 800122c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800122e:	23a8      	movs	r3, #168	; 0xa8
 8001230:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001232:	2302      	movs	r3, #2
 8001234:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001236:	2304      	movs	r3, #4
 8001238:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fe52 	bl	8001ee8 <HAL_RCC_OscConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800124a:	f000 f993 	bl	8001574 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124e:	230f      	movs	r3, #15
 8001250:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001252:	2302      	movs	r3, #2
 8001254:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800125a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2105      	movs	r1, #5
 800126c:	4618      	mov	r0, r3
 800126e:	f001 f8ab 	bl	80023c8 <HAL_RCC_ClockConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001278:	f000 f97c 	bl	8001574 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800127c:	2302      	movs	r3, #2
 800127e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001284:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fa8e 	bl	80027ac <HAL_RCCEx_PeriphCLKConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001296:	f000 f96d 	bl	8001574 <Error_Handler>
  }
}
 800129a:	bf00      	nop
 800129c:	3760      	adds	r7, #96	; 0x60
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40007000 	.word	0x40007000

080012ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012c0:	2300      	movs	r3, #0
 80012c2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <MX_RTC_Init+0xac>)
 80012c6:	4a25      	ldr	r2, [pc, #148]	; (800135c <MX_RTC_Init+0xb0>)
 80012c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <MX_RTC_Init+0xac>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <MX_RTC_Init+0xac>)
 80012d2:	227f      	movs	r2, #127	; 0x7f
 80012d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <MX_RTC_Init+0xac>)
 80012d8:	22ff      	movs	r2, #255	; 0xff
 80012da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012dc:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <MX_RTC_Init+0xac>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <MX_RTC_Init+0xac>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <MX_RTC_Init+0xac>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012ee:	481a      	ldr	r0, [pc, #104]	; (8001358 <MX_RTC_Init+0xac>)
 80012f0:	f001 fb3e 	bl	8002970 <HAL_RTC_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80012fa:	f000 f93b 	bl	8001574 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80012fe:	2300      	movs	r3, #0
 8001300:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001302:	2300      	movs	r3, #0
 8001304:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001306:	2300      	movs	r3, #0
 8001308:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2201      	movs	r2, #1
 8001316:	4619      	mov	r1, r3
 8001318:	480f      	ldr	r0, [pc, #60]	; (8001358 <MX_RTC_Init+0xac>)
 800131a:	f001 fbba 	bl	8002a92 <HAL_RTC_SetTime>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001324:	f000 f926 	bl	8001574 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001328:	2301      	movs	r3, #1
 800132a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800132c:	2301      	movs	r3, #1
 800132e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001330:	2301      	movs	r3, #1
 8001332:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001334:	2300      	movs	r3, #0
 8001336:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	2201      	movs	r2, #1
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_RTC_Init+0xac>)
 8001340:	f001 fc64 	bl	8002c0c <HAL_RTC_SetDate>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800134a:	f000 f913 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200008cc 	.word	0x200008cc
 800135c:	40002800 	.word	0x40002800

08001360 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <MX_USART1_UART_Init+0x50>)
 8001368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001398:	f001 fd51 	bl	8002e3e <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013a2:	f000 f8e7 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000088c 	.word	0x2000088c
 80013b0:	40011000 	.word	0x40011000

080013b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	; 0x38
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80013de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80013e2:	f7ff fd75 	bl	8000ed0 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f7ff fd5a 	bl	8000ea0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80013ec:	230c      	movs	r3, #12
 80013ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013f0:	2302      	movs	r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001400:	2307      	movs	r3, #7
 8001402:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	4619      	mov	r1, r3
 8001408:	4828      	ldr	r0, [pc, #160]	; (80014ac <MX_USART2_UART_Init+0xf8>)
 800140a:	f002 faca 	bl	80039a2 <LL_GPIO_Init>

  /* USART2 DMA Init */
  
  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 800140e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001412:	2105      	movs	r1, #5
 8001414:	4826      	ldr	r0, [pc, #152]	; (80014b0 <MX_USART2_UART_Init+0xfc>)
 8001416:	f7ff fe6f 	bl	80010f8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800141a:	2200      	movs	r2, #0
 800141c:	2105      	movs	r1, #5
 800141e:	4824      	ldr	r0, [pc, #144]	; (80014b0 <MX_USART2_UART_Init+0xfc>)
 8001420:	f7ff fd6e 	bl	8000f00 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_MEDIUM);
 8001424:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001428:	2105      	movs	r1, #5
 800142a:	4821      	ldr	r0, [pc, #132]	; (80014b0 <MX_USART2_UART_Init+0xfc>)
 800142c:	f7ff fe40 	bl	80010b0 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_CIRCULAR);
 8001430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001434:	2105      	movs	r1, #5
 8001436:	481e      	ldr	r0, [pc, #120]	; (80014b0 <MX_USART2_UART_Init+0xfc>)
 8001438:	f7ff fd86 	bl	8000f48 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 800143c:	2200      	movs	r2, #0
 800143e:	2105      	movs	r1, #5
 8001440:	481b      	ldr	r0, [pc, #108]	; (80014b0 <MX_USART2_UART_Init+0xfc>)
 8001442:	f7ff fda5 	bl	8000f90 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8001446:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800144a:	2105      	movs	r1, #5
 800144c:	4818      	ldr	r0, [pc, #96]	; (80014b0 <MX_USART2_UART_Init+0xfc>)
 800144e:	f7ff fdc3 	bl	8000fd8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8001452:	2200      	movs	r2, #0
 8001454:	2105      	movs	r1, #5
 8001456:	4816      	ldr	r0, [pc, #88]	; (80014b0 <MX_USART2_UART_Init+0xfc>)
 8001458:	f7ff fde2 	bl	8001020 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 800145c:	2200      	movs	r2, #0
 800145e:	2105      	movs	r1, #5
 8001460:	4813      	ldr	r0, [pc, #76]	; (80014b0 <MX_USART2_UART_Init+0xfc>)
 8001462:	f7ff fe01 	bl	8001068 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 8001466:	2105      	movs	r1, #5
 8001468:	4811      	ldr	r0, [pc, #68]	; (80014b0 <MX_USART2_UART_Init+0xfc>)
 800146a:	f7ff fe69 	bl	8001140 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800146e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001472:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800147c:	2300      	movs	r3, #0
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001480:	230c      	movs	r3, #12
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001484:	2300      	movs	r3, #0
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001488:	2300      	movs	r3, #0
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4808      	ldr	r0, [pc, #32]	; (80014b4 <MX_USART2_UART_Init+0x100>)
 8001494:	f002 fe12 	bl	80040bc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001498:	4806      	ldr	r0, [pc, #24]	; (80014b4 <MX_USART2_UART_Init+0x100>)
 800149a:	f7ff fcea 	bl	8000e72 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_USART2_UART_Init+0x100>)
 80014a0:	f7ff fcd7 	bl	8000e52 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3738      	adds	r7, #56	; 0x38
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40020000 	.word	0x40020000
 80014b0:	40026000 	.word	0x40026000
 80014b4:	40004400 	.word	0x40004400

080014b8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_DMA_Init+0x4c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <MX_DMA_Init+0x4c>)
 80014c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_DMA_Init+0x4c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014da:	f7ff fc31 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 80014de:	4603      	mov	r3, r0
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fc81 	bl	8000dec <NVIC_EncodePriority>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4619      	mov	r1, r3
 80014ee:	2010      	movs	r0, #16
 80014f0:	f7ff fc52 	bl	8000d98 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014f4:	2010      	movs	r0, #16
 80014f6:	f7ff fc31 	bl	8000d5c <__NVIC_EnableIRQ>

}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_GPIO_Init+0x68>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a16      	ldr	r2, [pc, #88]	; (8001570 <MX_GPIO_Init+0x68>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_GPIO_Init+0x68>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_GPIO_Init+0x68>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <MX_GPIO_Init+0x68>)
 8001534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <MX_GPIO_Init+0x68>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_GPIO_Init+0x68>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <MX_GPIO_Init+0x68>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_GPIO_Init+0x68>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]

}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <HAL_MspInit+0x4c>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_MspInit+0x4c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <HAL_RTC_MspInit+0x24>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d102      	bne.n	80015ec <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015e6:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_RTC_MspInit+0x28>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40002800 	.word	0x40002800
 80015fc:	42470e3c 	.word	0x42470e3c

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_UART_MspInit+0x84>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12c      	bne.n	800167c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <HAL_UART_MspInit+0x88>)
 800162c:	f043 0310 	orr.w	r3, r3, #16
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800165a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800166c:	2307      	movs	r3, #7
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <HAL_UART_MspInit+0x8c>)
 8001678:	f000 fa9c 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40011000 	.word	0x40011000
 8001688:	40023800 	.word	0x40023800
 800168c:	40020000 	.word	0x40020000

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <HardFault_Handler+0x4>

080016a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <MemManage_Handler+0x4>

080016aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <BusFault_Handler+0x4>

080016b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <UsageFault_Handler+0x4>

080016b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e4:	f000 f93e 	bl	8001964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
  volatile int x = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
	return 1;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_kill>:

int _kill(int pid, int sig)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800171c:	f002 fd6c 	bl	80041f8 <__errno>
 8001720:	4602      	mov	r2, r0
 8001722:	2316      	movs	r3, #22
 8001724:	6013      	str	r3, [r2, #0]
	return -1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_exit>:

void _exit (int status)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800173a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffe7 	bl	8001712 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001744:	e7fe      	b.n	8001744 <_exit+0x12>

08001746 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e00a      	b.n	800176e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001758:	f3af 8000 	nop.w
 800175c:	4601      	mov	r1, r0
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	60ba      	str	r2, [r7, #8]
 8001764:	b2ca      	uxtb	r2, r1
 8001766:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3301      	adds	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	429a      	cmp	r2, r3
 8001774:	dbf0      	blt.n	8001758 <_read+0x12>
	}

return len;
 8001776:	687b      	ldr	r3, [r7, #4]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	return -1;
 8001788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017a8:	605a      	str	r2, [r3, #4]
	return 0;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_isatty>:

int _isatty(int file)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	return 1;
 80017c0:	2301      	movs	r3, #1
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b085      	sub	sp, #20
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
	return 0;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <_sbrk+0x50>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <_sbrk+0x16>
		heap_end = &end;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <_sbrk+0x50>)
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <_sbrk+0x54>)
 80017fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <_sbrk+0x50>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <_sbrk+0x50>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	466a      	mov	r2, sp
 800180e:	4293      	cmp	r3, r2
 8001810:	d907      	bls.n	8001822 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001812:	f002 fcf1 	bl	80041f8 <__errno>
 8001816:	4602      	mov	r2, r0
 8001818:	230c      	movs	r3, #12
 800181a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800181c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001820:	e006      	b.n	8001830 <_sbrk+0x48>
	}

	heap_end += incr;
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <_sbrk+0x50>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	4a03      	ldr	r2, [pc, #12]	; (8001838 <_sbrk+0x50>)
 800182c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000880 	.word	0x20000880
 800183c:	200008f8 	.word	0x200008f8

08001840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <SystemInit+0x28>)
 8001846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184a:	4a07      	ldr	r2, [pc, #28]	; (8001868 <SystemInit+0x28>)
 800184c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <SystemInit+0x28>)
 8001856:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800185a:	609a      	str	r2, [r3, #8]
#endif
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001870:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001872:	e003      	b.n	800187c <LoopCopyDataInit>

08001874 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001876:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001878:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800187a:	3104      	adds	r1, #4

0800187c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800187c:	480b      	ldr	r0, [pc, #44]	; (80018ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001880:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001882:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001884:	d3f6      	bcc.n	8001874 <CopyDataInit>
  ldr  r2, =_sbss
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001888:	e002      	b.n	8001890 <LoopFillZerobss>

0800188a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800188a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800188c:	f842 3b04 	str.w	r3, [r2], #4

08001890 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001892:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001894:	d3f9      	bcc.n	800188a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001896:	f7ff ffd3 	bl	8001840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189a:	f002 fcc5 	bl	8004228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189e:	f7ff fc6f 	bl	8001180 <main>
  bx  lr    
 80018a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018a8:	0800536c 	.word	0x0800536c
  ldr  r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018b0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80018b4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80018b8:	200008f4 	.word	0x200008f4

080018bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC_IRQHandler>
	...

080018c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_Init+0x40>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <HAL_Init+0x40>)
 80018ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_Init+0x40>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_Init+0x40>)
 80018d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a07      	ldr	r2, [pc, #28]	; (8001900 <HAL_Init+0x40>)
 80018e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e8:	2003      	movs	r0, #3
 80018ea:	f000 f92f 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f000 f808 	bl	8001904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f4:	f7ff fe46 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023c00 	.word	0x40023c00

08001904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_InitTick+0x54>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_InitTick+0x58>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191a:	fbb3 f3f1 	udiv	r3, r3, r1
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f939 	bl	8001b9a <HAL_SYSTICK_Config>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e00e      	b.n	8001950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b0f      	cmp	r3, #15
 8001936:	d80a      	bhi.n	800194e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001938:	2200      	movs	r2, #0
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001940:	f000 f90f 	bl	8001b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001944:	4a06      	ldr	r2, [pc, #24]	; (8001960 <HAL_InitTick+0x5c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	e000      	b.n	8001950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000000 	.word	0x20000000
 800195c:	20000008 	.word	0x20000008
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x20>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x24>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <HAL_IncTick+0x24>)
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000008 	.word	0x20000008
 8001988:	200008ec 	.word	0x200008ec

0800198c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_GetTick+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	200008ec 	.word	0x200008ec

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff ffee 	bl	800198c <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019bc:	d005      	beq.n	80019ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_Delay+0x40>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ca:	bf00      	nop
 80019cc:	f7ff ffde 	bl	800198c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d8f7      	bhi.n	80019cc <HAL_Delay+0x28>
  {
  }
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000008 	.word	0x20000008

080019e8 <__NVIC_SetPriorityGrouping>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1a:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	60d3      	str	r3, [r2, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_GetPriorityGrouping>:
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <__NVIC_GetPriorityGrouping+0x18>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f003 0307 	and.w	r3, r3, #7
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_SetPriority>:
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	; (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	; (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b18:	d301      	bcc.n	8001b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00f      	b.n	8001b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <SysTick_Config+0x40>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b26:	210f      	movs	r1, #15
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b2c:	f7ff ff8e 	bl	8001a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <SysTick_Config+0x40>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <SysTick_Config+0x40>)
 8001b38:	2207      	movs	r2, #7
 8001b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	e000e010 	.word	0xe000e010

08001b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff47 	bl	80019e8 <__NVIC_SetPriorityGrouping>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b74:	f7ff ff5c 	bl	8001a30 <__NVIC_GetPriorityGrouping>
 8001b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	6978      	ldr	r0, [r7, #20]
 8001b80:	f7ff ff8e 	bl	8001aa0 <NVIC_EncodePriority>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff5d 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffb0 	bl	8001b08 <SysTick_Config>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	e16b      	b.n	8001ea8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	f040 815a 	bne.w	8001ea2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d00b      	beq.n	8001c0e <HAL_GPIO_Init+0x5a>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d007      	beq.n	8001c0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c02:	2b11      	cmp	r3, #17
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b12      	cmp	r3, #18
 8001c0c:	d130      	bne.n	8001c70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 0201 	and.w	r2, r3, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0xfc>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b12      	cmp	r3, #18
 8001cae:	d123      	bne.n	8001cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	08da      	lsrs	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3208      	adds	r2, #8
 8001cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	08da      	lsrs	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3208      	adds	r2, #8
 8001cf2:	69b9      	ldr	r1, [r7, #24]
 8001cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80b4 	beq.w	8001ea2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b5f      	ldr	r3, [pc, #380]	; (8001ebc <HAL_GPIO_Init+0x308>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a5e      	ldr	r2, [pc, #376]	; (8001ebc <HAL_GPIO_Init+0x308>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b5c      	ldr	r3, [pc, #368]	; (8001ebc <HAL_GPIO_Init+0x308>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d56:	4a5a      	ldr	r2, [pc, #360]	; (8001ec0 <HAL_GPIO_Init+0x30c>)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a51      	ldr	r2, [pc, #324]	; (8001ec4 <HAL_GPIO_Init+0x310>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d02b      	beq.n	8001dda <HAL_GPIO_Init+0x226>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a50      	ldr	r2, [pc, #320]	; (8001ec8 <HAL_GPIO_Init+0x314>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d025      	beq.n	8001dd6 <HAL_GPIO_Init+0x222>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4f      	ldr	r2, [pc, #316]	; (8001ecc <HAL_GPIO_Init+0x318>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01f      	beq.n	8001dd2 <HAL_GPIO_Init+0x21e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4e      	ldr	r2, [pc, #312]	; (8001ed0 <HAL_GPIO_Init+0x31c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d019      	beq.n	8001dce <HAL_GPIO_Init+0x21a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4d      	ldr	r2, [pc, #308]	; (8001ed4 <HAL_GPIO_Init+0x320>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_GPIO_Init+0x216>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4c      	ldr	r2, [pc, #304]	; (8001ed8 <HAL_GPIO_Init+0x324>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00d      	beq.n	8001dc6 <HAL_GPIO_Init+0x212>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4b      	ldr	r2, [pc, #300]	; (8001edc <HAL_GPIO_Init+0x328>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d007      	beq.n	8001dc2 <HAL_GPIO_Init+0x20e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4a      	ldr	r2, [pc, #296]	; (8001ee0 <HAL_GPIO_Init+0x32c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_GPIO_Init+0x20a>
 8001dba:	2307      	movs	r3, #7
 8001dbc:	e00e      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	e00c      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	e00a      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	e008      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dca:	2304      	movs	r3, #4
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e004      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x228>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	f002 0203 	and.w	r2, r2, #3
 8001de2:	0092      	lsls	r2, r2, #2
 8001de4:	4093      	lsls	r3, r2
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dec:	4934      	ldr	r1, [pc, #208]	; (8001ec0 <HAL_GPIO_Init+0x30c>)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <HAL_GPIO_Init+0x330>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e1e:	4a31      	ldr	r2, [pc, #196]	; (8001ee4 <HAL_GPIO_Init+0x330>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e24:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <HAL_GPIO_Init+0x330>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e48:	4a26      	ldr	r2, [pc, #152]	; (8001ee4 <HAL_GPIO_Init+0x330>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <HAL_GPIO_Init+0x330>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_GPIO_Init+0x330>)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <HAL_GPIO_Init+0x330>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e9c:	4a11      	ldr	r2, [pc, #68]	; (8001ee4 <HAL_GPIO_Init+0x330>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	2b0f      	cmp	r3, #15
 8001eac:	f67f ae90 	bls.w	8001bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	3724      	adds	r7, #36	; 0x24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40013800 	.word	0x40013800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020c00 	.word	0x40020c00
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40021400 	.word	0x40021400
 8001edc:	40021800 	.word	0x40021800
 8001ee0:	40021c00 	.word	0x40021c00
 8001ee4:	40013c00 	.word	0x40013c00

08001ee8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e25b      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d075      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f06:	4ba3      	ldr	r3, [pc, #652]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d00c      	beq.n	8001f2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f12:	4ba0      	ldr	r3, [pc, #640]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d112      	bne.n	8001f44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1e:	4b9d      	ldr	r3, [pc, #628]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f2a:	d10b      	bne.n	8001f44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	4b99      	ldr	r3, [pc, #612]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d05b      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x108>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d157      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e236      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4c:	d106      	bne.n	8001f5c <HAL_RCC_OscConfig+0x74>
 8001f4e:	4b91      	ldr	r3, [pc, #580]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a90      	ldr	r2, [pc, #576]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e01d      	b.n	8001f98 <HAL_RCC_OscConfig+0xb0>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x98>
 8001f66:	4b8b      	ldr	r3, [pc, #556]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a8a      	ldr	r2, [pc, #552]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b88      	ldr	r3, [pc, #544]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a87      	ldr	r2, [pc, #540]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0xb0>
 8001f80:	4b84      	ldr	r3, [pc, #528]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a83      	ldr	r2, [pc, #524]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b81      	ldr	r3, [pc, #516]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a80      	ldr	r2, [pc, #512]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fcf4 	bl	800198c <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7ff fcf0 	bl	800198c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e1fb      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	4b76      	ldr	r3, [pc, #472]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0xc0>
 8001fc6:	e014      	b.n	8001ff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fce0 	bl	800198c <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7ff fcdc 	bl	800198c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e1e7      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	4b6c      	ldr	r3, [pc, #432]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0xe8>
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d063      	beq.n	80020c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ffe:	4b65      	ldr	r3, [pc, #404]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00b      	beq.n	8002022 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800200a:	4b62      	ldr	r3, [pc, #392]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002012:	2b08      	cmp	r3, #8
 8002014:	d11c      	bne.n	8002050 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002016:	4b5f      	ldr	r3, [pc, #380]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d116      	bne.n	8002050 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002022:	4b5c      	ldr	r3, [pc, #368]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <HAL_RCC_OscConfig+0x152>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d001      	beq.n	800203a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e1bb      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203a:	4b56      	ldr	r3, [pc, #344]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4952      	ldr	r1, [pc, #328]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204e:	e03a      	b.n	80020c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d020      	beq.n	800209a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002058:	4b4f      	ldr	r3, [pc, #316]	; (8002198 <HAL_RCC_OscConfig+0x2b0>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7ff fc95 	bl	800198c <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002066:	f7ff fc91 	bl	800198c <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e19c      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002078:	4b46      	ldr	r3, [pc, #280]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002084:	4b43      	ldr	r3, [pc, #268]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4940      	ldr	r1, [pc, #256]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]
 8002098:	e015      	b.n	80020c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209a:	4b3f      	ldr	r3, [pc, #252]	; (8002198 <HAL_RCC_OscConfig+0x2b0>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7ff fc74 	bl	800198c <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a8:	f7ff fc70 	bl	800198c <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e17b      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	4b36      	ldr	r3, [pc, #216]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d030      	beq.n	8002134 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d016      	beq.n	8002108 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020da:	4b30      	ldr	r3, [pc, #192]	; (800219c <HAL_RCC_OscConfig+0x2b4>)
 80020dc:	2201      	movs	r2, #1
 80020de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e0:	f7ff fc54 	bl	800198c <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e8:	f7ff fc50 	bl	800198c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e15b      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fa:	4b26      	ldr	r3, [pc, #152]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x200>
 8002106:	e015      	b.n	8002134 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002108:	4b24      	ldr	r3, [pc, #144]	; (800219c <HAL_RCC_OscConfig+0x2b4>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210e:	f7ff fc3d 	bl	800198c <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002116:	f7ff fc39 	bl	800198c <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e144      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 800212a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f0      	bne.n	8002116 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80a0 	beq.w	8002282 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002146:	4b13      	ldr	r3, [pc, #76]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10f      	bne.n	8002172 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	4a0e      	ldr	r2, [pc, #56]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002160:	6413      	str	r3, [r2, #64]	; 0x40
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216e:	2301      	movs	r3, #1
 8002170:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_OscConfig+0x2b8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d121      	bne.n	80021c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <HAL_RCC_OscConfig+0x2b8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a07      	ldr	r2, [pc, #28]	; (80021a0 <HAL_RCC_OscConfig+0x2b8>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218a:	f7ff fbff 	bl	800198c <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002190:	e011      	b.n	80021b6 <HAL_RCC_OscConfig+0x2ce>
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	42470000 	.word	0x42470000
 800219c:	42470e80 	.word	0x42470e80
 80021a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a4:	f7ff fbf2 	bl	800198c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e0fd      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	4b81      	ldr	r3, [pc, #516]	; (80023bc <HAL_RCC_OscConfig+0x4d4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d106      	bne.n	80021d8 <HAL_RCC_OscConfig+0x2f0>
 80021ca:	4b7d      	ldr	r3, [pc, #500]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	4a7c      	ldr	r2, [pc, #496]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6713      	str	r3, [r2, #112]	; 0x70
 80021d6:	e01c      	b.n	8002212 <HAL_RCC_OscConfig+0x32a>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b05      	cmp	r3, #5
 80021de:	d10c      	bne.n	80021fa <HAL_RCC_OscConfig+0x312>
 80021e0:	4b77      	ldr	r3, [pc, #476]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e4:	4a76      	ldr	r2, [pc, #472]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	6713      	str	r3, [r2, #112]	; 0x70
 80021ec:	4b74      	ldr	r3, [pc, #464]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	4a73      	ldr	r2, [pc, #460]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6713      	str	r3, [r2, #112]	; 0x70
 80021f8:	e00b      	b.n	8002212 <HAL_RCC_OscConfig+0x32a>
 80021fa:	4b71      	ldr	r3, [pc, #452]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	4a70      	ldr	r2, [pc, #448]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	6713      	str	r3, [r2, #112]	; 0x70
 8002206:	4b6e      	ldr	r3, [pc, #440]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	4a6d      	ldr	r2, [pc, #436]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d015      	beq.n	8002246 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221a:	f7ff fbb7 	bl	800198c <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7ff fbb3 	bl	800198c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0bc      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	4b61      	ldr	r3, [pc, #388]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ee      	beq.n	8002222 <HAL_RCC_OscConfig+0x33a>
 8002244:	e014      	b.n	8002270 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7ff fba1 	bl	800198c <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7ff fb9d 	bl	800198c <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	; 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e0a6      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002264:	4b56      	ldr	r3, [pc, #344]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1ee      	bne.n	800224e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002270:	7dfb      	ldrb	r3, [r7, #23]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d105      	bne.n	8002282 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002276:	4b52      	ldr	r3, [pc, #328]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a51      	ldr	r2, [pc, #324]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 800227c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8092 	beq.w	80023b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800228c:	4b4c      	ldr	r3, [pc, #304]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b08      	cmp	r3, #8
 8002296:	d05c      	beq.n	8002352 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d141      	bne.n	8002324 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a0:	4b48      	ldr	r3, [pc, #288]	; (80023c4 <HAL_RCC_OscConfig+0x4dc>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7ff fb71 	bl	800198c <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ae:	f7ff fb6d 	bl	800198c <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e078      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c0:	4b3f      	ldr	r3, [pc, #252]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f0      	bne.n	80022ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69da      	ldr	r2, [r3, #28]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	019b      	lsls	r3, r3, #6
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	3b01      	subs	r3, #1
 80022e6:	041b      	lsls	r3, r3, #16
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	061b      	lsls	r3, r3, #24
 80022f0:	4933      	ldr	r1, [pc, #204]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f6:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <HAL_RCC_OscConfig+0x4dc>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff fb46 	bl	800198c <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002304:	f7ff fb42 	bl	800198c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e04d      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002316:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x41c>
 8002322:	e045      	b.n	80023b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_RCC_OscConfig+0x4dc>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7ff fb2f 	bl	800198c <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002332:	f7ff fb2b 	bl	800198c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e036      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002344:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x44a>
 8002350:	e02e      	b.n	80023b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e029      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800235e:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <HAL_RCC_OscConfig+0x4d8>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	429a      	cmp	r2, r3
 8002370:	d11c      	bne.n	80023ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d115      	bne.n	80023ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002386:	4013      	ands	r3, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800238c:	4293      	cmp	r3, r2
 800238e:	d10d      	bne.n	80023ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800239a:	429a      	cmp	r2, r3
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40007000 	.word	0x40007000
 80023c0:	40023800 	.word	0x40023800
 80023c4:	42470060 	.word	0x42470060

080023c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0cc      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b68      	ldr	r3, [pc, #416]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d90c      	bls.n	8002404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b65      	ldr	r3, [pc, #404]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b63      	ldr	r3, [pc, #396]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0b8      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d020      	beq.n	8002452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800241c:	4b59      	ldr	r3, [pc, #356]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a58      	ldr	r2, [pc, #352]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002426:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002434:	4b53      	ldr	r3, [pc, #332]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4a52      	ldr	r2, [pc, #328]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800243e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002440:	4b50      	ldr	r3, [pc, #320]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	494d      	ldr	r1, [pc, #308]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d044      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	4b47      	ldr	r3, [pc, #284]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d119      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e07f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d003      	beq.n	8002486 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002482:	2b03      	cmp	r3, #3
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002486:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e06f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e067      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a6:	4b37      	ldr	r3, [pc, #220]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f023 0203 	bic.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4934      	ldr	r1, [pc, #208]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b8:	f7ff fa68 	bl	800198c <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c0:	f7ff fa64 	bl	800198c <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e04f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 020c 	and.w	r2, r3, #12
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d1eb      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d20c      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b22      	ldr	r3, [pc, #136]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e032      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4916      	ldr	r1, [pc, #88]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	490e      	ldr	r1, [pc, #56]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800254e:	f000 f821 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8002552:	4601      	mov	r1, r0
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	5cd3      	ldrb	r3, [r2, r3]
 8002562:	fa21 f303 	lsr.w	r3, r1, r3
 8002566:	4a09      	ldr	r2, [pc, #36]	; (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff f9c8 	bl	8001904 <HAL_InitTick>

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023c00 	.word	0x40023c00
 8002584:	40023800 	.word	0x40023800
 8002588:	08005270 	.word	0x08005270
 800258c:	20000000 	.word	0x20000000
 8002590:	20000004 	.word	0x20000004

08002594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	2300      	movs	r3, #0
 80025a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025aa:	4b63      	ldr	r3, [pc, #396]	; (8002738 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d007      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0x32>
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d008      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x38>
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f040 80b4 	bne.w	8002728 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025c0:	4b5e      	ldr	r3, [pc, #376]	; (800273c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025c2:	60bb      	str	r3, [r7, #8]
       break;
 80025c4:	e0b3      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025c6:	4b5e      	ldr	r3, [pc, #376]	; (8002740 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80025c8:	60bb      	str	r3, [r7, #8]
      break;
 80025ca:	e0b0      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025cc:	4b5a      	ldr	r3, [pc, #360]	; (8002738 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025d6:	4b58      	ldr	r3, [pc, #352]	; (8002738 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d04a      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e2:	4b55      	ldr	r3, [pc, #340]	; (8002738 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	099b      	lsrs	r3, r3, #6
 80025e8:	f04f 0400 	mov.w	r4, #0
 80025ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	ea03 0501 	and.w	r5, r3, r1
 80025f8:	ea04 0602 	and.w	r6, r4, r2
 80025fc:	4629      	mov	r1, r5
 80025fe:	4632      	mov	r2, r6
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	f04f 0400 	mov.w	r4, #0
 8002608:	0154      	lsls	r4, r2, #5
 800260a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800260e:	014b      	lsls	r3, r1, #5
 8002610:	4619      	mov	r1, r3
 8002612:	4622      	mov	r2, r4
 8002614:	1b49      	subs	r1, r1, r5
 8002616:	eb62 0206 	sbc.w	r2, r2, r6
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	f04f 0400 	mov.w	r4, #0
 8002622:	0194      	lsls	r4, r2, #6
 8002624:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002628:	018b      	lsls	r3, r1, #6
 800262a:	1a5b      	subs	r3, r3, r1
 800262c:	eb64 0402 	sbc.w	r4, r4, r2
 8002630:	f04f 0100 	mov.w	r1, #0
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	00e2      	lsls	r2, r4, #3
 800263a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800263e:	00d9      	lsls	r1, r3, #3
 8002640:	460b      	mov	r3, r1
 8002642:	4614      	mov	r4, r2
 8002644:	195b      	adds	r3, r3, r5
 8002646:	eb44 0406 	adc.w	r4, r4, r6
 800264a:	f04f 0100 	mov.w	r1, #0
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	0262      	lsls	r2, r4, #9
 8002654:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002658:	0259      	lsls	r1, r3, #9
 800265a:	460b      	mov	r3, r1
 800265c:	4614      	mov	r4, r2
 800265e:	4618      	mov	r0, r3
 8002660:	4621      	mov	r1, r4
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f04f 0400 	mov.w	r4, #0
 8002668:	461a      	mov	r2, r3
 800266a:	4623      	mov	r3, r4
 800266c:	f7fd fe00 	bl	8000270 <__aeabi_uldivmod>
 8002670:	4603      	mov	r3, r0
 8002672:	460c      	mov	r4, r1
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e049      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	f04f 0400 	mov.w	r4, #0
 8002682:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	ea03 0501 	and.w	r5, r3, r1
 800268e:	ea04 0602 	and.w	r6, r4, r2
 8002692:	4629      	mov	r1, r5
 8002694:	4632      	mov	r2, r6
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	f04f 0400 	mov.w	r4, #0
 800269e:	0154      	lsls	r4, r2, #5
 80026a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026a4:	014b      	lsls	r3, r1, #5
 80026a6:	4619      	mov	r1, r3
 80026a8:	4622      	mov	r2, r4
 80026aa:	1b49      	subs	r1, r1, r5
 80026ac:	eb62 0206 	sbc.w	r2, r2, r6
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	f04f 0400 	mov.w	r4, #0
 80026b8:	0194      	lsls	r4, r2, #6
 80026ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026be:	018b      	lsls	r3, r1, #6
 80026c0:	1a5b      	subs	r3, r3, r1
 80026c2:	eb64 0402 	sbc.w	r4, r4, r2
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	00e2      	lsls	r2, r4, #3
 80026d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026d4:	00d9      	lsls	r1, r3, #3
 80026d6:	460b      	mov	r3, r1
 80026d8:	4614      	mov	r4, r2
 80026da:	195b      	adds	r3, r3, r5
 80026dc:	eb44 0406 	adc.w	r4, r4, r6
 80026e0:	f04f 0100 	mov.w	r1, #0
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	02a2      	lsls	r2, r4, #10
 80026ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026ee:	0299      	lsls	r1, r3, #10
 80026f0:	460b      	mov	r3, r1
 80026f2:	4614      	mov	r4, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	4621      	mov	r1, r4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f04f 0400 	mov.w	r4, #0
 80026fe:	461a      	mov	r2, r3
 8002700:	4623      	mov	r3, r4
 8002702:	f7fd fdb5 	bl	8000270 <__aeabi_uldivmod>
 8002706:	4603      	mov	r3, r0
 8002708:	460c      	mov	r4, r1
 800270a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	3301      	adds	r3, #1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	60bb      	str	r3, [r7, #8]
      break;
 8002726:	e002      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800272a:	60bb      	str	r3, [r7, #8]
      break;
 800272c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272e:	68bb      	ldr	r3, [r7, #8]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002738:	40023800 	.word	0x40023800
 800273c:	00f42400 	.word	0x00f42400
 8002740:	007a1200 	.word	0x007a1200

08002744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_RCC_GetHCLKFreq+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000000 	.word	0x20000000

0800275c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002760:	f7ff fff0 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8002764:	4601      	mov	r1, r0
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	0a9b      	lsrs	r3, r3, #10
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	4a03      	ldr	r2, [pc, #12]	; (8002780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40023800 	.word	0x40023800
 8002780:	08005280 	.word	0x08005280

08002784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002788:	f7ff ffdc 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 800278c:	4601      	mov	r1, r0
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0b5b      	lsrs	r3, r3, #13
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4a03      	ldr	r2, [pc, #12]	; (80027a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40023800 	.word	0x40023800
 80027a8:	08005280 	.word	0x08005280

080027ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d035      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027d4:	4b62      	ldr	r3, [pc, #392]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027da:	f7ff f8d7 	bl	800198c <HAL_GetTick>
 80027de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027e0:	e008      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027e2:	f7ff f8d3 	bl	800198c <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e0b0      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027f4:	4b5b      	ldr	r3, [pc, #364]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f0      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	019a      	lsls	r2, r3, #6
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	071b      	lsls	r3, r3, #28
 800280c:	4955      	ldr	r1, [pc, #340]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002814:	4b52      	ldr	r3, [pc, #328]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800281a:	f7ff f8b7 	bl	800198c <HAL_GetTick>
 800281e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002822:	f7ff f8b3 	bl	800198c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e090      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002834:	4b4b      	ldr	r3, [pc, #300]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8083 	beq.w	8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	4b44      	ldr	r3, [pc, #272]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a43      	ldr	r2, [pc, #268]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
 800285e:	4b41      	ldr	r3, [pc, #260]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800286a:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a3e      	ldr	r2, [pc, #248]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002874:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002876:	f7ff f889 	bl	800198c <HAL_GetTick>
 800287a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800287e:	f7ff f885 	bl	800198c <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e062      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002890:	4b35      	ldr	r3, [pc, #212]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800289c:	4b31      	ldr	r3, [pc, #196]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d02f      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d028      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028ba:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028c4:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028ca:	4b28      	ldr	r3, [pc, #160]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80028d0:	4a24      	ldr	r2, [pc, #144]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028d6:	4b23      	ldr	r3, [pc, #140]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d114      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80028e2:	f7ff f853 	bl	800198c <HAL_GetTick>
 80028e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e8:	e00a      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7ff f84f 	bl	800198c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d901      	bls.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e02a      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002900:	4b18      	ldr	r3, [pc, #96]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ee      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002918:	d10d      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800291a:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800292a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800292e:	490d      	ldr	r1, [pc, #52]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]
 8002934:	e005      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800293c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002940:	6093      	str	r3, [r2, #8]
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002944:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294e:	4905      	ldr	r1, [pc, #20]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002950:	4313      	orrs	r3, r2
 8002952:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	42470068 	.word	0x42470068
 8002964:	40023800 	.word	0x40023800
 8002968:	40007000 	.word	0x40007000
 800296c:	42470e40 	.word	0x42470e40

08002970 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e083      	b.n	8002a8a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7f5b      	ldrb	r3, [r3, #29]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7fe fe1e 	bl	80015d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	22ca      	movs	r2, #202	; 0xca
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2253      	movs	r2, #83	; 0x53
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f9fb 	bl	8002daa <RTC_EnterInitMode>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	22ff      	movs	r2, #255	; 0xff
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2204      	movs	r2, #4
 80029c6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e05e      	b.n	8002a8a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80029da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029de:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68d2      	ldr	r2, [r2, #12]
 8002a06:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6919      	ldr	r1, [r3, #16]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	041a      	lsls	r2, r3, #16
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a2a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10e      	bne.n	8002a58 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f98d 	bl	8002d5a <HAL_RTC_WaitForSynchro>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	22ff      	movs	r2, #255	; 0xff
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2204      	movs	r2, #4
 8002a52:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e018      	b.n	8002a8a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	22ff      	movs	r2, #255	; 0xff
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
  }
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a92:	b590      	push	{r4, r7, lr}
 8002a94:	b087      	sub	sp, #28
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	7f1b      	ldrb	r3, [r3, #28]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_RTC_SetTime+0x1c>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e0aa      	b.n	8002c04 <HAL_RTC_SetTime+0x172>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d126      	bne.n	8002b0e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 f992 	bl	8002e02 <RTC_ByteToBcd2>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f98b 	bl	8002e02 <RTC_ByteToBcd2>
 8002aec:	4603      	mov	r3, r0
 8002aee:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002af0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	789b      	ldrb	r3, [r3, #2]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f983 	bl	8002e02 <RTC_ByteToBcd2>
 8002afc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002afe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	78db      	ldrb	r3, [r3, #3]
 8002b06:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	e018      	b.n	8002b40 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	785b      	ldrb	r3, [r3, #1]
 8002b2c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b2e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b34:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	78db      	ldrb	r3, [r3, #3]
 8002b3a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	22ca      	movs	r2, #202	; 0xca
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2253      	movs	r2, #83	; 0x53
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f92a 	bl	8002daa <RTC_EnterInitMode>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00b      	beq.n	8002b74 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	22ff      	movs	r2, #255	; 0xff
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2204      	movs	r2, #4
 8002b68:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e047      	b.n	8002c04 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002b7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002b82:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b92:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6899      	ldr	r1, [r3, #8]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d111      	bne.n	8002bee <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f8c5 	bl	8002d5a <HAL_RTC_WaitForSynchro>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00b      	beq.n	8002bee <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	22ff      	movs	r2, #255	; 0xff
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2204      	movs	r2, #4
 8002be2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00a      	b.n	8002c04 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	22ff      	movs	r2, #255	; 0xff
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002c02:	2300      	movs	r3, #0
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd90      	pop	{r4, r7, pc}

08002c0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	7f1b      	ldrb	r3, [r3, #28]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_RTC_SetDate+0x1c>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e094      	b.n	8002d52 <HAL_RTC_SetDate+0x146>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2202      	movs	r2, #2
 8002c32:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10e      	bne.n	8002c58 <HAL_RTC_SetDate+0x4c>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	785b      	ldrb	r3, [r3, #1]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	785b      	ldrb	r3, [r3, #1]
 8002c4a:	f023 0310 	bic.w	r3, r3, #16
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	330a      	adds	r3, #10
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d11c      	bne.n	8002c98 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	78db      	ldrb	r3, [r3, #3]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f8cd 	bl	8002e02 <RTC_ByteToBcd2>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	785b      	ldrb	r3, [r3, #1]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f8c6 	bl	8002e02 <RTC_ByteToBcd2>
 8002c76:	4603      	mov	r3, r0
 8002c78:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c7a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	789b      	ldrb	r3, [r3, #2]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f8be 	bl	8002e02 <RTC_ByteToBcd2>
 8002c86:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002c88:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e00e      	b.n	8002cb6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	78db      	ldrb	r3, [r3, #3]
 8002c9c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	785b      	ldrb	r3, [r3, #1]
 8002ca2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ca4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002caa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	22ca      	movs	r2, #202	; 0xca
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2253      	movs	r2, #83	; 0x53
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f86f 	bl	8002daa <RTC_EnterInitMode>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	22ff      	movs	r2, #255	; 0xff
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2204      	movs	r2, #4
 8002cde:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e033      	b.n	8002d52 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002cf4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002cf8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d08:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d111      	bne.n	8002d3c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f81e 	bl	8002d5a <HAL_RTC_WaitForSynchro>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	22ff      	movs	r2, #255	; 0xff
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e00a      	b.n	8002d52 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	22ff      	movs	r2, #255	; 0xff
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2201      	movs	r2, #1
 8002d48:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002d50:	2300      	movs	r3, #0
  }
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd90      	pop	{r4, r7, pc}

08002d5a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d76:	f7fe fe09 	bl	800198c <HAL_GetTick>
 8002d7a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002d7c:	e009      	b.n	8002d92 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d7e:	f7fe fe05 	bl	800198c <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d8c:	d901      	bls.n	8002d92 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e007      	b.n	8002da2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0ee      	beq.n	8002d7e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d119      	bne.n	8002df8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dcc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dce:	f7fe fddd 	bl	800198c <HAL_GetTick>
 8002dd2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002dd4:	e009      	b.n	8002dea <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002dd6:	f7fe fdd9 	bl	800198c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002de4:	d901      	bls.n	8002dea <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e007      	b.n	8002dfa <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ee      	beq.n	8002dd6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8002e10:	e005      	b.n	8002e1e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3301      	adds	r3, #1
 8002e16:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	3b0a      	subs	r3, #10
 8002e1c:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	2b09      	cmp	r3, #9
 8002e22:	d8f6      	bhi.n	8002e12 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	b2db      	uxtb	r3, r3
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e03f      	b.n	8002ed0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7fe fbcb 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2224      	movs	r2, #36	; 0x24
 8002e6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f90c 	bl	80030a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ea6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eb6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	f040 8083 	bne.w	8003000 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_UART_Transmit+0x2e>
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e07b      	b.n	8003002 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_UART_Transmit+0x40>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e074      	b.n	8003002 <HAL_UART_Transmit+0x12a>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2221      	movs	r2, #33	; 0x21
 8002f2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f2e:	f7fe fd2d 	bl	800198c <HAL_GetTick>
 8002f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	88fa      	ldrh	r2, [r7, #6]
 8002f38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	88fa      	ldrh	r2, [r7, #6]
 8002f3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002f48:	e042      	b.n	8002fd0 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f60:	d122      	bne.n	8002fa8 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2180      	movs	r1, #128	; 0x80
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f84c 	bl	800300a <UART_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e042      	b.n	8003002 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f8e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d103      	bne.n	8002fa0 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	3302      	adds	r3, #2
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	e017      	b.n	8002fd0 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	e013      	b.n	8002fd0 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f829 	bl	800300a <UART_WaitOnFlagUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e01f      	b.n	8003002 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	60ba      	str	r2, [r7, #8]
 8002fc8:	781a      	ldrb	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1b7      	bne.n	8002f4a <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2140      	movs	r1, #64	; 0x40
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f810 	bl	800300a <UART_WaitOnFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e006      	b.n	8003002 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003000:	2302      	movs	r3, #2
  }
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	603b      	str	r3, [r7, #0]
 8003016:	4613      	mov	r3, r2
 8003018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301a:	e02c      	b.n	8003076 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003022:	d028      	beq.n	8003076 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0x30>
 800302a:	f7fe fcaf 	bl	800198c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	429a      	cmp	r2, r3
 8003038:	d21d      	bcs.n	8003076 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003048:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0201 	bic.w	r2, r2, #1
 8003058:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e00f      	b.n	8003096 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4013      	ands	r3, r2
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	bf0c      	ite	eq
 8003086:	2301      	moveq	r3, #1
 8003088:	2300      	movne	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	429a      	cmp	r2, r3
 8003092:	d0c3      	beq.n	800301c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80030e2:	f023 030c 	bic.w	r3, r3, #12
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	68f9      	ldr	r1, [r7, #12]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800310e:	f040 818b 	bne.w	8003428 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4ac1      	ldr	r2, [pc, #772]	; (800341c <UART_SetConfig+0x37c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d005      	beq.n	8003128 <UART_SetConfig+0x88>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4abf      	ldr	r2, [pc, #764]	; (8003420 <UART_SetConfig+0x380>)
 8003122:	4293      	cmp	r3, r2
 8003124:	f040 80bd 	bne.w	80032a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003128:	f7ff fb2c 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 800312c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	461d      	mov	r5, r3
 8003132:	f04f 0600 	mov.w	r6, #0
 8003136:	46a8      	mov	r8, r5
 8003138:	46b1      	mov	r9, r6
 800313a:	eb18 0308 	adds.w	r3, r8, r8
 800313e:	eb49 0409 	adc.w	r4, r9, r9
 8003142:	4698      	mov	r8, r3
 8003144:	46a1      	mov	r9, r4
 8003146:	eb18 0805 	adds.w	r8, r8, r5
 800314a:	eb49 0906 	adc.w	r9, r9, r6
 800314e:	f04f 0100 	mov.w	r1, #0
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800315a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800315e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003162:	4688      	mov	r8, r1
 8003164:	4691      	mov	r9, r2
 8003166:	eb18 0005 	adds.w	r0, r8, r5
 800316a:	eb49 0106 	adc.w	r1, r9, r6
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	461d      	mov	r5, r3
 8003174:	f04f 0600 	mov.w	r6, #0
 8003178:	196b      	adds	r3, r5, r5
 800317a:	eb46 0406 	adc.w	r4, r6, r6
 800317e:	461a      	mov	r2, r3
 8003180:	4623      	mov	r3, r4
 8003182:	f7fd f875 	bl	8000270 <__aeabi_uldivmod>
 8003186:	4603      	mov	r3, r0
 8003188:	460c      	mov	r4, r1
 800318a:	461a      	mov	r2, r3
 800318c:	4ba5      	ldr	r3, [pc, #660]	; (8003424 <UART_SetConfig+0x384>)
 800318e:	fba3 2302 	umull	r2, r3, r3, r2
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	461d      	mov	r5, r3
 800319c:	f04f 0600 	mov.w	r6, #0
 80031a0:	46a9      	mov	r9, r5
 80031a2:	46b2      	mov	sl, r6
 80031a4:	eb19 0309 	adds.w	r3, r9, r9
 80031a8:	eb4a 040a 	adc.w	r4, sl, sl
 80031ac:	4699      	mov	r9, r3
 80031ae:	46a2      	mov	sl, r4
 80031b0:	eb19 0905 	adds.w	r9, r9, r5
 80031b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031cc:	4689      	mov	r9, r1
 80031ce:	4692      	mov	sl, r2
 80031d0:	eb19 0005 	adds.w	r0, r9, r5
 80031d4:	eb4a 0106 	adc.w	r1, sl, r6
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	461d      	mov	r5, r3
 80031de:	f04f 0600 	mov.w	r6, #0
 80031e2:	196b      	adds	r3, r5, r5
 80031e4:	eb46 0406 	adc.w	r4, r6, r6
 80031e8:	461a      	mov	r2, r3
 80031ea:	4623      	mov	r3, r4
 80031ec:	f7fd f840 	bl	8000270 <__aeabi_uldivmod>
 80031f0:	4603      	mov	r3, r0
 80031f2:	460c      	mov	r4, r1
 80031f4:	461a      	mov	r2, r3
 80031f6:	4b8b      	ldr	r3, [pc, #556]	; (8003424 <UART_SetConfig+0x384>)
 80031f8:	fba3 1302 	umull	r1, r3, r3, r2
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	2164      	movs	r1, #100	; 0x64
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	3332      	adds	r3, #50	; 0x32
 800320a:	4a86      	ldr	r2, [pc, #536]	; (8003424 <UART_SetConfig+0x384>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003218:	4498      	add	r8, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	461d      	mov	r5, r3
 800321e:	f04f 0600 	mov.w	r6, #0
 8003222:	46a9      	mov	r9, r5
 8003224:	46b2      	mov	sl, r6
 8003226:	eb19 0309 	adds.w	r3, r9, r9
 800322a:	eb4a 040a 	adc.w	r4, sl, sl
 800322e:	4699      	mov	r9, r3
 8003230:	46a2      	mov	sl, r4
 8003232:	eb19 0905 	adds.w	r9, r9, r5
 8003236:	eb4a 0a06 	adc.w	sl, sl, r6
 800323a:	f04f 0100 	mov.w	r1, #0
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003246:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800324a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800324e:	4689      	mov	r9, r1
 8003250:	4692      	mov	sl, r2
 8003252:	eb19 0005 	adds.w	r0, r9, r5
 8003256:	eb4a 0106 	adc.w	r1, sl, r6
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	461d      	mov	r5, r3
 8003260:	f04f 0600 	mov.w	r6, #0
 8003264:	196b      	adds	r3, r5, r5
 8003266:	eb46 0406 	adc.w	r4, r6, r6
 800326a:	461a      	mov	r2, r3
 800326c:	4623      	mov	r3, r4
 800326e:	f7fc ffff 	bl	8000270 <__aeabi_uldivmod>
 8003272:	4603      	mov	r3, r0
 8003274:	460c      	mov	r4, r1
 8003276:	461a      	mov	r2, r3
 8003278:	4b6a      	ldr	r3, [pc, #424]	; (8003424 <UART_SetConfig+0x384>)
 800327a:	fba3 1302 	umull	r1, r3, r3, r2
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2164      	movs	r1, #100	; 0x64
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	3332      	adds	r3, #50	; 0x32
 800328c:	4a65      	ldr	r2, [pc, #404]	; (8003424 <UART_SetConfig+0x384>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	f003 0207 	and.w	r2, r3, #7
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4442      	add	r2, r8
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	e26f      	b.n	8003782 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032a2:	f7ff fa5b 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 80032a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	461d      	mov	r5, r3
 80032ac:	f04f 0600 	mov.w	r6, #0
 80032b0:	46a8      	mov	r8, r5
 80032b2:	46b1      	mov	r9, r6
 80032b4:	eb18 0308 	adds.w	r3, r8, r8
 80032b8:	eb49 0409 	adc.w	r4, r9, r9
 80032bc:	4698      	mov	r8, r3
 80032be:	46a1      	mov	r9, r4
 80032c0:	eb18 0805 	adds.w	r8, r8, r5
 80032c4:	eb49 0906 	adc.w	r9, r9, r6
 80032c8:	f04f 0100 	mov.w	r1, #0
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032dc:	4688      	mov	r8, r1
 80032de:	4691      	mov	r9, r2
 80032e0:	eb18 0005 	adds.w	r0, r8, r5
 80032e4:	eb49 0106 	adc.w	r1, r9, r6
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	461d      	mov	r5, r3
 80032ee:	f04f 0600 	mov.w	r6, #0
 80032f2:	196b      	adds	r3, r5, r5
 80032f4:	eb46 0406 	adc.w	r4, r6, r6
 80032f8:	461a      	mov	r2, r3
 80032fa:	4623      	mov	r3, r4
 80032fc:	f7fc ffb8 	bl	8000270 <__aeabi_uldivmod>
 8003300:	4603      	mov	r3, r0
 8003302:	460c      	mov	r4, r1
 8003304:	461a      	mov	r2, r3
 8003306:	4b47      	ldr	r3, [pc, #284]	; (8003424 <UART_SetConfig+0x384>)
 8003308:	fba3 2302 	umull	r2, r3, r3, r2
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	461d      	mov	r5, r3
 8003316:	f04f 0600 	mov.w	r6, #0
 800331a:	46a9      	mov	r9, r5
 800331c:	46b2      	mov	sl, r6
 800331e:	eb19 0309 	adds.w	r3, r9, r9
 8003322:	eb4a 040a 	adc.w	r4, sl, sl
 8003326:	4699      	mov	r9, r3
 8003328:	46a2      	mov	sl, r4
 800332a:	eb19 0905 	adds.w	r9, r9, r5
 800332e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800333e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003342:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003346:	4689      	mov	r9, r1
 8003348:	4692      	mov	sl, r2
 800334a:	eb19 0005 	adds.w	r0, r9, r5
 800334e:	eb4a 0106 	adc.w	r1, sl, r6
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	461d      	mov	r5, r3
 8003358:	f04f 0600 	mov.w	r6, #0
 800335c:	196b      	adds	r3, r5, r5
 800335e:	eb46 0406 	adc.w	r4, r6, r6
 8003362:	461a      	mov	r2, r3
 8003364:	4623      	mov	r3, r4
 8003366:	f7fc ff83 	bl	8000270 <__aeabi_uldivmod>
 800336a:	4603      	mov	r3, r0
 800336c:	460c      	mov	r4, r1
 800336e:	461a      	mov	r2, r3
 8003370:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <UART_SetConfig+0x384>)
 8003372:	fba3 1302 	umull	r1, r3, r3, r2
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2164      	movs	r1, #100	; 0x64
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	3332      	adds	r3, #50	; 0x32
 8003384:	4a27      	ldr	r2, [pc, #156]	; (8003424 <UART_SetConfig+0x384>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003392:	4498      	add	r8, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	461d      	mov	r5, r3
 8003398:	f04f 0600 	mov.w	r6, #0
 800339c:	46a9      	mov	r9, r5
 800339e:	46b2      	mov	sl, r6
 80033a0:	eb19 0309 	adds.w	r3, r9, r9
 80033a4:	eb4a 040a 	adc.w	r4, sl, sl
 80033a8:	4699      	mov	r9, r3
 80033aa:	46a2      	mov	sl, r4
 80033ac:	eb19 0905 	adds.w	r9, r9, r5
 80033b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80033b4:	f04f 0100 	mov.w	r1, #0
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033c8:	4689      	mov	r9, r1
 80033ca:	4692      	mov	sl, r2
 80033cc:	eb19 0005 	adds.w	r0, r9, r5
 80033d0:	eb4a 0106 	adc.w	r1, sl, r6
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	461d      	mov	r5, r3
 80033da:	f04f 0600 	mov.w	r6, #0
 80033de:	196b      	adds	r3, r5, r5
 80033e0:	eb46 0406 	adc.w	r4, r6, r6
 80033e4:	461a      	mov	r2, r3
 80033e6:	4623      	mov	r3, r4
 80033e8:	f7fc ff42 	bl	8000270 <__aeabi_uldivmod>
 80033ec:	4603      	mov	r3, r0
 80033ee:	460c      	mov	r4, r1
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <UART_SetConfig+0x384>)
 80033f4:	fba3 1302 	umull	r1, r3, r3, r2
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	2164      	movs	r1, #100	; 0x64
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	3332      	adds	r3, #50	; 0x32
 8003406:	4a07      	ldr	r2, [pc, #28]	; (8003424 <UART_SetConfig+0x384>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	f003 0207 	and.w	r2, r3, #7
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4442      	add	r2, r8
 8003418:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800341a:	e1b2      	b.n	8003782 <UART_SetConfig+0x6e2>
 800341c:	40011000 	.word	0x40011000
 8003420:	40011400 	.word	0x40011400
 8003424:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4ad7      	ldr	r2, [pc, #860]	; (800378c <UART_SetConfig+0x6ec>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d005      	beq.n	800343e <UART_SetConfig+0x39e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4ad6      	ldr	r2, [pc, #856]	; (8003790 <UART_SetConfig+0x6f0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	f040 80d1 	bne.w	80035e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800343e:	f7ff f9a1 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 8003442:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	469a      	mov	sl, r3
 8003448:	f04f 0b00 	mov.w	fp, #0
 800344c:	46d0      	mov	r8, sl
 800344e:	46d9      	mov	r9, fp
 8003450:	eb18 0308 	adds.w	r3, r8, r8
 8003454:	eb49 0409 	adc.w	r4, r9, r9
 8003458:	4698      	mov	r8, r3
 800345a:	46a1      	mov	r9, r4
 800345c:	eb18 080a 	adds.w	r8, r8, sl
 8003460:	eb49 090b 	adc.w	r9, r9, fp
 8003464:	f04f 0100 	mov.w	r1, #0
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003470:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003474:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003478:	4688      	mov	r8, r1
 800347a:	4691      	mov	r9, r2
 800347c:	eb1a 0508 	adds.w	r5, sl, r8
 8003480:	eb4b 0609 	adc.w	r6, fp, r9
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4619      	mov	r1, r3
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	f04f 0400 	mov.w	r4, #0
 8003496:	0094      	lsls	r4, r2, #2
 8003498:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800349c:	008b      	lsls	r3, r1, #2
 800349e:	461a      	mov	r2, r3
 80034a0:	4623      	mov	r3, r4
 80034a2:	4628      	mov	r0, r5
 80034a4:	4631      	mov	r1, r6
 80034a6:	f7fc fee3 	bl	8000270 <__aeabi_uldivmod>
 80034aa:	4603      	mov	r3, r0
 80034ac:	460c      	mov	r4, r1
 80034ae:	461a      	mov	r2, r3
 80034b0:	4bb8      	ldr	r3, [pc, #736]	; (8003794 <UART_SetConfig+0x6f4>)
 80034b2:	fba3 2302 	umull	r2, r3, r3, r2
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	469b      	mov	fp, r3
 80034c0:	f04f 0c00 	mov.w	ip, #0
 80034c4:	46d9      	mov	r9, fp
 80034c6:	46e2      	mov	sl, ip
 80034c8:	eb19 0309 	adds.w	r3, r9, r9
 80034cc:	eb4a 040a 	adc.w	r4, sl, sl
 80034d0:	4699      	mov	r9, r3
 80034d2:	46a2      	mov	sl, r4
 80034d4:	eb19 090b 	adds.w	r9, r9, fp
 80034d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034dc:	f04f 0100 	mov.w	r1, #0
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034f0:	4689      	mov	r9, r1
 80034f2:	4692      	mov	sl, r2
 80034f4:	eb1b 0509 	adds.w	r5, fp, r9
 80034f8:	eb4c 060a 	adc.w	r6, ip, sl
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4619      	mov	r1, r3
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	f04f 0400 	mov.w	r4, #0
 800350e:	0094      	lsls	r4, r2, #2
 8003510:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003514:	008b      	lsls	r3, r1, #2
 8003516:	461a      	mov	r2, r3
 8003518:	4623      	mov	r3, r4
 800351a:	4628      	mov	r0, r5
 800351c:	4631      	mov	r1, r6
 800351e:	f7fc fea7 	bl	8000270 <__aeabi_uldivmod>
 8003522:	4603      	mov	r3, r0
 8003524:	460c      	mov	r4, r1
 8003526:	461a      	mov	r2, r3
 8003528:	4b9a      	ldr	r3, [pc, #616]	; (8003794 <UART_SetConfig+0x6f4>)
 800352a:	fba3 1302 	umull	r1, r3, r3, r2
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2164      	movs	r1, #100	; 0x64
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	3332      	adds	r3, #50	; 0x32
 800353c:	4a95      	ldr	r2, [pc, #596]	; (8003794 <UART_SetConfig+0x6f4>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003548:	4498      	add	r8, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	469b      	mov	fp, r3
 800354e:	f04f 0c00 	mov.w	ip, #0
 8003552:	46d9      	mov	r9, fp
 8003554:	46e2      	mov	sl, ip
 8003556:	eb19 0309 	adds.w	r3, r9, r9
 800355a:	eb4a 040a 	adc.w	r4, sl, sl
 800355e:	4699      	mov	r9, r3
 8003560:	46a2      	mov	sl, r4
 8003562:	eb19 090b 	adds.w	r9, r9, fp
 8003566:	eb4a 0a0c 	adc.w	sl, sl, ip
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003576:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800357a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800357e:	4689      	mov	r9, r1
 8003580:	4692      	mov	sl, r2
 8003582:	eb1b 0509 	adds.w	r5, fp, r9
 8003586:	eb4c 060a 	adc.w	r6, ip, sl
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4619      	mov	r1, r3
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	f04f 0400 	mov.w	r4, #0
 800359c:	0094      	lsls	r4, r2, #2
 800359e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035a2:	008b      	lsls	r3, r1, #2
 80035a4:	461a      	mov	r2, r3
 80035a6:	4623      	mov	r3, r4
 80035a8:	4628      	mov	r0, r5
 80035aa:	4631      	mov	r1, r6
 80035ac:	f7fc fe60 	bl	8000270 <__aeabi_uldivmod>
 80035b0:	4603      	mov	r3, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b77      	ldr	r3, [pc, #476]	; (8003794 <UART_SetConfig+0x6f4>)
 80035b8:	fba3 1302 	umull	r1, r3, r3, r2
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	2164      	movs	r1, #100	; 0x64
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	3332      	adds	r3, #50	; 0x32
 80035ca:	4a72      	ldr	r2, [pc, #456]	; (8003794 <UART_SetConfig+0x6f4>)
 80035cc:	fba2 2303 	umull	r2, r3, r2, r3
 80035d0:	095b      	lsrs	r3, r3, #5
 80035d2:	f003 020f 	and.w	r2, r3, #15
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4442      	add	r2, r8
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	e0d0      	b.n	8003782 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80035e0:	f7ff f8bc 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 80035e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	469a      	mov	sl, r3
 80035ea:	f04f 0b00 	mov.w	fp, #0
 80035ee:	46d0      	mov	r8, sl
 80035f0:	46d9      	mov	r9, fp
 80035f2:	eb18 0308 	adds.w	r3, r8, r8
 80035f6:	eb49 0409 	adc.w	r4, r9, r9
 80035fa:	4698      	mov	r8, r3
 80035fc:	46a1      	mov	r9, r4
 80035fe:	eb18 080a 	adds.w	r8, r8, sl
 8003602:	eb49 090b 	adc.w	r9, r9, fp
 8003606:	f04f 0100 	mov.w	r1, #0
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003612:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003616:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800361a:	4688      	mov	r8, r1
 800361c:	4691      	mov	r9, r2
 800361e:	eb1a 0508 	adds.w	r5, sl, r8
 8003622:	eb4b 0609 	adc.w	r6, fp, r9
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4619      	mov	r1, r3
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	f04f 0400 	mov.w	r4, #0
 8003638:	0094      	lsls	r4, r2, #2
 800363a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800363e:	008b      	lsls	r3, r1, #2
 8003640:	461a      	mov	r2, r3
 8003642:	4623      	mov	r3, r4
 8003644:	4628      	mov	r0, r5
 8003646:	4631      	mov	r1, r6
 8003648:	f7fc fe12 	bl	8000270 <__aeabi_uldivmod>
 800364c:	4603      	mov	r3, r0
 800364e:	460c      	mov	r4, r1
 8003650:	461a      	mov	r2, r3
 8003652:	4b50      	ldr	r3, [pc, #320]	; (8003794 <UART_SetConfig+0x6f4>)
 8003654:	fba3 2302 	umull	r2, r3, r3, r2
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	469b      	mov	fp, r3
 8003662:	f04f 0c00 	mov.w	ip, #0
 8003666:	46d9      	mov	r9, fp
 8003668:	46e2      	mov	sl, ip
 800366a:	eb19 0309 	adds.w	r3, r9, r9
 800366e:	eb4a 040a 	adc.w	r4, sl, sl
 8003672:	4699      	mov	r9, r3
 8003674:	46a2      	mov	sl, r4
 8003676:	eb19 090b 	adds.w	r9, r9, fp
 800367a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800368a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800368e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003692:	4689      	mov	r9, r1
 8003694:	4692      	mov	sl, r2
 8003696:	eb1b 0509 	adds.w	r5, fp, r9
 800369a:	eb4c 060a 	adc.w	r6, ip, sl
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4619      	mov	r1, r3
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	f04f 0400 	mov.w	r4, #0
 80036b0:	0094      	lsls	r4, r2, #2
 80036b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036b6:	008b      	lsls	r3, r1, #2
 80036b8:	461a      	mov	r2, r3
 80036ba:	4623      	mov	r3, r4
 80036bc:	4628      	mov	r0, r5
 80036be:	4631      	mov	r1, r6
 80036c0:	f7fc fdd6 	bl	8000270 <__aeabi_uldivmod>
 80036c4:	4603      	mov	r3, r0
 80036c6:	460c      	mov	r4, r1
 80036c8:	461a      	mov	r2, r3
 80036ca:	4b32      	ldr	r3, [pc, #200]	; (8003794 <UART_SetConfig+0x6f4>)
 80036cc:	fba3 1302 	umull	r1, r3, r3, r2
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	2164      	movs	r1, #100	; 0x64
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	3332      	adds	r3, #50	; 0x32
 80036de:	4a2d      	ldr	r2, [pc, #180]	; (8003794 <UART_SetConfig+0x6f4>)
 80036e0:	fba2 2303 	umull	r2, r3, r2, r3
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ea:	4498      	add	r8, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	469b      	mov	fp, r3
 80036f0:	f04f 0c00 	mov.w	ip, #0
 80036f4:	46d9      	mov	r9, fp
 80036f6:	46e2      	mov	sl, ip
 80036f8:	eb19 0309 	adds.w	r3, r9, r9
 80036fc:	eb4a 040a 	adc.w	r4, sl, sl
 8003700:	4699      	mov	r9, r3
 8003702:	46a2      	mov	sl, r4
 8003704:	eb19 090b 	adds.w	r9, r9, fp
 8003708:	eb4a 0a0c 	adc.w	sl, sl, ip
 800370c:	f04f 0100 	mov.w	r1, #0
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003718:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800371c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003720:	4689      	mov	r9, r1
 8003722:	4692      	mov	sl, r2
 8003724:	eb1b 0509 	adds.w	r5, fp, r9
 8003728:	eb4c 060a 	adc.w	r6, ip, sl
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	4619      	mov	r1, r3
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	f04f 0400 	mov.w	r4, #0
 800373e:	0094      	lsls	r4, r2, #2
 8003740:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003744:	008b      	lsls	r3, r1, #2
 8003746:	461a      	mov	r2, r3
 8003748:	4623      	mov	r3, r4
 800374a:	4628      	mov	r0, r5
 800374c:	4631      	mov	r1, r6
 800374e:	f7fc fd8f 	bl	8000270 <__aeabi_uldivmod>
 8003752:	4603      	mov	r3, r0
 8003754:	460c      	mov	r4, r1
 8003756:	461a      	mov	r2, r3
 8003758:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <UART_SetConfig+0x6f4>)
 800375a:	fba3 1302 	umull	r1, r3, r3, r2
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	2164      	movs	r1, #100	; 0x64
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	3332      	adds	r3, #50	; 0x32
 800376c:	4a09      	ldr	r2, [pc, #36]	; (8003794 <UART_SetConfig+0x6f4>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	f003 020f 	and.w	r2, r3, #15
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4442      	add	r2, r8
 800377e:	609a      	str	r2, [r3, #8]
}
 8003780:	e7ff      	b.n	8003782 <UART_SetConfig+0x6e2>
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800378c:	40011000 	.word	0x40011000
 8003790:	40011400 	.word	0x40011400
 8003794:	51eb851f 	.word	0x51eb851f

08003798 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003798:	b480      	push	{r7}
 800379a:	b089      	sub	sp, #36	; 0x24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	2103      	movs	r1, #3
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	401a      	ands	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	61bb      	str	r3, [r7, #24]
  return result;
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	fab3 f383 	clz	r3, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	fa01 f303 	lsl.w	r3, r1, r3
 80037e4:	431a      	orrs	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	601a      	str	r2, [r3, #0]
}
 80037ea:	bf00      	nop
 80037ec:	3724      	adds	r7, #36	; 0x24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	43db      	mvns	r3, r3
 800380a:	401a      	ands	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	431a      	orrs	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	605a      	str	r2, [r3, #4]
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8003826:	b480      	push	{r7}
 8003828:	b089      	sub	sp, #36	; 0x24
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	fa93 f3a3 	rbit	r3, r3
 8003840:	613b      	str	r3, [r7, #16]
  return result;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2103      	movs	r1, #3
 800384e:	fa01 f303 	lsl.w	r3, r1, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	401a      	ands	r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	61bb      	str	r3, [r7, #24]
  return result;
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	fa01 f303 	lsl.w	r3, r1, r3
 8003872:	431a      	orrs	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8003878:	bf00      	nop
 800387a:	3724      	adds	r7, #36	; 0x24
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	613b      	str	r3, [r7, #16]
  return result;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	2103      	movs	r1, #3
 80038ac:	fa01 f303 	lsl.w	r3, r1, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	401a      	ands	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	61bb      	str	r3, [r7, #24]
  return result;
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	fab3 f383 	clz	r3, r3
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	fa01 f303 	lsl.w	r3, r1, r3
 80038d0:	431a      	orrs	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	60da      	str	r2, [r3, #12]
}
 80038d6:	bf00      	nop
 80038d8:	3724      	adds	r7, #36	; 0x24
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b089      	sub	sp, #36	; 0x24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a1a      	ldr	r2, [r3, #32]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	fa93 f3a3 	rbit	r3, r3
 80038fc:	613b      	str	r3, [r7, #16]
  return result;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	fab3 f383 	clz	r3, r3
 8003904:	b2db      	uxtb	r3, r3
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	210f      	movs	r1, #15
 800390a:	fa01 f303 	lsl.w	r3, r1, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	401a      	ands	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	61bb      	str	r3, [r7, #24]
  return result;
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	fab3 f383 	clz	r3, r3
 8003924:	b2db      	uxtb	r3, r3
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	fa01 f303 	lsl.w	r3, r1, r3
 800392e:	431a      	orrs	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003934:	bf00      	nop
 8003936:	3724      	adds	r7, #36	; 0x24
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	0a1b      	lsrs	r3, r3, #8
 8003954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	fa93 f3a3 	rbit	r3, r3
 800395c:	613b      	str	r3, [r7, #16]
  return result;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	fab3 f383 	clz	r3, r3
 8003964:	b2db      	uxtb	r3, r3
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	210f      	movs	r1, #15
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	401a      	ands	r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	fa93 f3a3 	rbit	r3, r3
 800397e:	61bb      	str	r3, [r7, #24]
  return result;
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8003996:	bf00      	nop
 8003998:	3724      	adds	r7, #36	; 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b088      	sub	sp, #32
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	fa93 f3a3 	rbit	r3, r3
 80039c0:	613b      	str	r3, [r7, #16]
  return result;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80039cc:	e050      	b.n	8003a70 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	2101      	movs	r1, #1
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	4013      	ands	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d042      	beq.n	8003a6a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d003      	beq.n	80039f4 <LL_GPIO_Init+0x52>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d10d      	bne.n	8003a10 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	461a      	mov	r2, r3
 80039fa:	69b9      	ldr	r1, [r7, #24]
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ff12 	bl	8003826 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	461a      	mov	r2, r3
 8003a08:	69b9      	ldr	r1, [r7, #24]
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fef3 	bl	80037f6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	461a      	mov	r2, r3
 8003a16:	69b9      	ldr	r1, [r7, #24]
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff ff33 	bl	8003884 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d11a      	bne.n	8003a5c <LL_GPIO_Init+0xba>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	fa93 f3a3 	rbit	r3, r3
 8003a30:	60bb      	str	r3, [r7, #8]
  return result;
 8003a32:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003a34:	fab3 f383 	clz	r3, r3
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b07      	cmp	r3, #7
 8003a3c:	d807      	bhi.n	8003a4e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	461a      	mov	r2, r3
 8003a44:	69b9      	ldr	r1, [r7, #24]
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ff4b 	bl	80038e2 <LL_GPIO_SetAFPin_0_7>
 8003a4c:	e006      	b.n	8003a5c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	461a      	mov	r2, r3
 8003a54:	69b9      	ldr	r1, [r7, #24]
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ff72 	bl	8003940 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	461a      	mov	r2, r3
 8003a62:	69b9      	ldr	r1, [r7, #24]
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff fe97 	bl	8003798 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1a7      	bne.n	80039ce <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3720      	adds	r7, #32
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003a8c:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <LL_RCC_GetSysClkSource+0x18>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 030c 	and.w	r3, r3, #12
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800

08003aa4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <LL_RCC_GetAHBPrescaler+0x18>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800

08003ac0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003ac4:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800

08003adc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800

08003af8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003afc:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <LL_RCC_PLL_GetMainSource+0x18>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800

08003b14 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <LL_RCC_PLL_GetN+0x18>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	099b      	lsrs	r3, r3, #6
 8003b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	40023800 	.word	0x40023800

08003b30 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <LL_RCC_PLL_GetP+0x18>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800

08003b4c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <LL_RCC_PLL_GetDivider+0x18>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800

08003b68 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003b70:	f000 f820 	bl	8003bb4 <RCC_GetSystemClockFreq>
 8003b74:	4602      	mov	r2, r0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 f83e 	bl	8003c00 <RCC_GetHCLKClockFreq>
 8003b84:	4602      	mov	r2, r0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f84c 	bl	8003c2c <RCC_GetPCLK1ClockFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 f858 	bl	8003c54 <RCC_GetPCLK2ClockFreq>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	60da      	str	r2, [r3, #12]
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003bbe:	f7ff ff63 	bl	8003a88 <LL_RCC_GetSysClkSource>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d006      	beq.n	8003bd6 <RCC_GetSystemClockFreq+0x22>
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d007      	beq.n	8003bdc <RCC_GetSystemClockFreq+0x28>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <RCC_GetSystemClockFreq+0x44>)
 8003bd2:	607b      	str	r3, [r7, #4]
      break;
 8003bd4:	e00a      	b.n	8003bec <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <RCC_GetSystemClockFreq+0x48>)
 8003bd8:	607b      	str	r3, [r7, #4]
      break;
 8003bda:	e007      	b.n	8003bec <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003bdc:	2008      	movs	r0, #8
 8003bde:	f000 f84d 	bl	8003c7c <RCC_PLL_GetFreqDomain_SYS>
 8003be2:	6078      	str	r0, [r7, #4]
      break;
 8003be4:	e002      	b.n	8003bec <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <RCC_GetSystemClockFreq+0x44>)
 8003be8:	607b      	str	r3, [r7, #4]
      break;
 8003bea:	bf00      	nop
  }

  return frequency;
 8003bec:	687b      	ldr	r3, [r7, #4]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	00f42400 	.word	0x00f42400
 8003bfc:	007a1200 	.word	0x007a1200

08003c00 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003c08:	f7ff ff4c 	bl	8003aa4 <LL_RCC_GetAHBPrescaler>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <RCC_GetHCLKClockFreq+0x28>)
 8003c16:	5cd3      	ldrb	r3, [r2, r3]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	40d3      	lsrs	r3, r2
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	08005270 	.word	0x08005270

08003c2c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003c34:	f7ff ff44 	bl	8003ac0 <LL_RCC_GetAPB1Prescaler>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	0a9b      	lsrs	r3, r3, #10
 8003c3c:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <RCC_GetPCLK1ClockFreq+0x24>)
 8003c3e:	5cd3      	ldrb	r3, [r2, r3]
 8003c40:	461a      	mov	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	40d3      	lsrs	r3, r2
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	08005280 	.word	0x08005280

08003c54 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003c5c:	f7ff ff3e 	bl	8003adc <LL_RCC_GetAPB2Prescaler>
 8003c60:	4603      	mov	r3, r0
 8003c62:	0b5b      	lsrs	r3, r3, #13
 8003c64:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <RCC_GetPCLK2ClockFreq+0x24>)
 8003c66:	5cd3      	ldrb	r3, [r2, r3]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	40d3      	lsrs	r3, r2
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	08005280 	.word	0x08005280

08003c7c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003c90:	f7ff ff32 	bl	8003af8 <LL_RCC_PLL_GetMainSource>
 8003c94:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8003c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca0:	d003      	beq.n	8003caa <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8003ca2:	e005      	b.n	8003cb0 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003ca4:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003ca6:	617b      	str	r3, [r7, #20]
      break;
 8003ca8:	e005      	b.n	8003cb6 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003cac:	617b      	str	r3, [r7, #20]
      break;
 8003cae:	e002      	b.n	8003cb6 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003cb2:	617b      	str	r3, [r7, #20]
      break;
 8003cb4:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d113      	bne.n	8003ce4 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003cbc:	f7ff ff46 	bl	8003b4c <LL_RCC_PLL_GetDivider>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	fbb3 f4f2 	udiv	r4, r3, r2
 8003cc8:	f7ff ff24 	bl	8003b14 <LL_RCC_PLL_GetN>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	fb03 f404 	mul.w	r4, r3, r4
 8003cd2:	f7ff ff2d 	bl	8003b30 <LL_RCC_PLL_GetP>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	3301      	adds	r3, #1
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ce2:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003ce4:	693b      	ldr	r3, [r7, #16]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd90      	pop	{r4, r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	00f42400 	.word	0x00f42400
 8003cf4:	007a1200 	.word	0x007a1200

08003cf8 <LL_USART_IsEnabled>:
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2301      	moveq	r3, #1
 8003d10:	2300      	movne	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_USART_SetStopBitsLength>:
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	611a      	str	r2, [r3, #16]
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <LL_USART_SetHWFlowCtrl>:
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	615a      	str	r2, [r3, #20]
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <LL_USART_SetBaudRate>:
{
 8003d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d82:	f040 80c1 	bne.w	8003f08 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	461d      	mov	r5, r3
 8003d8a:	f04f 0600 	mov.w	r6, #0
 8003d8e:	46a8      	mov	r8, r5
 8003d90:	46b1      	mov	r9, r6
 8003d92:	eb18 0308 	adds.w	r3, r8, r8
 8003d96:	eb49 0409 	adc.w	r4, r9, r9
 8003d9a:	4698      	mov	r8, r3
 8003d9c:	46a1      	mov	r9, r4
 8003d9e:	eb18 0805 	adds.w	r8, r8, r5
 8003da2:	eb49 0906 	adc.w	r9, r9, r6
 8003da6:	f04f 0100 	mov.w	r1, #0
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003db2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003db6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dba:	4688      	mov	r8, r1
 8003dbc:	4691      	mov	r9, r2
 8003dbe:	eb18 0005 	adds.w	r0, r8, r5
 8003dc2:	eb49 0106 	adc.w	r1, r9, r6
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	461d      	mov	r5, r3
 8003dca:	f04f 0600 	mov.w	r6, #0
 8003dce:	196b      	adds	r3, r5, r5
 8003dd0:	eb46 0406 	adc.w	r4, r6, r6
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	f7fc fa4a 	bl	8000270 <__aeabi_uldivmod>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	461a      	mov	r2, r3
 8003de2:	4bb5      	ldr	r3, [pc, #724]	; (80040b8 <LL_USART_SetBaudRate+0x34c>)
 8003de4:	fba3 2302 	umull	r2, r3, r3, r2
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	fa1f f883 	uxth.w	r8, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	461d      	mov	r5, r3
 8003df6:	f04f 0600 	mov.w	r6, #0
 8003dfa:	46a9      	mov	r9, r5
 8003dfc:	46b2      	mov	sl, r6
 8003dfe:	eb19 0309 	adds.w	r3, r9, r9
 8003e02:	eb4a 040a 	adc.w	r4, sl, sl
 8003e06:	4699      	mov	r9, r3
 8003e08:	46a2      	mov	sl, r4
 8003e0a:	eb19 0905 	adds.w	r9, r9, r5
 8003e0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e12:	f04f 0100 	mov.w	r1, #0
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e26:	4689      	mov	r9, r1
 8003e28:	4692      	mov	sl, r2
 8003e2a:	eb19 0005 	adds.w	r0, r9, r5
 8003e2e:	eb4a 0106 	adc.w	r1, sl, r6
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	461d      	mov	r5, r3
 8003e36:	f04f 0600 	mov.w	r6, #0
 8003e3a:	196b      	adds	r3, r5, r5
 8003e3c:	eb46 0406 	adc.w	r4, r6, r6
 8003e40:	461a      	mov	r2, r3
 8003e42:	4623      	mov	r3, r4
 8003e44:	f7fc fa14 	bl	8000270 <__aeabi_uldivmod>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b9a      	ldr	r3, [pc, #616]	; (80040b8 <LL_USART_SetBaudRate+0x34c>)
 8003e50:	fba3 1302 	umull	r1, r3, r3, r2
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	2164      	movs	r1, #100	; 0x64
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	3332      	adds	r3, #50	; 0x32
 8003e62:	4a95      	ldr	r2, [pc, #596]	; (80040b8 <LL_USART_SetBaudRate+0x34c>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	4443      	add	r3, r8
 8003e78:	fa1f f883 	uxth.w	r8, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	461d      	mov	r5, r3
 8003e80:	f04f 0600 	mov.w	r6, #0
 8003e84:	46a9      	mov	r9, r5
 8003e86:	46b2      	mov	sl, r6
 8003e88:	eb19 0309 	adds.w	r3, r9, r9
 8003e8c:	eb4a 040a 	adc.w	r4, sl, sl
 8003e90:	4699      	mov	r9, r3
 8003e92:	46a2      	mov	sl, r4
 8003e94:	eb19 0905 	adds.w	r9, r9, r5
 8003e98:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e9c:	f04f 0100 	mov.w	r1, #0
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ea8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003eac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003eb0:	4689      	mov	r9, r1
 8003eb2:	4692      	mov	sl, r2
 8003eb4:	eb19 0005 	adds.w	r0, r9, r5
 8003eb8:	eb4a 0106 	adc.w	r1, sl, r6
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	461d      	mov	r5, r3
 8003ec0:	f04f 0600 	mov.w	r6, #0
 8003ec4:	196b      	adds	r3, r5, r5
 8003ec6:	eb46 0406 	adc.w	r4, r6, r6
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4623      	mov	r3, r4
 8003ece:	f7fc f9cf 	bl	8000270 <__aeabi_uldivmod>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	460c      	mov	r4, r1
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4b77      	ldr	r3, [pc, #476]	; (80040b8 <LL_USART_SetBaudRate+0x34c>)
 8003eda:	fba3 1302 	umull	r1, r3, r3, r2
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	2164      	movs	r1, #100	; 0x64
 8003ee2:	fb01 f303 	mul.w	r3, r1, r3
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	3332      	adds	r3, #50	; 0x32
 8003eec:	4a72      	ldr	r2, [pc, #456]	; (80040b8 <LL_USART_SetBaudRate+0x34c>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	4443      	add	r3, r8
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	609a      	str	r2, [r3, #8]
}
 8003f06:	e0d2      	b.n	80040ae <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	469a      	mov	sl, r3
 8003f0c:	f04f 0b00 	mov.w	fp, #0
 8003f10:	46d0      	mov	r8, sl
 8003f12:	46d9      	mov	r9, fp
 8003f14:	eb18 0308 	adds.w	r3, r8, r8
 8003f18:	eb49 0409 	adc.w	r4, r9, r9
 8003f1c:	4698      	mov	r8, r3
 8003f1e:	46a1      	mov	r9, r4
 8003f20:	eb18 080a 	adds.w	r8, r8, sl
 8003f24:	eb49 090b 	adc.w	r9, r9, fp
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f3c:	4688      	mov	r8, r1
 8003f3e:	4691      	mov	r9, r2
 8003f40:	eb1a 0508 	adds.w	r5, sl, r8
 8003f44:	eb4b 0609 	adc.w	r6, fp, r9
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	f04f 0400 	mov.w	r4, #0
 8003f58:	0094      	lsls	r4, r2, #2
 8003f5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f5e:	008b      	lsls	r3, r1, #2
 8003f60:	461a      	mov	r2, r3
 8003f62:	4623      	mov	r3, r4
 8003f64:	4628      	mov	r0, r5
 8003f66:	4631      	mov	r1, r6
 8003f68:	f7fc f982 	bl	8000270 <__aeabi_uldivmod>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	460c      	mov	r4, r1
 8003f70:	461a      	mov	r2, r3
 8003f72:	4b51      	ldr	r3, [pc, #324]	; (80040b8 <LL_USART_SetBaudRate+0x34c>)
 8003f74:	fba3 2302 	umull	r2, r3, r3, r2
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	fa1f f883 	uxth.w	r8, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	469b      	mov	fp, r3
 8003f86:	f04f 0c00 	mov.w	ip, #0
 8003f8a:	46d9      	mov	r9, fp
 8003f8c:	46e2      	mov	sl, ip
 8003f8e:	eb19 0309 	adds.w	r3, r9, r9
 8003f92:	eb4a 040a 	adc.w	r4, sl, sl
 8003f96:	4699      	mov	r9, r3
 8003f98:	46a2      	mov	sl, r4
 8003f9a:	eb19 090b 	adds.w	r9, r9, fp
 8003f9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fa2:	f04f 0100 	mov.w	r1, #0
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fb6:	4689      	mov	r9, r1
 8003fb8:	4692      	mov	sl, r2
 8003fba:	eb1b 0509 	adds.w	r5, fp, r9
 8003fbe:	eb4c 060a 	adc.w	r6, ip, sl
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	f04f 0400 	mov.w	r4, #0
 8003fd2:	0094      	lsls	r4, r2, #2
 8003fd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fd8:	008b      	lsls	r3, r1, #2
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4623      	mov	r3, r4
 8003fde:	4628      	mov	r0, r5
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	f7fc f945 	bl	8000270 <__aeabi_uldivmod>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	460c      	mov	r4, r1
 8003fea:	461a      	mov	r2, r3
 8003fec:	4b32      	ldr	r3, [pc, #200]	; (80040b8 <LL_USART_SetBaudRate+0x34c>)
 8003fee:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	2164      	movs	r1, #100	; 0x64
 8003ff6:	fb01 f303 	mul.w	r3, r1, r3
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	3332      	adds	r3, #50	; 0x32
 8004000:	4a2d      	ldr	r2, [pc, #180]	; (80040b8 <LL_USART_SetBaudRate+0x34c>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	b29b      	uxth	r3, r3
 800400a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800400e:	b29b      	uxth	r3, r3
 8004010:	4443      	add	r3, r8
 8004012:	fa1f f883 	uxth.w	r8, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	469b      	mov	fp, r3
 800401a:	f04f 0c00 	mov.w	ip, #0
 800401e:	46d9      	mov	r9, fp
 8004020:	46e2      	mov	sl, ip
 8004022:	eb19 0309 	adds.w	r3, r9, r9
 8004026:	eb4a 040a 	adc.w	r4, sl, sl
 800402a:	4699      	mov	r9, r3
 800402c:	46a2      	mov	sl, r4
 800402e:	eb19 090b 	adds.w	r9, r9, fp
 8004032:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004036:	f04f 0100 	mov.w	r1, #0
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004042:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004046:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800404a:	4689      	mov	r9, r1
 800404c:	4692      	mov	sl, r2
 800404e:	eb1b 0509 	adds.w	r5, fp, r9
 8004052:	eb4c 060a 	adc.w	r6, ip, sl
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	4619      	mov	r1, r3
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	f04f 0400 	mov.w	r4, #0
 8004066:	0094      	lsls	r4, r2, #2
 8004068:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800406c:	008b      	lsls	r3, r1, #2
 800406e:	461a      	mov	r2, r3
 8004070:	4623      	mov	r3, r4
 8004072:	4628      	mov	r0, r5
 8004074:	4631      	mov	r1, r6
 8004076:	f7fc f8fb 	bl	8000270 <__aeabi_uldivmod>
 800407a:	4603      	mov	r3, r0
 800407c:	460c      	mov	r4, r1
 800407e:	461a      	mov	r2, r3
 8004080:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <LL_USART_SetBaudRate+0x34c>)
 8004082:	fba3 1302 	umull	r1, r3, r3, r2
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2164      	movs	r1, #100	; 0x64
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	3332      	adds	r3, #50	; 0x32
 8004094:	4a08      	ldr	r2, [pc, #32]	; (80040b8 <LL_USART_SetBaudRate+0x34c>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	b29b      	uxth	r3, r3
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	4443      	add	r3, r8
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	609a      	str	r2, [r3, #8]
}
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b8:	51eb851f 	.word	0x51eb851f

080040bc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fe12 	bl	8003cf8 <LL_USART_IsEnabled>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d15e      	bne.n	8004198 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040e2:	f023 030c 	bic.w	r3, r3, #12
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	6851      	ldr	r1, [r2, #4]
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	68d2      	ldr	r2, [r2, #12]
 80040ee:	4311      	orrs	r1, r2
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	6912      	ldr	r2, [r2, #16]
 80040f4:	4311      	orrs	r1, r2
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	6992      	ldr	r2, [r2, #24]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	4619      	mov	r1, r3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fe09 	bl	8003d20 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff fe16 	bl	8003d46 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800411a:	f107 0308 	add.w	r3, r7, #8
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fd22 	bl	8003b68 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a1f      	ldr	r2, [pc, #124]	; (80041a4 <LL_USART_Init+0xe8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d102      	bne.n	8004132 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	61bb      	str	r3, [r7, #24]
 8004130:	e021      	b.n	8004176 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1c      	ldr	r2, [pc, #112]	; (80041a8 <LL_USART_Init+0xec>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d102      	bne.n	8004140 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	e01a      	b.n	8004176 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a1a      	ldr	r2, [pc, #104]	; (80041ac <LL_USART_Init+0xf0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d102      	bne.n	800414e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	e013      	b.n	8004176 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <LL_USART_Init+0xf4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d102      	bne.n	800415c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	e00c      	b.n	8004176 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a15      	ldr	r2, [pc, #84]	; (80041b4 <LL_USART_Init+0xf8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d102      	bne.n	800416a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	e005      	b.n	8004176 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <LL_USART_Init+0xfc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d101      	bne.n	8004176 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00d      	beq.n	8004198 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d009      	beq.n	8004198 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004184:	2300      	movs	r3, #0
 8004186:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	699a      	ldr	r2, [r3, #24]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69b9      	ldr	r1, [r7, #24]
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff fdea 	bl	8003d6c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004198:	7ffb      	ldrb	r3, [r7, #31]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40011000 	.word	0x40011000
 80041a8:	40004400 	.word	0x40004400
 80041ac:	40004800 	.word	0x40004800
 80041b0:	40011400 	.word	0x40011400
 80041b4:	40004c00 	.word	0x40004c00
 80041b8:	40005000 	.word	0x40005000

080041bc <__assert_func>:
 80041bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80041be:	461c      	mov	r4, r3
 80041c0:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <__assert_func+0x2c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4605      	mov	r5, r0
 80041c6:	68d8      	ldr	r0, [r3, #12]
 80041c8:	b152      	cbz	r2, 80041e0 <__assert_func+0x24>
 80041ca:	4b08      	ldr	r3, [pc, #32]	; (80041ec <__assert_func+0x30>)
 80041cc:	9100      	str	r1, [sp, #0]
 80041ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80041d2:	4907      	ldr	r1, [pc, #28]	; (80041f0 <__assert_func+0x34>)
 80041d4:	462b      	mov	r3, r5
 80041d6:	4622      	mov	r2, r4
 80041d8:	f000 f814 	bl	8004204 <fiprintf>
 80041dc:	f000 fbf0 	bl	80049c0 <abort>
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <__assert_func+0x38>)
 80041e2:	461a      	mov	r2, r3
 80041e4:	e7f2      	b.n	80041cc <__assert_func+0x10>
 80041e6:	bf00      	nop
 80041e8:	2000000c 	.word	0x2000000c
 80041ec:	08005288 	.word	0x08005288
 80041f0:	08005295 	.word	0x08005295
 80041f4:	080052c3 	.word	0x080052c3

080041f8 <__errno>:
 80041f8:	4b01      	ldr	r3, [pc, #4]	; (8004200 <__errno+0x8>)
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	2000000c 	.word	0x2000000c

08004204 <fiprintf>:
 8004204:	b40e      	push	{r1, r2, r3}
 8004206:	b503      	push	{r0, r1, lr}
 8004208:	4601      	mov	r1, r0
 800420a:	ab03      	add	r3, sp, #12
 800420c:	4805      	ldr	r0, [pc, #20]	; (8004224 <fiprintf+0x20>)
 800420e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004212:	6800      	ldr	r0, [r0, #0]
 8004214:	9301      	str	r3, [sp, #4]
 8004216:	f000 f85d 	bl	80042d4 <_vfiprintf_r>
 800421a:	b002      	add	sp, #8
 800421c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004220:	b003      	add	sp, #12
 8004222:	4770      	bx	lr
 8004224:	2000000c 	.word	0x2000000c

08004228 <__libc_init_array>:
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	4e0d      	ldr	r6, [pc, #52]	; (8004260 <__libc_init_array+0x38>)
 800422c:	4c0d      	ldr	r4, [pc, #52]	; (8004264 <__libc_init_array+0x3c>)
 800422e:	1ba4      	subs	r4, r4, r6
 8004230:	10a4      	asrs	r4, r4, #2
 8004232:	2500      	movs	r5, #0
 8004234:	42a5      	cmp	r5, r4
 8004236:	d109      	bne.n	800424c <__libc_init_array+0x24>
 8004238:	4e0b      	ldr	r6, [pc, #44]	; (8004268 <__libc_init_array+0x40>)
 800423a:	4c0c      	ldr	r4, [pc, #48]	; (800426c <__libc_init_array+0x44>)
 800423c:	f000 ff50 	bl	80050e0 <_init>
 8004240:	1ba4      	subs	r4, r4, r6
 8004242:	10a4      	asrs	r4, r4, #2
 8004244:	2500      	movs	r5, #0
 8004246:	42a5      	cmp	r5, r4
 8004248:	d105      	bne.n	8004256 <__libc_init_array+0x2e>
 800424a:	bd70      	pop	{r4, r5, r6, pc}
 800424c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004250:	4798      	blx	r3
 8004252:	3501      	adds	r5, #1
 8004254:	e7ee      	b.n	8004234 <__libc_init_array+0xc>
 8004256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800425a:	4798      	blx	r3
 800425c:	3501      	adds	r5, #1
 800425e:	e7f2      	b.n	8004246 <__libc_init_array+0x1e>
 8004260:	08005364 	.word	0x08005364
 8004264:	08005364 	.word	0x08005364
 8004268:	08005364 	.word	0x08005364
 800426c:	08005368 	.word	0x08005368

08004270 <memset>:
 8004270:	4402      	add	r2, r0
 8004272:	4603      	mov	r3, r0
 8004274:	4293      	cmp	r3, r2
 8004276:	d100      	bne.n	800427a <memset+0xa>
 8004278:	4770      	bx	lr
 800427a:	f803 1b01 	strb.w	r1, [r3], #1
 800427e:	e7f9      	b.n	8004274 <memset+0x4>

08004280 <__sfputc_r>:
 8004280:	6893      	ldr	r3, [r2, #8]
 8004282:	3b01      	subs	r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	b410      	push	{r4}
 8004288:	6093      	str	r3, [r2, #8]
 800428a:	da08      	bge.n	800429e <__sfputc_r+0x1e>
 800428c:	6994      	ldr	r4, [r2, #24]
 800428e:	42a3      	cmp	r3, r4
 8004290:	db01      	blt.n	8004296 <__sfputc_r+0x16>
 8004292:	290a      	cmp	r1, #10
 8004294:	d103      	bne.n	800429e <__sfputc_r+0x1e>
 8004296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800429a:	f000 bad1 	b.w	8004840 <__swbuf_r>
 800429e:	6813      	ldr	r3, [r2, #0]
 80042a0:	1c58      	adds	r0, r3, #1
 80042a2:	6010      	str	r0, [r2, #0]
 80042a4:	7019      	strb	r1, [r3, #0]
 80042a6:	4608      	mov	r0, r1
 80042a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <__sfputs_r>:
 80042ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b0:	4606      	mov	r6, r0
 80042b2:	460f      	mov	r7, r1
 80042b4:	4614      	mov	r4, r2
 80042b6:	18d5      	adds	r5, r2, r3
 80042b8:	42ac      	cmp	r4, r5
 80042ba:	d101      	bne.n	80042c0 <__sfputs_r+0x12>
 80042bc:	2000      	movs	r0, #0
 80042be:	e007      	b.n	80042d0 <__sfputs_r+0x22>
 80042c0:	463a      	mov	r2, r7
 80042c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c6:	4630      	mov	r0, r6
 80042c8:	f7ff ffda 	bl	8004280 <__sfputc_r>
 80042cc:	1c43      	adds	r3, r0, #1
 80042ce:	d1f3      	bne.n	80042b8 <__sfputs_r+0xa>
 80042d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042d4 <_vfiprintf_r>:
 80042d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d8:	460c      	mov	r4, r1
 80042da:	b09d      	sub	sp, #116	; 0x74
 80042dc:	4617      	mov	r7, r2
 80042de:	461d      	mov	r5, r3
 80042e0:	4606      	mov	r6, r0
 80042e2:	b118      	cbz	r0, 80042ec <_vfiprintf_r+0x18>
 80042e4:	6983      	ldr	r3, [r0, #24]
 80042e6:	b90b      	cbnz	r3, 80042ec <_vfiprintf_r+0x18>
 80042e8:	f000 fc62 	bl	8004bb0 <__sinit>
 80042ec:	4b7c      	ldr	r3, [pc, #496]	; (80044e0 <_vfiprintf_r+0x20c>)
 80042ee:	429c      	cmp	r4, r3
 80042f0:	d158      	bne.n	80043a4 <_vfiprintf_r+0xd0>
 80042f2:	6874      	ldr	r4, [r6, #4]
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	0718      	lsls	r0, r3, #28
 80042f8:	d55e      	bpl.n	80043b8 <_vfiprintf_r+0xe4>
 80042fa:	6923      	ldr	r3, [r4, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d05b      	beq.n	80043b8 <_vfiprintf_r+0xe4>
 8004300:	2300      	movs	r3, #0
 8004302:	9309      	str	r3, [sp, #36]	; 0x24
 8004304:	2320      	movs	r3, #32
 8004306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800430a:	2330      	movs	r3, #48	; 0x30
 800430c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004310:	9503      	str	r5, [sp, #12]
 8004312:	f04f 0b01 	mov.w	fp, #1
 8004316:	46b8      	mov	r8, r7
 8004318:	4645      	mov	r5, r8
 800431a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800431e:	b10b      	cbz	r3, 8004324 <_vfiprintf_r+0x50>
 8004320:	2b25      	cmp	r3, #37	; 0x25
 8004322:	d154      	bne.n	80043ce <_vfiprintf_r+0xfa>
 8004324:	ebb8 0a07 	subs.w	sl, r8, r7
 8004328:	d00b      	beq.n	8004342 <_vfiprintf_r+0x6e>
 800432a:	4653      	mov	r3, sl
 800432c:	463a      	mov	r2, r7
 800432e:	4621      	mov	r1, r4
 8004330:	4630      	mov	r0, r6
 8004332:	f7ff ffbc 	bl	80042ae <__sfputs_r>
 8004336:	3001      	adds	r0, #1
 8004338:	f000 80c2 	beq.w	80044c0 <_vfiprintf_r+0x1ec>
 800433c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800433e:	4453      	add	r3, sl
 8004340:	9309      	str	r3, [sp, #36]	; 0x24
 8004342:	f898 3000 	ldrb.w	r3, [r8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80ba 	beq.w	80044c0 <_vfiprintf_r+0x1ec>
 800434c:	2300      	movs	r3, #0
 800434e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004356:	9304      	str	r3, [sp, #16]
 8004358:	9307      	str	r3, [sp, #28]
 800435a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800435e:	931a      	str	r3, [sp, #104]	; 0x68
 8004360:	46a8      	mov	r8, r5
 8004362:	2205      	movs	r2, #5
 8004364:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004368:	485e      	ldr	r0, [pc, #376]	; (80044e4 <_vfiprintf_r+0x210>)
 800436a:	f7fb ff31 	bl	80001d0 <memchr>
 800436e:	9b04      	ldr	r3, [sp, #16]
 8004370:	bb78      	cbnz	r0, 80043d2 <_vfiprintf_r+0xfe>
 8004372:	06d9      	lsls	r1, r3, #27
 8004374:	bf44      	itt	mi
 8004376:	2220      	movmi	r2, #32
 8004378:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800437c:	071a      	lsls	r2, r3, #28
 800437e:	bf44      	itt	mi
 8004380:	222b      	movmi	r2, #43	; 0x2b
 8004382:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004386:	782a      	ldrb	r2, [r5, #0]
 8004388:	2a2a      	cmp	r2, #42	; 0x2a
 800438a:	d02a      	beq.n	80043e2 <_vfiprintf_r+0x10e>
 800438c:	9a07      	ldr	r2, [sp, #28]
 800438e:	46a8      	mov	r8, r5
 8004390:	2000      	movs	r0, #0
 8004392:	250a      	movs	r5, #10
 8004394:	4641      	mov	r1, r8
 8004396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800439a:	3b30      	subs	r3, #48	; 0x30
 800439c:	2b09      	cmp	r3, #9
 800439e:	d969      	bls.n	8004474 <_vfiprintf_r+0x1a0>
 80043a0:	b360      	cbz	r0, 80043fc <_vfiprintf_r+0x128>
 80043a2:	e024      	b.n	80043ee <_vfiprintf_r+0x11a>
 80043a4:	4b50      	ldr	r3, [pc, #320]	; (80044e8 <_vfiprintf_r+0x214>)
 80043a6:	429c      	cmp	r4, r3
 80043a8:	d101      	bne.n	80043ae <_vfiprintf_r+0xda>
 80043aa:	68b4      	ldr	r4, [r6, #8]
 80043ac:	e7a2      	b.n	80042f4 <_vfiprintf_r+0x20>
 80043ae:	4b4f      	ldr	r3, [pc, #316]	; (80044ec <_vfiprintf_r+0x218>)
 80043b0:	429c      	cmp	r4, r3
 80043b2:	bf08      	it	eq
 80043b4:	68f4      	ldreq	r4, [r6, #12]
 80043b6:	e79d      	b.n	80042f4 <_vfiprintf_r+0x20>
 80043b8:	4621      	mov	r1, r4
 80043ba:	4630      	mov	r0, r6
 80043bc:	f000 fa92 	bl	80048e4 <__swsetup_r>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	d09d      	beq.n	8004300 <_vfiprintf_r+0x2c>
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043c8:	b01d      	add	sp, #116	; 0x74
 80043ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ce:	46a8      	mov	r8, r5
 80043d0:	e7a2      	b.n	8004318 <_vfiprintf_r+0x44>
 80043d2:	4a44      	ldr	r2, [pc, #272]	; (80044e4 <_vfiprintf_r+0x210>)
 80043d4:	1a80      	subs	r0, r0, r2
 80043d6:	fa0b f000 	lsl.w	r0, fp, r0
 80043da:	4318      	orrs	r0, r3
 80043dc:	9004      	str	r0, [sp, #16]
 80043de:	4645      	mov	r5, r8
 80043e0:	e7be      	b.n	8004360 <_vfiprintf_r+0x8c>
 80043e2:	9a03      	ldr	r2, [sp, #12]
 80043e4:	1d11      	adds	r1, r2, #4
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	9103      	str	r1, [sp, #12]
 80043ea:	2a00      	cmp	r2, #0
 80043ec:	db01      	blt.n	80043f2 <_vfiprintf_r+0x11e>
 80043ee:	9207      	str	r2, [sp, #28]
 80043f0:	e004      	b.n	80043fc <_vfiprintf_r+0x128>
 80043f2:	4252      	negs	r2, r2
 80043f4:	f043 0302 	orr.w	r3, r3, #2
 80043f8:	9207      	str	r2, [sp, #28]
 80043fa:	9304      	str	r3, [sp, #16]
 80043fc:	f898 3000 	ldrb.w	r3, [r8]
 8004400:	2b2e      	cmp	r3, #46	; 0x2e
 8004402:	d10e      	bne.n	8004422 <_vfiprintf_r+0x14e>
 8004404:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004408:	2b2a      	cmp	r3, #42	; 0x2a
 800440a:	d138      	bne.n	800447e <_vfiprintf_r+0x1aa>
 800440c:	9b03      	ldr	r3, [sp, #12]
 800440e:	1d1a      	adds	r2, r3, #4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	9203      	str	r2, [sp, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	bfb8      	it	lt
 8004418:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800441c:	f108 0802 	add.w	r8, r8, #2
 8004420:	9305      	str	r3, [sp, #20]
 8004422:	4d33      	ldr	r5, [pc, #204]	; (80044f0 <_vfiprintf_r+0x21c>)
 8004424:	f898 1000 	ldrb.w	r1, [r8]
 8004428:	2203      	movs	r2, #3
 800442a:	4628      	mov	r0, r5
 800442c:	f7fb fed0 	bl	80001d0 <memchr>
 8004430:	b140      	cbz	r0, 8004444 <_vfiprintf_r+0x170>
 8004432:	2340      	movs	r3, #64	; 0x40
 8004434:	1b40      	subs	r0, r0, r5
 8004436:	fa03 f000 	lsl.w	r0, r3, r0
 800443a:	9b04      	ldr	r3, [sp, #16]
 800443c:	4303      	orrs	r3, r0
 800443e:	f108 0801 	add.w	r8, r8, #1
 8004442:	9304      	str	r3, [sp, #16]
 8004444:	f898 1000 	ldrb.w	r1, [r8]
 8004448:	482a      	ldr	r0, [pc, #168]	; (80044f4 <_vfiprintf_r+0x220>)
 800444a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800444e:	2206      	movs	r2, #6
 8004450:	f108 0701 	add.w	r7, r8, #1
 8004454:	f7fb febc 	bl	80001d0 <memchr>
 8004458:	2800      	cmp	r0, #0
 800445a:	d037      	beq.n	80044cc <_vfiprintf_r+0x1f8>
 800445c:	4b26      	ldr	r3, [pc, #152]	; (80044f8 <_vfiprintf_r+0x224>)
 800445e:	bb1b      	cbnz	r3, 80044a8 <_vfiprintf_r+0x1d4>
 8004460:	9b03      	ldr	r3, [sp, #12]
 8004462:	3307      	adds	r3, #7
 8004464:	f023 0307 	bic.w	r3, r3, #7
 8004468:	3308      	adds	r3, #8
 800446a:	9303      	str	r3, [sp, #12]
 800446c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800446e:	444b      	add	r3, r9
 8004470:	9309      	str	r3, [sp, #36]	; 0x24
 8004472:	e750      	b.n	8004316 <_vfiprintf_r+0x42>
 8004474:	fb05 3202 	mla	r2, r5, r2, r3
 8004478:	2001      	movs	r0, #1
 800447a:	4688      	mov	r8, r1
 800447c:	e78a      	b.n	8004394 <_vfiprintf_r+0xc0>
 800447e:	2300      	movs	r3, #0
 8004480:	f108 0801 	add.w	r8, r8, #1
 8004484:	9305      	str	r3, [sp, #20]
 8004486:	4619      	mov	r1, r3
 8004488:	250a      	movs	r5, #10
 800448a:	4640      	mov	r0, r8
 800448c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004490:	3a30      	subs	r2, #48	; 0x30
 8004492:	2a09      	cmp	r2, #9
 8004494:	d903      	bls.n	800449e <_vfiprintf_r+0x1ca>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0c3      	beq.n	8004422 <_vfiprintf_r+0x14e>
 800449a:	9105      	str	r1, [sp, #20]
 800449c:	e7c1      	b.n	8004422 <_vfiprintf_r+0x14e>
 800449e:	fb05 2101 	mla	r1, r5, r1, r2
 80044a2:	2301      	movs	r3, #1
 80044a4:	4680      	mov	r8, r0
 80044a6:	e7f0      	b.n	800448a <_vfiprintf_r+0x1b6>
 80044a8:	ab03      	add	r3, sp, #12
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	4622      	mov	r2, r4
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <_vfiprintf_r+0x228>)
 80044b0:	a904      	add	r1, sp, #16
 80044b2:	4630      	mov	r0, r6
 80044b4:	f3af 8000 	nop.w
 80044b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80044bc:	4681      	mov	r9, r0
 80044be:	d1d5      	bne.n	800446c <_vfiprintf_r+0x198>
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	065b      	lsls	r3, r3, #25
 80044c4:	f53f af7e 	bmi.w	80043c4 <_vfiprintf_r+0xf0>
 80044c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044ca:	e77d      	b.n	80043c8 <_vfiprintf_r+0xf4>
 80044cc:	ab03      	add	r3, sp, #12
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	4622      	mov	r2, r4
 80044d2:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <_vfiprintf_r+0x228>)
 80044d4:	a904      	add	r1, sp, #16
 80044d6:	4630      	mov	r0, r6
 80044d8:	f000 f888 	bl	80045ec <_printf_i>
 80044dc:	e7ec      	b.n	80044b8 <_vfiprintf_r+0x1e4>
 80044de:	bf00      	nop
 80044e0:	0800531c 	.word	0x0800531c
 80044e4:	080052c8 	.word	0x080052c8
 80044e8:	0800533c 	.word	0x0800533c
 80044ec:	080052fc 	.word	0x080052fc
 80044f0:	080052ce 	.word	0x080052ce
 80044f4:	080052d2 	.word	0x080052d2
 80044f8:	00000000 	.word	0x00000000
 80044fc:	080042af 	.word	0x080042af

08004500 <_printf_common>:
 8004500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004504:	4691      	mov	r9, r2
 8004506:	461f      	mov	r7, r3
 8004508:	688a      	ldr	r2, [r1, #8]
 800450a:	690b      	ldr	r3, [r1, #16]
 800450c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004510:	4293      	cmp	r3, r2
 8004512:	bfb8      	it	lt
 8004514:	4613      	movlt	r3, r2
 8004516:	f8c9 3000 	str.w	r3, [r9]
 800451a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800451e:	4606      	mov	r6, r0
 8004520:	460c      	mov	r4, r1
 8004522:	b112      	cbz	r2, 800452a <_printf_common+0x2a>
 8004524:	3301      	adds	r3, #1
 8004526:	f8c9 3000 	str.w	r3, [r9]
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	0699      	lsls	r1, r3, #26
 800452e:	bf42      	ittt	mi
 8004530:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004534:	3302      	addmi	r3, #2
 8004536:	f8c9 3000 	strmi.w	r3, [r9]
 800453a:	6825      	ldr	r5, [r4, #0]
 800453c:	f015 0506 	ands.w	r5, r5, #6
 8004540:	d107      	bne.n	8004552 <_printf_common+0x52>
 8004542:	f104 0a19 	add.w	sl, r4, #25
 8004546:	68e3      	ldr	r3, [r4, #12]
 8004548:	f8d9 2000 	ldr.w	r2, [r9]
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	42ab      	cmp	r3, r5
 8004550:	dc28      	bgt.n	80045a4 <_printf_common+0xa4>
 8004552:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004556:	6822      	ldr	r2, [r4, #0]
 8004558:	3300      	adds	r3, #0
 800455a:	bf18      	it	ne
 800455c:	2301      	movne	r3, #1
 800455e:	0692      	lsls	r2, r2, #26
 8004560:	d42d      	bmi.n	80045be <_printf_common+0xbe>
 8004562:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004566:	4639      	mov	r1, r7
 8004568:	4630      	mov	r0, r6
 800456a:	47c0      	blx	r8
 800456c:	3001      	adds	r0, #1
 800456e:	d020      	beq.n	80045b2 <_printf_common+0xb2>
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	68e5      	ldr	r5, [r4, #12]
 8004574:	f8d9 2000 	ldr.w	r2, [r9]
 8004578:	f003 0306 	and.w	r3, r3, #6
 800457c:	2b04      	cmp	r3, #4
 800457e:	bf08      	it	eq
 8004580:	1aad      	subeq	r5, r5, r2
 8004582:	68a3      	ldr	r3, [r4, #8]
 8004584:	6922      	ldr	r2, [r4, #16]
 8004586:	bf0c      	ite	eq
 8004588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800458c:	2500      	movne	r5, #0
 800458e:	4293      	cmp	r3, r2
 8004590:	bfc4      	itt	gt
 8004592:	1a9b      	subgt	r3, r3, r2
 8004594:	18ed      	addgt	r5, r5, r3
 8004596:	f04f 0900 	mov.w	r9, #0
 800459a:	341a      	adds	r4, #26
 800459c:	454d      	cmp	r5, r9
 800459e:	d11a      	bne.n	80045d6 <_printf_common+0xd6>
 80045a0:	2000      	movs	r0, #0
 80045a2:	e008      	b.n	80045b6 <_printf_common+0xb6>
 80045a4:	2301      	movs	r3, #1
 80045a6:	4652      	mov	r2, sl
 80045a8:	4639      	mov	r1, r7
 80045aa:	4630      	mov	r0, r6
 80045ac:	47c0      	blx	r8
 80045ae:	3001      	adds	r0, #1
 80045b0:	d103      	bne.n	80045ba <_printf_common+0xba>
 80045b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ba:	3501      	adds	r5, #1
 80045bc:	e7c3      	b.n	8004546 <_printf_common+0x46>
 80045be:	18e1      	adds	r1, r4, r3
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	2030      	movs	r0, #48	; 0x30
 80045c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045c8:	4422      	add	r2, r4
 80045ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045d2:	3302      	adds	r3, #2
 80045d4:	e7c5      	b.n	8004562 <_printf_common+0x62>
 80045d6:	2301      	movs	r3, #1
 80045d8:	4622      	mov	r2, r4
 80045da:	4639      	mov	r1, r7
 80045dc:	4630      	mov	r0, r6
 80045de:	47c0      	blx	r8
 80045e0:	3001      	adds	r0, #1
 80045e2:	d0e6      	beq.n	80045b2 <_printf_common+0xb2>
 80045e4:	f109 0901 	add.w	r9, r9, #1
 80045e8:	e7d8      	b.n	800459c <_printf_common+0x9c>
	...

080045ec <_printf_i>:
 80045ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80045f4:	460c      	mov	r4, r1
 80045f6:	7e09      	ldrb	r1, [r1, #24]
 80045f8:	b085      	sub	sp, #20
 80045fa:	296e      	cmp	r1, #110	; 0x6e
 80045fc:	4617      	mov	r7, r2
 80045fe:	4606      	mov	r6, r0
 8004600:	4698      	mov	r8, r3
 8004602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004604:	f000 80b3 	beq.w	800476e <_printf_i+0x182>
 8004608:	d822      	bhi.n	8004650 <_printf_i+0x64>
 800460a:	2963      	cmp	r1, #99	; 0x63
 800460c:	d036      	beq.n	800467c <_printf_i+0x90>
 800460e:	d80a      	bhi.n	8004626 <_printf_i+0x3a>
 8004610:	2900      	cmp	r1, #0
 8004612:	f000 80b9 	beq.w	8004788 <_printf_i+0x19c>
 8004616:	2958      	cmp	r1, #88	; 0x58
 8004618:	f000 8083 	beq.w	8004722 <_printf_i+0x136>
 800461c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004620:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004624:	e032      	b.n	800468c <_printf_i+0xa0>
 8004626:	2964      	cmp	r1, #100	; 0x64
 8004628:	d001      	beq.n	800462e <_printf_i+0x42>
 800462a:	2969      	cmp	r1, #105	; 0x69
 800462c:	d1f6      	bne.n	800461c <_printf_i+0x30>
 800462e:	6820      	ldr	r0, [r4, #0]
 8004630:	6813      	ldr	r3, [r2, #0]
 8004632:	0605      	lsls	r5, r0, #24
 8004634:	f103 0104 	add.w	r1, r3, #4
 8004638:	d52a      	bpl.n	8004690 <_printf_i+0xa4>
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6011      	str	r1, [r2, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	da03      	bge.n	800464a <_printf_i+0x5e>
 8004642:	222d      	movs	r2, #45	; 0x2d
 8004644:	425b      	negs	r3, r3
 8004646:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800464a:	486f      	ldr	r0, [pc, #444]	; (8004808 <_printf_i+0x21c>)
 800464c:	220a      	movs	r2, #10
 800464e:	e039      	b.n	80046c4 <_printf_i+0xd8>
 8004650:	2973      	cmp	r1, #115	; 0x73
 8004652:	f000 809d 	beq.w	8004790 <_printf_i+0x1a4>
 8004656:	d808      	bhi.n	800466a <_printf_i+0x7e>
 8004658:	296f      	cmp	r1, #111	; 0x6f
 800465a:	d020      	beq.n	800469e <_printf_i+0xb2>
 800465c:	2970      	cmp	r1, #112	; 0x70
 800465e:	d1dd      	bne.n	800461c <_printf_i+0x30>
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	f043 0320 	orr.w	r3, r3, #32
 8004666:	6023      	str	r3, [r4, #0]
 8004668:	e003      	b.n	8004672 <_printf_i+0x86>
 800466a:	2975      	cmp	r1, #117	; 0x75
 800466c:	d017      	beq.n	800469e <_printf_i+0xb2>
 800466e:	2978      	cmp	r1, #120	; 0x78
 8004670:	d1d4      	bne.n	800461c <_printf_i+0x30>
 8004672:	2378      	movs	r3, #120	; 0x78
 8004674:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004678:	4864      	ldr	r0, [pc, #400]	; (800480c <_printf_i+0x220>)
 800467a:	e055      	b.n	8004728 <_printf_i+0x13c>
 800467c:	6813      	ldr	r3, [r2, #0]
 800467e:	1d19      	adds	r1, r3, #4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6011      	str	r1, [r2, #0]
 8004684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800468c:	2301      	movs	r3, #1
 800468e:	e08c      	b.n	80047aa <_printf_i+0x1be>
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6011      	str	r1, [r2, #0]
 8004694:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004698:	bf18      	it	ne
 800469a:	b21b      	sxthne	r3, r3
 800469c:	e7cf      	b.n	800463e <_printf_i+0x52>
 800469e:	6813      	ldr	r3, [r2, #0]
 80046a0:	6825      	ldr	r5, [r4, #0]
 80046a2:	1d18      	adds	r0, r3, #4
 80046a4:	6010      	str	r0, [r2, #0]
 80046a6:	0628      	lsls	r0, r5, #24
 80046a8:	d501      	bpl.n	80046ae <_printf_i+0xc2>
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	e002      	b.n	80046b4 <_printf_i+0xc8>
 80046ae:	0668      	lsls	r0, r5, #25
 80046b0:	d5fb      	bpl.n	80046aa <_printf_i+0xbe>
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	4854      	ldr	r0, [pc, #336]	; (8004808 <_printf_i+0x21c>)
 80046b6:	296f      	cmp	r1, #111	; 0x6f
 80046b8:	bf14      	ite	ne
 80046ba:	220a      	movne	r2, #10
 80046bc:	2208      	moveq	r2, #8
 80046be:	2100      	movs	r1, #0
 80046c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046c4:	6865      	ldr	r5, [r4, #4]
 80046c6:	60a5      	str	r5, [r4, #8]
 80046c8:	2d00      	cmp	r5, #0
 80046ca:	f2c0 8095 	blt.w	80047f8 <_printf_i+0x20c>
 80046ce:	6821      	ldr	r1, [r4, #0]
 80046d0:	f021 0104 	bic.w	r1, r1, #4
 80046d4:	6021      	str	r1, [r4, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d13d      	bne.n	8004756 <_printf_i+0x16a>
 80046da:	2d00      	cmp	r5, #0
 80046dc:	f040 808e 	bne.w	80047fc <_printf_i+0x210>
 80046e0:	4665      	mov	r5, ip
 80046e2:	2a08      	cmp	r2, #8
 80046e4:	d10b      	bne.n	80046fe <_printf_i+0x112>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	07db      	lsls	r3, r3, #31
 80046ea:	d508      	bpl.n	80046fe <_printf_i+0x112>
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	6862      	ldr	r2, [r4, #4]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	bfde      	ittt	le
 80046f4:	2330      	movle	r3, #48	; 0x30
 80046f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046fa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80046fe:	ebac 0305 	sub.w	r3, ip, r5
 8004702:	6123      	str	r3, [r4, #16]
 8004704:	f8cd 8000 	str.w	r8, [sp]
 8004708:	463b      	mov	r3, r7
 800470a:	aa03      	add	r2, sp, #12
 800470c:	4621      	mov	r1, r4
 800470e:	4630      	mov	r0, r6
 8004710:	f7ff fef6 	bl	8004500 <_printf_common>
 8004714:	3001      	adds	r0, #1
 8004716:	d14d      	bne.n	80047b4 <_printf_i+0x1c8>
 8004718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800471c:	b005      	add	sp, #20
 800471e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004722:	4839      	ldr	r0, [pc, #228]	; (8004808 <_printf_i+0x21c>)
 8004724:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004728:	6813      	ldr	r3, [r2, #0]
 800472a:	6821      	ldr	r1, [r4, #0]
 800472c:	1d1d      	adds	r5, r3, #4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6015      	str	r5, [r2, #0]
 8004732:	060a      	lsls	r2, r1, #24
 8004734:	d50b      	bpl.n	800474e <_printf_i+0x162>
 8004736:	07ca      	lsls	r2, r1, #31
 8004738:	bf44      	itt	mi
 800473a:	f041 0120 	orrmi.w	r1, r1, #32
 800473e:	6021      	strmi	r1, [r4, #0]
 8004740:	b91b      	cbnz	r3, 800474a <_printf_i+0x15e>
 8004742:	6822      	ldr	r2, [r4, #0]
 8004744:	f022 0220 	bic.w	r2, r2, #32
 8004748:	6022      	str	r2, [r4, #0]
 800474a:	2210      	movs	r2, #16
 800474c:	e7b7      	b.n	80046be <_printf_i+0xd2>
 800474e:	064d      	lsls	r5, r1, #25
 8004750:	bf48      	it	mi
 8004752:	b29b      	uxthmi	r3, r3
 8004754:	e7ef      	b.n	8004736 <_printf_i+0x14a>
 8004756:	4665      	mov	r5, ip
 8004758:	fbb3 f1f2 	udiv	r1, r3, r2
 800475c:	fb02 3311 	mls	r3, r2, r1, r3
 8004760:	5cc3      	ldrb	r3, [r0, r3]
 8004762:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004766:	460b      	mov	r3, r1
 8004768:	2900      	cmp	r1, #0
 800476a:	d1f5      	bne.n	8004758 <_printf_i+0x16c>
 800476c:	e7b9      	b.n	80046e2 <_printf_i+0xf6>
 800476e:	6813      	ldr	r3, [r2, #0]
 8004770:	6825      	ldr	r5, [r4, #0]
 8004772:	6961      	ldr	r1, [r4, #20]
 8004774:	1d18      	adds	r0, r3, #4
 8004776:	6010      	str	r0, [r2, #0]
 8004778:	0628      	lsls	r0, r5, #24
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	d501      	bpl.n	8004782 <_printf_i+0x196>
 800477e:	6019      	str	r1, [r3, #0]
 8004780:	e002      	b.n	8004788 <_printf_i+0x19c>
 8004782:	066a      	lsls	r2, r5, #25
 8004784:	d5fb      	bpl.n	800477e <_printf_i+0x192>
 8004786:	8019      	strh	r1, [r3, #0]
 8004788:	2300      	movs	r3, #0
 800478a:	6123      	str	r3, [r4, #16]
 800478c:	4665      	mov	r5, ip
 800478e:	e7b9      	b.n	8004704 <_printf_i+0x118>
 8004790:	6813      	ldr	r3, [r2, #0]
 8004792:	1d19      	adds	r1, r3, #4
 8004794:	6011      	str	r1, [r2, #0]
 8004796:	681d      	ldr	r5, [r3, #0]
 8004798:	6862      	ldr	r2, [r4, #4]
 800479a:	2100      	movs	r1, #0
 800479c:	4628      	mov	r0, r5
 800479e:	f7fb fd17 	bl	80001d0 <memchr>
 80047a2:	b108      	cbz	r0, 80047a8 <_printf_i+0x1bc>
 80047a4:	1b40      	subs	r0, r0, r5
 80047a6:	6060      	str	r0, [r4, #4]
 80047a8:	6863      	ldr	r3, [r4, #4]
 80047aa:	6123      	str	r3, [r4, #16]
 80047ac:	2300      	movs	r3, #0
 80047ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047b2:	e7a7      	b.n	8004704 <_printf_i+0x118>
 80047b4:	6923      	ldr	r3, [r4, #16]
 80047b6:	462a      	mov	r2, r5
 80047b8:	4639      	mov	r1, r7
 80047ba:	4630      	mov	r0, r6
 80047bc:	47c0      	blx	r8
 80047be:	3001      	adds	r0, #1
 80047c0:	d0aa      	beq.n	8004718 <_printf_i+0x12c>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	079b      	lsls	r3, r3, #30
 80047c6:	d413      	bmi.n	80047f0 <_printf_i+0x204>
 80047c8:	68e0      	ldr	r0, [r4, #12]
 80047ca:	9b03      	ldr	r3, [sp, #12]
 80047cc:	4298      	cmp	r0, r3
 80047ce:	bfb8      	it	lt
 80047d0:	4618      	movlt	r0, r3
 80047d2:	e7a3      	b.n	800471c <_printf_i+0x130>
 80047d4:	2301      	movs	r3, #1
 80047d6:	464a      	mov	r2, r9
 80047d8:	4639      	mov	r1, r7
 80047da:	4630      	mov	r0, r6
 80047dc:	47c0      	blx	r8
 80047de:	3001      	adds	r0, #1
 80047e0:	d09a      	beq.n	8004718 <_printf_i+0x12c>
 80047e2:	3501      	adds	r5, #1
 80047e4:	68e3      	ldr	r3, [r4, #12]
 80047e6:	9a03      	ldr	r2, [sp, #12]
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	42ab      	cmp	r3, r5
 80047ec:	dcf2      	bgt.n	80047d4 <_printf_i+0x1e8>
 80047ee:	e7eb      	b.n	80047c8 <_printf_i+0x1dc>
 80047f0:	2500      	movs	r5, #0
 80047f2:	f104 0919 	add.w	r9, r4, #25
 80047f6:	e7f5      	b.n	80047e4 <_printf_i+0x1f8>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ac      	bne.n	8004756 <_printf_i+0x16a>
 80047fc:	7803      	ldrb	r3, [r0, #0]
 80047fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004802:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004806:	e76c      	b.n	80046e2 <_printf_i+0xf6>
 8004808:	080052d9 	.word	0x080052d9
 800480c:	080052ea 	.word	0x080052ea

08004810 <iprintf>:
 8004810:	b40f      	push	{r0, r1, r2, r3}
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <iprintf+0x2c>)
 8004814:	b513      	push	{r0, r1, r4, lr}
 8004816:	681c      	ldr	r4, [r3, #0]
 8004818:	b124      	cbz	r4, 8004824 <iprintf+0x14>
 800481a:	69a3      	ldr	r3, [r4, #24]
 800481c:	b913      	cbnz	r3, 8004824 <iprintf+0x14>
 800481e:	4620      	mov	r0, r4
 8004820:	f000 f9c6 	bl	8004bb0 <__sinit>
 8004824:	ab05      	add	r3, sp, #20
 8004826:	9a04      	ldr	r2, [sp, #16]
 8004828:	68a1      	ldr	r1, [r4, #8]
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	4620      	mov	r0, r4
 800482e:	f7ff fd51 	bl	80042d4 <_vfiprintf_r>
 8004832:	b002      	add	sp, #8
 8004834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004838:	b004      	add	sp, #16
 800483a:	4770      	bx	lr
 800483c:	2000000c 	.word	0x2000000c

08004840 <__swbuf_r>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	460e      	mov	r6, r1
 8004844:	4614      	mov	r4, r2
 8004846:	4605      	mov	r5, r0
 8004848:	b118      	cbz	r0, 8004852 <__swbuf_r+0x12>
 800484a:	6983      	ldr	r3, [r0, #24]
 800484c:	b90b      	cbnz	r3, 8004852 <__swbuf_r+0x12>
 800484e:	f000 f9af 	bl	8004bb0 <__sinit>
 8004852:	4b21      	ldr	r3, [pc, #132]	; (80048d8 <__swbuf_r+0x98>)
 8004854:	429c      	cmp	r4, r3
 8004856:	d12a      	bne.n	80048ae <__swbuf_r+0x6e>
 8004858:	686c      	ldr	r4, [r5, #4]
 800485a:	69a3      	ldr	r3, [r4, #24]
 800485c:	60a3      	str	r3, [r4, #8]
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	071a      	lsls	r2, r3, #28
 8004862:	d52e      	bpl.n	80048c2 <__swbuf_r+0x82>
 8004864:	6923      	ldr	r3, [r4, #16]
 8004866:	b363      	cbz	r3, 80048c2 <__swbuf_r+0x82>
 8004868:	6923      	ldr	r3, [r4, #16]
 800486a:	6820      	ldr	r0, [r4, #0]
 800486c:	1ac0      	subs	r0, r0, r3
 800486e:	6963      	ldr	r3, [r4, #20]
 8004870:	b2f6      	uxtb	r6, r6
 8004872:	4283      	cmp	r3, r0
 8004874:	4637      	mov	r7, r6
 8004876:	dc04      	bgt.n	8004882 <__swbuf_r+0x42>
 8004878:	4621      	mov	r1, r4
 800487a:	4628      	mov	r0, r5
 800487c:	f000 f92e 	bl	8004adc <_fflush_r>
 8004880:	bb28      	cbnz	r0, 80048ce <__swbuf_r+0x8e>
 8004882:	68a3      	ldr	r3, [r4, #8]
 8004884:	3b01      	subs	r3, #1
 8004886:	60a3      	str	r3, [r4, #8]
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	6022      	str	r2, [r4, #0]
 800488e:	701e      	strb	r6, [r3, #0]
 8004890:	6963      	ldr	r3, [r4, #20]
 8004892:	3001      	adds	r0, #1
 8004894:	4283      	cmp	r3, r0
 8004896:	d004      	beq.n	80048a2 <__swbuf_r+0x62>
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	07db      	lsls	r3, r3, #31
 800489c:	d519      	bpl.n	80048d2 <__swbuf_r+0x92>
 800489e:	2e0a      	cmp	r6, #10
 80048a0:	d117      	bne.n	80048d2 <__swbuf_r+0x92>
 80048a2:	4621      	mov	r1, r4
 80048a4:	4628      	mov	r0, r5
 80048a6:	f000 f919 	bl	8004adc <_fflush_r>
 80048aa:	b190      	cbz	r0, 80048d2 <__swbuf_r+0x92>
 80048ac:	e00f      	b.n	80048ce <__swbuf_r+0x8e>
 80048ae:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <__swbuf_r+0x9c>)
 80048b0:	429c      	cmp	r4, r3
 80048b2:	d101      	bne.n	80048b8 <__swbuf_r+0x78>
 80048b4:	68ac      	ldr	r4, [r5, #8]
 80048b6:	e7d0      	b.n	800485a <__swbuf_r+0x1a>
 80048b8:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <__swbuf_r+0xa0>)
 80048ba:	429c      	cmp	r4, r3
 80048bc:	bf08      	it	eq
 80048be:	68ec      	ldreq	r4, [r5, #12]
 80048c0:	e7cb      	b.n	800485a <__swbuf_r+0x1a>
 80048c2:	4621      	mov	r1, r4
 80048c4:	4628      	mov	r0, r5
 80048c6:	f000 f80d 	bl	80048e4 <__swsetup_r>
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d0cc      	beq.n	8004868 <__swbuf_r+0x28>
 80048ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80048d2:	4638      	mov	r0, r7
 80048d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d6:	bf00      	nop
 80048d8:	0800531c 	.word	0x0800531c
 80048dc:	0800533c 	.word	0x0800533c
 80048e0:	080052fc 	.word	0x080052fc

080048e4 <__swsetup_r>:
 80048e4:	4b32      	ldr	r3, [pc, #200]	; (80049b0 <__swsetup_r+0xcc>)
 80048e6:	b570      	push	{r4, r5, r6, lr}
 80048e8:	681d      	ldr	r5, [r3, #0]
 80048ea:	4606      	mov	r6, r0
 80048ec:	460c      	mov	r4, r1
 80048ee:	b125      	cbz	r5, 80048fa <__swsetup_r+0x16>
 80048f0:	69ab      	ldr	r3, [r5, #24]
 80048f2:	b913      	cbnz	r3, 80048fa <__swsetup_r+0x16>
 80048f4:	4628      	mov	r0, r5
 80048f6:	f000 f95b 	bl	8004bb0 <__sinit>
 80048fa:	4b2e      	ldr	r3, [pc, #184]	; (80049b4 <__swsetup_r+0xd0>)
 80048fc:	429c      	cmp	r4, r3
 80048fe:	d10f      	bne.n	8004920 <__swsetup_r+0x3c>
 8004900:	686c      	ldr	r4, [r5, #4]
 8004902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004906:	b29a      	uxth	r2, r3
 8004908:	0715      	lsls	r5, r2, #28
 800490a:	d42c      	bmi.n	8004966 <__swsetup_r+0x82>
 800490c:	06d0      	lsls	r0, r2, #27
 800490e:	d411      	bmi.n	8004934 <__swsetup_r+0x50>
 8004910:	2209      	movs	r2, #9
 8004912:	6032      	str	r2, [r6, #0]
 8004914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004918:	81a3      	strh	r3, [r4, #12]
 800491a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800491e:	e03e      	b.n	800499e <__swsetup_r+0xba>
 8004920:	4b25      	ldr	r3, [pc, #148]	; (80049b8 <__swsetup_r+0xd4>)
 8004922:	429c      	cmp	r4, r3
 8004924:	d101      	bne.n	800492a <__swsetup_r+0x46>
 8004926:	68ac      	ldr	r4, [r5, #8]
 8004928:	e7eb      	b.n	8004902 <__swsetup_r+0x1e>
 800492a:	4b24      	ldr	r3, [pc, #144]	; (80049bc <__swsetup_r+0xd8>)
 800492c:	429c      	cmp	r4, r3
 800492e:	bf08      	it	eq
 8004930:	68ec      	ldreq	r4, [r5, #12]
 8004932:	e7e6      	b.n	8004902 <__swsetup_r+0x1e>
 8004934:	0751      	lsls	r1, r2, #29
 8004936:	d512      	bpl.n	800495e <__swsetup_r+0x7a>
 8004938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800493a:	b141      	cbz	r1, 800494e <__swsetup_r+0x6a>
 800493c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004940:	4299      	cmp	r1, r3
 8004942:	d002      	beq.n	800494a <__swsetup_r+0x66>
 8004944:	4630      	mov	r0, r6
 8004946:	f000 fa21 	bl	8004d8c <_free_r>
 800494a:	2300      	movs	r3, #0
 800494c:	6363      	str	r3, [r4, #52]	; 0x34
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004954:	81a3      	strh	r3, [r4, #12]
 8004956:	2300      	movs	r3, #0
 8004958:	6063      	str	r3, [r4, #4]
 800495a:	6923      	ldr	r3, [r4, #16]
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	89a3      	ldrh	r3, [r4, #12]
 8004960:	f043 0308 	orr.w	r3, r3, #8
 8004964:	81a3      	strh	r3, [r4, #12]
 8004966:	6923      	ldr	r3, [r4, #16]
 8004968:	b94b      	cbnz	r3, 800497e <__swsetup_r+0x9a>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004974:	d003      	beq.n	800497e <__swsetup_r+0x9a>
 8004976:	4621      	mov	r1, r4
 8004978:	4630      	mov	r0, r6
 800497a:	f000 f9c7 	bl	8004d0c <__smakebuf_r>
 800497e:	89a2      	ldrh	r2, [r4, #12]
 8004980:	f012 0301 	ands.w	r3, r2, #1
 8004984:	d00c      	beq.n	80049a0 <__swsetup_r+0xbc>
 8004986:	2300      	movs	r3, #0
 8004988:	60a3      	str	r3, [r4, #8]
 800498a:	6963      	ldr	r3, [r4, #20]
 800498c:	425b      	negs	r3, r3
 800498e:	61a3      	str	r3, [r4, #24]
 8004990:	6923      	ldr	r3, [r4, #16]
 8004992:	b953      	cbnz	r3, 80049aa <__swsetup_r+0xc6>
 8004994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004998:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800499c:	d1ba      	bne.n	8004914 <__swsetup_r+0x30>
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	0792      	lsls	r2, r2, #30
 80049a2:	bf58      	it	pl
 80049a4:	6963      	ldrpl	r3, [r4, #20]
 80049a6:	60a3      	str	r3, [r4, #8]
 80049a8:	e7f2      	b.n	8004990 <__swsetup_r+0xac>
 80049aa:	2000      	movs	r0, #0
 80049ac:	e7f7      	b.n	800499e <__swsetup_r+0xba>
 80049ae:	bf00      	nop
 80049b0:	2000000c 	.word	0x2000000c
 80049b4:	0800531c 	.word	0x0800531c
 80049b8:	0800533c 	.word	0x0800533c
 80049bc:	080052fc 	.word	0x080052fc

080049c0 <abort>:
 80049c0:	b508      	push	{r3, lr}
 80049c2:	2006      	movs	r0, #6
 80049c4:	f000 fac2 	bl	8004f4c <raise>
 80049c8:	2001      	movs	r0, #1
 80049ca:	f7fc feb2 	bl	8001732 <_exit>
	...

080049d0 <__sflush_r>:
 80049d0:	898a      	ldrh	r2, [r1, #12]
 80049d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d6:	4605      	mov	r5, r0
 80049d8:	0710      	lsls	r0, r2, #28
 80049da:	460c      	mov	r4, r1
 80049dc:	d458      	bmi.n	8004a90 <__sflush_r+0xc0>
 80049de:	684b      	ldr	r3, [r1, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	dc05      	bgt.n	80049f0 <__sflush_r+0x20>
 80049e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	dc02      	bgt.n	80049f0 <__sflush_r+0x20>
 80049ea:	2000      	movs	r0, #0
 80049ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049f2:	2e00      	cmp	r6, #0
 80049f4:	d0f9      	beq.n	80049ea <__sflush_r+0x1a>
 80049f6:	2300      	movs	r3, #0
 80049f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049fc:	682f      	ldr	r7, [r5, #0]
 80049fe:	6a21      	ldr	r1, [r4, #32]
 8004a00:	602b      	str	r3, [r5, #0]
 8004a02:	d032      	beq.n	8004a6a <__sflush_r+0x9a>
 8004a04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a06:	89a3      	ldrh	r3, [r4, #12]
 8004a08:	075a      	lsls	r2, r3, #29
 8004a0a:	d505      	bpl.n	8004a18 <__sflush_r+0x48>
 8004a0c:	6863      	ldr	r3, [r4, #4]
 8004a0e:	1ac0      	subs	r0, r0, r3
 8004a10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a12:	b10b      	cbz	r3, 8004a18 <__sflush_r+0x48>
 8004a14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a16:	1ac0      	subs	r0, r0, r3
 8004a18:	2300      	movs	r3, #0
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a1e:	6a21      	ldr	r1, [r4, #32]
 8004a20:	4628      	mov	r0, r5
 8004a22:	47b0      	blx	r6
 8004a24:	1c43      	adds	r3, r0, #1
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	d106      	bne.n	8004a38 <__sflush_r+0x68>
 8004a2a:	6829      	ldr	r1, [r5, #0]
 8004a2c:	291d      	cmp	r1, #29
 8004a2e:	d848      	bhi.n	8004ac2 <__sflush_r+0xf2>
 8004a30:	4a29      	ldr	r2, [pc, #164]	; (8004ad8 <__sflush_r+0x108>)
 8004a32:	40ca      	lsrs	r2, r1
 8004a34:	07d6      	lsls	r6, r2, #31
 8004a36:	d544      	bpl.n	8004ac2 <__sflush_r+0xf2>
 8004a38:	2200      	movs	r2, #0
 8004a3a:	6062      	str	r2, [r4, #4]
 8004a3c:	04d9      	lsls	r1, r3, #19
 8004a3e:	6922      	ldr	r2, [r4, #16]
 8004a40:	6022      	str	r2, [r4, #0]
 8004a42:	d504      	bpl.n	8004a4e <__sflush_r+0x7e>
 8004a44:	1c42      	adds	r2, r0, #1
 8004a46:	d101      	bne.n	8004a4c <__sflush_r+0x7c>
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	b903      	cbnz	r3, 8004a4e <__sflush_r+0x7e>
 8004a4c:	6560      	str	r0, [r4, #84]	; 0x54
 8004a4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a50:	602f      	str	r7, [r5, #0]
 8004a52:	2900      	cmp	r1, #0
 8004a54:	d0c9      	beq.n	80049ea <__sflush_r+0x1a>
 8004a56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a5a:	4299      	cmp	r1, r3
 8004a5c:	d002      	beq.n	8004a64 <__sflush_r+0x94>
 8004a5e:	4628      	mov	r0, r5
 8004a60:	f000 f994 	bl	8004d8c <_free_r>
 8004a64:	2000      	movs	r0, #0
 8004a66:	6360      	str	r0, [r4, #52]	; 0x34
 8004a68:	e7c0      	b.n	80049ec <__sflush_r+0x1c>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	47b0      	blx	r6
 8004a70:	1c41      	adds	r1, r0, #1
 8004a72:	d1c8      	bne.n	8004a06 <__sflush_r+0x36>
 8004a74:	682b      	ldr	r3, [r5, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0c5      	beq.n	8004a06 <__sflush_r+0x36>
 8004a7a:	2b1d      	cmp	r3, #29
 8004a7c:	d001      	beq.n	8004a82 <__sflush_r+0xb2>
 8004a7e:	2b16      	cmp	r3, #22
 8004a80:	d101      	bne.n	8004a86 <__sflush_r+0xb6>
 8004a82:	602f      	str	r7, [r5, #0]
 8004a84:	e7b1      	b.n	80049ea <__sflush_r+0x1a>
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a8c:	81a3      	strh	r3, [r4, #12]
 8004a8e:	e7ad      	b.n	80049ec <__sflush_r+0x1c>
 8004a90:	690f      	ldr	r7, [r1, #16]
 8004a92:	2f00      	cmp	r7, #0
 8004a94:	d0a9      	beq.n	80049ea <__sflush_r+0x1a>
 8004a96:	0793      	lsls	r3, r2, #30
 8004a98:	680e      	ldr	r6, [r1, #0]
 8004a9a:	bf08      	it	eq
 8004a9c:	694b      	ldreq	r3, [r1, #20]
 8004a9e:	600f      	str	r7, [r1, #0]
 8004aa0:	bf18      	it	ne
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	eba6 0807 	sub.w	r8, r6, r7
 8004aa8:	608b      	str	r3, [r1, #8]
 8004aaa:	f1b8 0f00 	cmp.w	r8, #0
 8004aae:	dd9c      	ble.n	80049ea <__sflush_r+0x1a>
 8004ab0:	4643      	mov	r3, r8
 8004ab2:	463a      	mov	r2, r7
 8004ab4:	6a21      	ldr	r1, [r4, #32]
 8004ab6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ab8:	4628      	mov	r0, r5
 8004aba:	47b0      	blx	r6
 8004abc:	2800      	cmp	r0, #0
 8004abe:	dc06      	bgt.n	8004ace <__sflush_r+0xfe>
 8004ac0:	89a3      	ldrh	r3, [r4, #12]
 8004ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac6:	81a3      	strh	r3, [r4, #12]
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004acc:	e78e      	b.n	80049ec <__sflush_r+0x1c>
 8004ace:	4407      	add	r7, r0
 8004ad0:	eba8 0800 	sub.w	r8, r8, r0
 8004ad4:	e7e9      	b.n	8004aaa <__sflush_r+0xda>
 8004ad6:	bf00      	nop
 8004ad8:	20400001 	.word	0x20400001

08004adc <_fflush_r>:
 8004adc:	b538      	push	{r3, r4, r5, lr}
 8004ade:	690b      	ldr	r3, [r1, #16]
 8004ae0:	4605      	mov	r5, r0
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	b1db      	cbz	r3, 8004b1e <_fflush_r+0x42>
 8004ae6:	b118      	cbz	r0, 8004af0 <_fflush_r+0x14>
 8004ae8:	6983      	ldr	r3, [r0, #24]
 8004aea:	b90b      	cbnz	r3, 8004af0 <_fflush_r+0x14>
 8004aec:	f000 f860 	bl	8004bb0 <__sinit>
 8004af0:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <_fflush_r+0x48>)
 8004af2:	429c      	cmp	r4, r3
 8004af4:	d109      	bne.n	8004b0a <_fflush_r+0x2e>
 8004af6:	686c      	ldr	r4, [r5, #4]
 8004af8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004afc:	b17b      	cbz	r3, 8004b1e <_fflush_r+0x42>
 8004afe:	4621      	mov	r1, r4
 8004b00:	4628      	mov	r0, r5
 8004b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b06:	f7ff bf63 	b.w	80049d0 <__sflush_r>
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <_fflush_r+0x4c>)
 8004b0c:	429c      	cmp	r4, r3
 8004b0e:	d101      	bne.n	8004b14 <_fflush_r+0x38>
 8004b10:	68ac      	ldr	r4, [r5, #8]
 8004b12:	e7f1      	b.n	8004af8 <_fflush_r+0x1c>
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <_fflush_r+0x50>)
 8004b16:	429c      	cmp	r4, r3
 8004b18:	bf08      	it	eq
 8004b1a:	68ec      	ldreq	r4, [r5, #12]
 8004b1c:	e7ec      	b.n	8004af8 <_fflush_r+0x1c>
 8004b1e:	2000      	movs	r0, #0
 8004b20:	bd38      	pop	{r3, r4, r5, pc}
 8004b22:	bf00      	nop
 8004b24:	0800531c 	.word	0x0800531c
 8004b28:	0800533c 	.word	0x0800533c
 8004b2c:	080052fc 	.word	0x080052fc

08004b30 <std>:
 8004b30:	2300      	movs	r3, #0
 8004b32:	b510      	push	{r4, lr}
 8004b34:	4604      	mov	r4, r0
 8004b36:	e9c0 3300 	strd	r3, r3, [r0]
 8004b3a:	6083      	str	r3, [r0, #8]
 8004b3c:	8181      	strh	r1, [r0, #12]
 8004b3e:	6643      	str	r3, [r0, #100]	; 0x64
 8004b40:	81c2      	strh	r2, [r0, #14]
 8004b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b46:	6183      	str	r3, [r0, #24]
 8004b48:	4619      	mov	r1, r3
 8004b4a:	2208      	movs	r2, #8
 8004b4c:	305c      	adds	r0, #92	; 0x5c
 8004b4e:	f7ff fb8f 	bl	8004270 <memset>
 8004b52:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <std+0x38>)
 8004b54:	6263      	str	r3, [r4, #36]	; 0x24
 8004b56:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <std+0x3c>)
 8004b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b5a:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <std+0x40>)
 8004b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <std+0x44>)
 8004b60:	6224      	str	r4, [r4, #32]
 8004b62:	6323      	str	r3, [r4, #48]	; 0x30
 8004b64:	bd10      	pop	{r4, pc}
 8004b66:	bf00      	nop
 8004b68:	08004f85 	.word	0x08004f85
 8004b6c:	08004fa7 	.word	0x08004fa7
 8004b70:	08004fdf 	.word	0x08004fdf
 8004b74:	08005003 	.word	0x08005003

08004b78 <_cleanup_r>:
 8004b78:	4901      	ldr	r1, [pc, #4]	; (8004b80 <_cleanup_r+0x8>)
 8004b7a:	f000 b885 	b.w	8004c88 <_fwalk_reent>
 8004b7e:	bf00      	nop
 8004b80:	08004add 	.word	0x08004add

08004b84 <__sfmoreglue>:
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	1e4a      	subs	r2, r1, #1
 8004b88:	2568      	movs	r5, #104	; 0x68
 8004b8a:	4355      	muls	r5, r2
 8004b8c:	460e      	mov	r6, r1
 8004b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b92:	f000 f949 	bl	8004e28 <_malloc_r>
 8004b96:	4604      	mov	r4, r0
 8004b98:	b140      	cbz	r0, 8004bac <__sfmoreglue+0x28>
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8004ba0:	300c      	adds	r0, #12
 8004ba2:	60a0      	str	r0, [r4, #8]
 8004ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ba8:	f7ff fb62 	bl	8004270 <memset>
 8004bac:	4620      	mov	r0, r4
 8004bae:	bd70      	pop	{r4, r5, r6, pc}

08004bb0 <__sinit>:
 8004bb0:	6983      	ldr	r3, [r0, #24]
 8004bb2:	b510      	push	{r4, lr}
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	bb33      	cbnz	r3, 8004c06 <__sinit+0x56>
 8004bb8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004bbc:	6503      	str	r3, [r0, #80]	; 0x50
 8004bbe:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <__sinit+0x58>)
 8004bc0:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <__sinit+0x5c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6282      	str	r2, [r0, #40]	; 0x28
 8004bc6:	4298      	cmp	r0, r3
 8004bc8:	bf04      	itt	eq
 8004bca:	2301      	moveq	r3, #1
 8004bcc:	6183      	streq	r3, [r0, #24]
 8004bce:	f000 f81f 	bl	8004c10 <__sfp>
 8004bd2:	6060      	str	r0, [r4, #4]
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f000 f81b 	bl	8004c10 <__sfp>
 8004bda:	60a0      	str	r0, [r4, #8]
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f000 f817 	bl	8004c10 <__sfp>
 8004be2:	2200      	movs	r2, #0
 8004be4:	60e0      	str	r0, [r4, #12]
 8004be6:	2104      	movs	r1, #4
 8004be8:	6860      	ldr	r0, [r4, #4]
 8004bea:	f7ff ffa1 	bl	8004b30 <std>
 8004bee:	2201      	movs	r2, #1
 8004bf0:	2109      	movs	r1, #9
 8004bf2:	68a0      	ldr	r0, [r4, #8]
 8004bf4:	f7ff ff9c 	bl	8004b30 <std>
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	2112      	movs	r1, #18
 8004bfc:	68e0      	ldr	r0, [r4, #12]
 8004bfe:	f7ff ff97 	bl	8004b30 <std>
 8004c02:	2301      	movs	r3, #1
 8004c04:	61a3      	str	r3, [r4, #24]
 8004c06:	bd10      	pop	{r4, pc}
 8004c08:	080052c4 	.word	0x080052c4
 8004c0c:	08004b79 	.word	0x08004b79

08004c10 <__sfp>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <__sfp+0x70>)
 8004c14:	681e      	ldr	r6, [r3, #0]
 8004c16:	69b3      	ldr	r3, [r6, #24]
 8004c18:	4607      	mov	r7, r0
 8004c1a:	b913      	cbnz	r3, 8004c22 <__sfp+0x12>
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f7ff ffc7 	bl	8004bb0 <__sinit>
 8004c22:	3648      	adds	r6, #72	; 0x48
 8004c24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	d503      	bpl.n	8004c34 <__sfp+0x24>
 8004c2c:	6833      	ldr	r3, [r6, #0]
 8004c2e:	b133      	cbz	r3, 8004c3e <__sfp+0x2e>
 8004c30:	6836      	ldr	r6, [r6, #0]
 8004c32:	e7f7      	b.n	8004c24 <__sfp+0x14>
 8004c34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c38:	b16d      	cbz	r5, 8004c56 <__sfp+0x46>
 8004c3a:	3468      	adds	r4, #104	; 0x68
 8004c3c:	e7f4      	b.n	8004c28 <__sfp+0x18>
 8004c3e:	2104      	movs	r1, #4
 8004c40:	4638      	mov	r0, r7
 8004c42:	f7ff ff9f 	bl	8004b84 <__sfmoreglue>
 8004c46:	6030      	str	r0, [r6, #0]
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	d1f1      	bne.n	8004c30 <__sfp+0x20>
 8004c4c:	230c      	movs	r3, #12
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	4604      	mov	r4, r0
 8004c52:	4620      	mov	r0, r4
 8004c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c56:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <__sfp+0x74>)
 8004c58:	6665      	str	r5, [r4, #100]	; 0x64
 8004c5a:	e9c4 5500 	strd	r5, r5, [r4]
 8004c5e:	60a5      	str	r5, [r4, #8]
 8004c60:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004c64:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004c68:	2208      	movs	r2, #8
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c70:	f7ff fafe 	bl	8004270 <memset>
 8004c74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c7c:	e7e9      	b.n	8004c52 <__sfp+0x42>
 8004c7e:	bf00      	nop
 8004c80:	080052c4 	.word	0x080052c4
 8004c84:	ffff0001 	.word	0xffff0001

08004c88 <_fwalk_reent>:
 8004c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c8c:	4680      	mov	r8, r0
 8004c8e:	4689      	mov	r9, r1
 8004c90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c94:	2600      	movs	r6, #0
 8004c96:	b914      	cbnz	r4, 8004c9e <_fwalk_reent+0x16>
 8004c98:	4630      	mov	r0, r6
 8004c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c9e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004ca2:	3f01      	subs	r7, #1
 8004ca4:	d501      	bpl.n	8004caa <_fwalk_reent+0x22>
 8004ca6:	6824      	ldr	r4, [r4, #0]
 8004ca8:	e7f5      	b.n	8004c96 <_fwalk_reent+0xe>
 8004caa:	89ab      	ldrh	r3, [r5, #12]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d907      	bls.n	8004cc0 <_fwalk_reent+0x38>
 8004cb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	d003      	beq.n	8004cc0 <_fwalk_reent+0x38>
 8004cb8:	4629      	mov	r1, r5
 8004cba:	4640      	mov	r0, r8
 8004cbc:	47c8      	blx	r9
 8004cbe:	4306      	orrs	r6, r0
 8004cc0:	3568      	adds	r5, #104	; 0x68
 8004cc2:	e7ee      	b.n	8004ca2 <_fwalk_reent+0x1a>

08004cc4 <__swhatbuf_r>:
 8004cc4:	b570      	push	{r4, r5, r6, lr}
 8004cc6:	460e      	mov	r6, r1
 8004cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ccc:	2900      	cmp	r1, #0
 8004cce:	b096      	sub	sp, #88	; 0x58
 8004cd0:	4614      	mov	r4, r2
 8004cd2:	461d      	mov	r5, r3
 8004cd4:	da07      	bge.n	8004ce6 <__swhatbuf_r+0x22>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	602b      	str	r3, [r5, #0]
 8004cda:	89b3      	ldrh	r3, [r6, #12]
 8004cdc:	061a      	lsls	r2, r3, #24
 8004cde:	d410      	bmi.n	8004d02 <__swhatbuf_r+0x3e>
 8004ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce4:	e00e      	b.n	8004d04 <__swhatbuf_r+0x40>
 8004ce6:	466a      	mov	r2, sp
 8004ce8:	f000 f9b2 	bl	8005050 <_fstat_r>
 8004cec:	2800      	cmp	r0, #0
 8004cee:	dbf2      	blt.n	8004cd6 <__swhatbuf_r+0x12>
 8004cf0:	9a01      	ldr	r2, [sp, #4]
 8004cf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004cf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004cfa:	425a      	negs	r2, r3
 8004cfc:	415a      	adcs	r2, r3
 8004cfe:	602a      	str	r2, [r5, #0]
 8004d00:	e7ee      	b.n	8004ce0 <__swhatbuf_r+0x1c>
 8004d02:	2340      	movs	r3, #64	; 0x40
 8004d04:	2000      	movs	r0, #0
 8004d06:	6023      	str	r3, [r4, #0]
 8004d08:	b016      	add	sp, #88	; 0x58
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}

08004d0c <__smakebuf_r>:
 8004d0c:	898b      	ldrh	r3, [r1, #12]
 8004d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d10:	079d      	lsls	r5, r3, #30
 8004d12:	4606      	mov	r6, r0
 8004d14:	460c      	mov	r4, r1
 8004d16:	d507      	bpl.n	8004d28 <__smakebuf_r+0x1c>
 8004d18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	6123      	str	r3, [r4, #16]
 8004d20:	2301      	movs	r3, #1
 8004d22:	6163      	str	r3, [r4, #20]
 8004d24:	b002      	add	sp, #8
 8004d26:	bd70      	pop	{r4, r5, r6, pc}
 8004d28:	ab01      	add	r3, sp, #4
 8004d2a:	466a      	mov	r2, sp
 8004d2c:	f7ff ffca 	bl	8004cc4 <__swhatbuf_r>
 8004d30:	9900      	ldr	r1, [sp, #0]
 8004d32:	4605      	mov	r5, r0
 8004d34:	4630      	mov	r0, r6
 8004d36:	f000 f877 	bl	8004e28 <_malloc_r>
 8004d3a:	b948      	cbnz	r0, 8004d50 <__smakebuf_r+0x44>
 8004d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d40:	059a      	lsls	r2, r3, #22
 8004d42:	d4ef      	bmi.n	8004d24 <__smakebuf_r+0x18>
 8004d44:	f023 0303 	bic.w	r3, r3, #3
 8004d48:	f043 0302 	orr.w	r3, r3, #2
 8004d4c:	81a3      	strh	r3, [r4, #12]
 8004d4e:	e7e3      	b.n	8004d18 <__smakebuf_r+0xc>
 8004d50:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <__smakebuf_r+0x7c>)
 8004d52:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d54:	89a3      	ldrh	r3, [r4, #12]
 8004d56:	6020      	str	r0, [r4, #0]
 8004d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5c:	81a3      	strh	r3, [r4, #12]
 8004d5e:	9b00      	ldr	r3, [sp, #0]
 8004d60:	6163      	str	r3, [r4, #20]
 8004d62:	9b01      	ldr	r3, [sp, #4]
 8004d64:	6120      	str	r0, [r4, #16]
 8004d66:	b15b      	cbz	r3, 8004d80 <__smakebuf_r+0x74>
 8004d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f000 f981 	bl	8005074 <_isatty_r>
 8004d72:	b128      	cbz	r0, 8004d80 <__smakebuf_r+0x74>
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	f023 0303 	bic.w	r3, r3, #3
 8004d7a:	f043 0301 	orr.w	r3, r3, #1
 8004d7e:	81a3      	strh	r3, [r4, #12]
 8004d80:	89a3      	ldrh	r3, [r4, #12]
 8004d82:	431d      	orrs	r5, r3
 8004d84:	81a5      	strh	r5, [r4, #12]
 8004d86:	e7cd      	b.n	8004d24 <__smakebuf_r+0x18>
 8004d88:	08004b79 	.word	0x08004b79

08004d8c <_free_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	4605      	mov	r5, r0
 8004d90:	2900      	cmp	r1, #0
 8004d92:	d045      	beq.n	8004e20 <_free_r+0x94>
 8004d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d98:	1f0c      	subs	r4, r1, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bfb8      	it	lt
 8004d9e:	18e4      	addlt	r4, r4, r3
 8004da0:	f000 f98a 	bl	80050b8 <__malloc_lock>
 8004da4:	4a1f      	ldr	r2, [pc, #124]	; (8004e24 <_free_r+0x98>)
 8004da6:	6813      	ldr	r3, [r2, #0]
 8004da8:	4610      	mov	r0, r2
 8004daa:	b933      	cbnz	r3, 8004dba <_free_r+0x2e>
 8004dac:	6063      	str	r3, [r4, #4]
 8004dae:	6014      	str	r4, [r2, #0]
 8004db0:	4628      	mov	r0, r5
 8004db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004db6:	f000 b980 	b.w	80050ba <__malloc_unlock>
 8004dba:	42a3      	cmp	r3, r4
 8004dbc:	d90c      	bls.n	8004dd8 <_free_r+0x4c>
 8004dbe:	6821      	ldr	r1, [r4, #0]
 8004dc0:	1862      	adds	r2, r4, r1
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	bf04      	itt	eq
 8004dc6:	681a      	ldreq	r2, [r3, #0]
 8004dc8:	685b      	ldreq	r3, [r3, #4]
 8004dca:	6063      	str	r3, [r4, #4]
 8004dcc:	bf04      	itt	eq
 8004dce:	1852      	addeq	r2, r2, r1
 8004dd0:	6022      	streq	r2, [r4, #0]
 8004dd2:	6004      	str	r4, [r0, #0]
 8004dd4:	e7ec      	b.n	8004db0 <_free_r+0x24>
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	b10a      	cbz	r2, 8004de0 <_free_r+0x54>
 8004ddc:	42a2      	cmp	r2, r4
 8004dde:	d9fa      	bls.n	8004dd6 <_free_r+0x4a>
 8004de0:	6819      	ldr	r1, [r3, #0]
 8004de2:	1858      	adds	r0, r3, r1
 8004de4:	42a0      	cmp	r0, r4
 8004de6:	d10b      	bne.n	8004e00 <_free_r+0x74>
 8004de8:	6820      	ldr	r0, [r4, #0]
 8004dea:	4401      	add	r1, r0
 8004dec:	1858      	adds	r0, r3, r1
 8004dee:	4282      	cmp	r2, r0
 8004df0:	6019      	str	r1, [r3, #0]
 8004df2:	d1dd      	bne.n	8004db0 <_free_r+0x24>
 8004df4:	6810      	ldr	r0, [r2, #0]
 8004df6:	6852      	ldr	r2, [r2, #4]
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	4401      	add	r1, r0
 8004dfc:	6019      	str	r1, [r3, #0]
 8004dfe:	e7d7      	b.n	8004db0 <_free_r+0x24>
 8004e00:	d902      	bls.n	8004e08 <_free_r+0x7c>
 8004e02:	230c      	movs	r3, #12
 8004e04:	602b      	str	r3, [r5, #0]
 8004e06:	e7d3      	b.n	8004db0 <_free_r+0x24>
 8004e08:	6820      	ldr	r0, [r4, #0]
 8004e0a:	1821      	adds	r1, r4, r0
 8004e0c:	428a      	cmp	r2, r1
 8004e0e:	bf04      	itt	eq
 8004e10:	6811      	ldreq	r1, [r2, #0]
 8004e12:	6852      	ldreq	r2, [r2, #4]
 8004e14:	6062      	str	r2, [r4, #4]
 8004e16:	bf04      	itt	eq
 8004e18:	1809      	addeq	r1, r1, r0
 8004e1a:	6021      	streq	r1, [r4, #0]
 8004e1c:	605c      	str	r4, [r3, #4]
 8004e1e:	e7c7      	b.n	8004db0 <_free_r+0x24>
 8004e20:	bd38      	pop	{r3, r4, r5, pc}
 8004e22:	bf00      	nop
 8004e24:	20000884 	.word	0x20000884

08004e28 <_malloc_r>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	1ccd      	adds	r5, r1, #3
 8004e2c:	f025 0503 	bic.w	r5, r5, #3
 8004e30:	3508      	adds	r5, #8
 8004e32:	2d0c      	cmp	r5, #12
 8004e34:	bf38      	it	cc
 8004e36:	250c      	movcc	r5, #12
 8004e38:	2d00      	cmp	r5, #0
 8004e3a:	4606      	mov	r6, r0
 8004e3c:	db01      	blt.n	8004e42 <_malloc_r+0x1a>
 8004e3e:	42a9      	cmp	r1, r5
 8004e40:	d903      	bls.n	8004e4a <_malloc_r+0x22>
 8004e42:	230c      	movs	r3, #12
 8004e44:	6033      	str	r3, [r6, #0]
 8004e46:	2000      	movs	r0, #0
 8004e48:	bd70      	pop	{r4, r5, r6, pc}
 8004e4a:	f000 f935 	bl	80050b8 <__malloc_lock>
 8004e4e:	4a21      	ldr	r2, [pc, #132]	; (8004ed4 <_malloc_r+0xac>)
 8004e50:	6814      	ldr	r4, [r2, #0]
 8004e52:	4621      	mov	r1, r4
 8004e54:	b991      	cbnz	r1, 8004e7c <_malloc_r+0x54>
 8004e56:	4c20      	ldr	r4, [pc, #128]	; (8004ed8 <_malloc_r+0xb0>)
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	b91b      	cbnz	r3, 8004e64 <_malloc_r+0x3c>
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	f000 f83d 	bl	8004edc <_sbrk_r>
 8004e62:	6020      	str	r0, [r4, #0]
 8004e64:	4629      	mov	r1, r5
 8004e66:	4630      	mov	r0, r6
 8004e68:	f000 f838 	bl	8004edc <_sbrk_r>
 8004e6c:	1c43      	adds	r3, r0, #1
 8004e6e:	d124      	bne.n	8004eba <_malloc_r+0x92>
 8004e70:	230c      	movs	r3, #12
 8004e72:	6033      	str	r3, [r6, #0]
 8004e74:	4630      	mov	r0, r6
 8004e76:	f000 f920 	bl	80050ba <__malloc_unlock>
 8004e7a:	e7e4      	b.n	8004e46 <_malloc_r+0x1e>
 8004e7c:	680b      	ldr	r3, [r1, #0]
 8004e7e:	1b5b      	subs	r3, r3, r5
 8004e80:	d418      	bmi.n	8004eb4 <_malloc_r+0x8c>
 8004e82:	2b0b      	cmp	r3, #11
 8004e84:	d90f      	bls.n	8004ea6 <_malloc_r+0x7e>
 8004e86:	600b      	str	r3, [r1, #0]
 8004e88:	50cd      	str	r5, [r1, r3]
 8004e8a:	18cc      	adds	r4, r1, r3
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	f000 f914 	bl	80050ba <__malloc_unlock>
 8004e92:	f104 000b 	add.w	r0, r4, #11
 8004e96:	1d23      	adds	r3, r4, #4
 8004e98:	f020 0007 	bic.w	r0, r0, #7
 8004e9c:	1ac3      	subs	r3, r0, r3
 8004e9e:	d0d3      	beq.n	8004e48 <_malloc_r+0x20>
 8004ea0:	425a      	negs	r2, r3
 8004ea2:	50e2      	str	r2, [r4, r3]
 8004ea4:	e7d0      	b.n	8004e48 <_malloc_r+0x20>
 8004ea6:	428c      	cmp	r4, r1
 8004ea8:	684b      	ldr	r3, [r1, #4]
 8004eaa:	bf16      	itet	ne
 8004eac:	6063      	strne	r3, [r4, #4]
 8004eae:	6013      	streq	r3, [r2, #0]
 8004eb0:	460c      	movne	r4, r1
 8004eb2:	e7eb      	b.n	8004e8c <_malloc_r+0x64>
 8004eb4:	460c      	mov	r4, r1
 8004eb6:	6849      	ldr	r1, [r1, #4]
 8004eb8:	e7cc      	b.n	8004e54 <_malloc_r+0x2c>
 8004eba:	1cc4      	adds	r4, r0, #3
 8004ebc:	f024 0403 	bic.w	r4, r4, #3
 8004ec0:	42a0      	cmp	r0, r4
 8004ec2:	d005      	beq.n	8004ed0 <_malloc_r+0xa8>
 8004ec4:	1a21      	subs	r1, r4, r0
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f000 f808 	bl	8004edc <_sbrk_r>
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d0cf      	beq.n	8004e70 <_malloc_r+0x48>
 8004ed0:	6025      	str	r5, [r4, #0]
 8004ed2:	e7db      	b.n	8004e8c <_malloc_r+0x64>
 8004ed4:	20000884 	.word	0x20000884
 8004ed8:	20000888 	.word	0x20000888

08004edc <_sbrk_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4c06      	ldr	r4, [pc, #24]	; (8004ef8 <_sbrk_r+0x1c>)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4605      	mov	r5, r0
 8004ee4:	4608      	mov	r0, r1
 8004ee6:	6023      	str	r3, [r4, #0]
 8004ee8:	f7fc fc7e 	bl	80017e8 <_sbrk>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d102      	bne.n	8004ef6 <_sbrk_r+0x1a>
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	b103      	cbz	r3, 8004ef6 <_sbrk_r+0x1a>
 8004ef4:	602b      	str	r3, [r5, #0]
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	200008f0 	.word	0x200008f0

08004efc <_raise_r>:
 8004efc:	291f      	cmp	r1, #31
 8004efe:	b538      	push	{r3, r4, r5, lr}
 8004f00:	4604      	mov	r4, r0
 8004f02:	460d      	mov	r5, r1
 8004f04:	d904      	bls.n	8004f10 <_raise_r+0x14>
 8004f06:	2316      	movs	r3, #22
 8004f08:	6003      	str	r3, [r0, #0]
 8004f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f0e:	bd38      	pop	{r3, r4, r5, pc}
 8004f10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004f12:	b112      	cbz	r2, 8004f1a <_raise_r+0x1e>
 8004f14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f18:	b94b      	cbnz	r3, 8004f2e <_raise_r+0x32>
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f000 f830 	bl	8004f80 <_getpid_r>
 8004f20:	462a      	mov	r2, r5
 8004f22:	4601      	mov	r1, r0
 8004f24:	4620      	mov	r0, r4
 8004f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f2a:	f000 b817 	b.w	8004f5c <_kill_r>
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d00a      	beq.n	8004f48 <_raise_r+0x4c>
 8004f32:	1c59      	adds	r1, r3, #1
 8004f34:	d103      	bne.n	8004f3e <_raise_r+0x42>
 8004f36:	2316      	movs	r3, #22
 8004f38:	6003      	str	r3, [r0, #0]
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	e7e7      	b.n	8004f0e <_raise_r+0x12>
 8004f3e:	2400      	movs	r4, #0
 8004f40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f44:	4628      	mov	r0, r5
 8004f46:	4798      	blx	r3
 8004f48:	2000      	movs	r0, #0
 8004f4a:	e7e0      	b.n	8004f0e <_raise_r+0x12>

08004f4c <raise>:
 8004f4c:	4b02      	ldr	r3, [pc, #8]	; (8004f58 <raise+0xc>)
 8004f4e:	4601      	mov	r1, r0
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	f7ff bfd3 	b.w	8004efc <_raise_r>
 8004f56:	bf00      	nop
 8004f58:	2000000c 	.word	0x2000000c

08004f5c <_kill_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	4c07      	ldr	r4, [pc, #28]	; (8004f7c <_kill_r+0x20>)
 8004f60:	2300      	movs	r3, #0
 8004f62:	4605      	mov	r5, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	6023      	str	r3, [r4, #0]
 8004f6a:	f7fc fbd2 	bl	8001712 <_kill>
 8004f6e:	1c43      	adds	r3, r0, #1
 8004f70:	d102      	bne.n	8004f78 <_kill_r+0x1c>
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	b103      	cbz	r3, 8004f78 <_kill_r+0x1c>
 8004f76:	602b      	str	r3, [r5, #0]
 8004f78:	bd38      	pop	{r3, r4, r5, pc}
 8004f7a:	bf00      	nop
 8004f7c:	200008f0 	.word	0x200008f0

08004f80 <_getpid_r>:
 8004f80:	f7fc bbbf 	b.w	8001702 <_getpid>

08004f84 <__sread>:
 8004f84:	b510      	push	{r4, lr}
 8004f86:	460c      	mov	r4, r1
 8004f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f8c:	f000 f896 	bl	80050bc <_read_r>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	bfab      	itete	ge
 8004f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f96:	89a3      	ldrhlt	r3, [r4, #12]
 8004f98:	181b      	addge	r3, r3, r0
 8004f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f9e:	bfac      	ite	ge
 8004fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fa2:	81a3      	strhlt	r3, [r4, #12]
 8004fa4:	bd10      	pop	{r4, pc}

08004fa6 <__swrite>:
 8004fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004faa:	461f      	mov	r7, r3
 8004fac:	898b      	ldrh	r3, [r1, #12]
 8004fae:	05db      	lsls	r3, r3, #23
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	4616      	mov	r6, r2
 8004fb6:	d505      	bpl.n	8004fc4 <__swrite+0x1e>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc0:	f000 f868 	bl	8005094 <_lseek_r>
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fce:	81a3      	strh	r3, [r4, #12]
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fda:	f000 b817 	b.w	800500c <_write_r>

08004fde <__sseek>:
 8004fde:	b510      	push	{r4, lr}
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe6:	f000 f855 	bl	8005094 <_lseek_r>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	bf15      	itete	ne
 8004ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ffa:	81a3      	strheq	r3, [r4, #12]
 8004ffc:	bf18      	it	ne
 8004ffe:	81a3      	strhne	r3, [r4, #12]
 8005000:	bd10      	pop	{r4, pc}

08005002 <__sclose>:
 8005002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005006:	f000 b813 	b.w	8005030 <_close_r>
	...

0800500c <_write_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	4c07      	ldr	r4, [pc, #28]	; (800502c <_write_r+0x20>)
 8005010:	4605      	mov	r5, r0
 8005012:	4608      	mov	r0, r1
 8005014:	4611      	mov	r1, r2
 8005016:	2200      	movs	r2, #0
 8005018:	6022      	str	r2, [r4, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	f7fb fc46 	bl	80008ac <_write>
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	d102      	bne.n	800502a <_write_r+0x1e>
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	b103      	cbz	r3, 800502a <_write_r+0x1e>
 8005028:	602b      	str	r3, [r5, #0]
 800502a:	bd38      	pop	{r3, r4, r5, pc}
 800502c:	200008f0 	.word	0x200008f0

08005030 <_close_r>:
 8005030:	b538      	push	{r3, r4, r5, lr}
 8005032:	4c06      	ldr	r4, [pc, #24]	; (800504c <_close_r+0x1c>)
 8005034:	2300      	movs	r3, #0
 8005036:	4605      	mov	r5, r0
 8005038:	4608      	mov	r0, r1
 800503a:	6023      	str	r3, [r4, #0]
 800503c:	f7fc fba0 	bl	8001780 <_close>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d102      	bne.n	800504a <_close_r+0x1a>
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	b103      	cbz	r3, 800504a <_close_r+0x1a>
 8005048:	602b      	str	r3, [r5, #0]
 800504a:	bd38      	pop	{r3, r4, r5, pc}
 800504c:	200008f0 	.word	0x200008f0

08005050 <_fstat_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	4c07      	ldr	r4, [pc, #28]	; (8005070 <_fstat_r+0x20>)
 8005054:	2300      	movs	r3, #0
 8005056:	4605      	mov	r5, r0
 8005058:	4608      	mov	r0, r1
 800505a:	4611      	mov	r1, r2
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	f7fc fb9b 	bl	8001798 <_fstat>
 8005062:	1c43      	adds	r3, r0, #1
 8005064:	d102      	bne.n	800506c <_fstat_r+0x1c>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	b103      	cbz	r3, 800506c <_fstat_r+0x1c>
 800506a:	602b      	str	r3, [r5, #0]
 800506c:	bd38      	pop	{r3, r4, r5, pc}
 800506e:	bf00      	nop
 8005070:	200008f0 	.word	0x200008f0

08005074 <_isatty_r>:
 8005074:	b538      	push	{r3, r4, r5, lr}
 8005076:	4c06      	ldr	r4, [pc, #24]	; (8005090 <_isatty_r+0x1c>)
 8005078:	2300      	movs	r3, #0
 800507a:	4605      	mov	r5, r0
 800507c:	4608      	mov	r0, r1
 800507e:	6023      	str	r3, [r4, #0]
 8005080:	f7fc fb9a 	bl	80017b8 <_isatty>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	d102      	bne.n	800508e <_isatty_r+0x1a>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	b103      	cbz	r3, 800508e <_isatty_r+0x1a>
 800508c:	602b      	str	r3, [r5, #0]
 800508e:	bd38      	pop	{r3, r4, r5, pc}
 8005090:	200008f0 	.word	0x200008f0

08005094 <_lseek_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4c07      	ldr	r4, [pc, #28]	; (80050b4 <_lseek_r+0x20>)
 8005098:	4605      	mov	r5, r0
 800509a:	4608      	mov	r0, r1
 800509c:	4611      	mov	r1, r2
 800509e:	2200      	movs	r2, #0
 80050a0:	6022      	str	r2, [r4, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f7fc fb93 	bl	80017ce <_lseek>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d102      	bne.n	80050b2 <_lseek_r+0x1e>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	b103      	cbz	r3, 80050b2 <_lseek_r+0x1e>
 80050b0:	602b      	str	r3, [r5, #0]
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	200008f0 	.word	0x200008f0

080050b8 <__malloc_lock>:
 80050b8:	4770      	bx	lr

080050ba <__malloc_unlock>:
 80050ba:	4770      	bx	lr

080050bc <_read_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4c07      	ldr	r4, [pc, #28]	; (80050dc <_read_r+0x20>)
 80050c0:	4605      	mov	r5, r0
 80050c2:	4608      	mov	r0, r1
 80050c4:	4611      	mov	r1, r2
 80050c6:	2200      	movs	r2, #0
 80050c8:	6022      	str	r2, [r4, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	f7fc fb3b 	bl	8001746 <_read>
 80050d0:	1c43      	adds	r3, r0, #1
 80050d2:	d102      	bne.n	80050da <_read_r+0x1e>
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	b103      	cbz	r3, 80050da <_read_r+0x1e>
 80050d8:	602b      	str	r3, [r5, #0]
 80050da:	bd38      	pop	{r3, r4, r5, pc}
 80050dc:	200008f0 	.word	0x200008f0

080050e0 <_init>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	bf00      	nop
 80050e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e6:	bc08      	pop	{r3}
 80050e8:	469e      	mov	lr, r3
 80050ea:	4770      	bx	lr

080050ec <_fini>:
 80050ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ee:	bf00      	nop
 80050f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f2:	bc08      	pop	{r3}
 80050f4:	469e      	mov	lr, r3
 80050f6:	4770      	bx	lr
